[{"path":"/documentation/operators/repeat.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#creating\">Creating</a></li>\n  <li class=\"active\">Repeat</li>\n</ol>\n\n<h1>Repeat</h1>\n<h3>create an Observable that emits a particular item multiple times</h3>\n\n<figure>\n <img src=\"images/repeat.c.png\" style=\"width:100%;\" alt=\"Repeat\">\n <figcaption><p>\n  The <span class=\"operator\">Repeat</span> operator emits an item repeatedly. Some implementations\n  of this operator allow you to repeat a <em>sequence</em> of items, and some permit you to limit\n  the number of repetitions.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/interval.html\"><span class=\"operator\">Interval</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/range.html\"><span class=\"operator\">Range</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/12_CombiningSequences.html#Repeat\"><cite>Introduction to Rx</cite>: Repeat</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>cycle</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>repeat</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>doWhile repeat repeatWhen whileDo</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/repeat.o.png\" style=\"width:100%;\" alt=\"repeat\">\n     <figcaption><p>\n      RxGroovy implements this operator as <code>repeat</code>. It does not initiate an Observable,\n      but operates on an Observable in such a way that it repeats the sequence emitted by the\n      source Observable as its own sequence, either infinitely, or in the case of\n      <code>repeat(<i>n</i>)</code>, <i>n</i> times.\n     </p><p>\n      <code>repeat</code> operates by default on the <code>trampoline</code>\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>. There is also a variant that allows you to set the Scheduler by\n      passing one in as a parameter.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat()\"><code>repeat()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long)\"><code>repeat(long)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(rx.Scheduler)\"><code>repeat(Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long,%20rx.Scheduler)\"><code>repeat(long,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/repeatWhen.f.png\" style=\"width:100%;\" alt=\"repeatWhen\">\n     <figcaption><p>\n      There is also an operator called <code>repeatWhen</code>. Rather than buffering and replaying\n      the sequence from the source Observable, it <em>resubscribes</em> to and mirrors the source\n      Observable, but only conditionally.\n     </p><p>\n      It decides whether to resubscribe and remirror the source Observable by passing that\n      Observable&#x2019;s termination notifications (error or completed) to a notification handler as\n      <code>void</code> emissions. This notification handler acts as an Observable operator, taking\n      an Observable that emits these <code>void</code> notifications as input, and returning an\n      Observable that emits <code>void</code> items (meaning, resubscribe and mirror the source\n      Observable) or terminates (meaning, terminate the sequence emitted by\n      <code>repeatWhen</code>).\n     </p><p>\n      <code>repeatWhen</code> operates by default on the <code>trampoline</code>\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>. There is also a variant that allows you to set the Scheduler by\n      passing one in as a parameter.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1)\"><code>repeatWhen(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1,%20rx.Scheduler)\"><code>repeatWhen(Func1,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doWhile.png\" style=\"width:100%;\" alt=\"doWhile\">\n     <figcaption><p>\n      In RxGroovy, <code>doWhile</code> is not part of the standard set of operators, but is part of the\n      optional <code>rxjava-computation-expressions</code> package.  <code>doWhile</code> checks a condition\n      after each repetition of the source sequence, and only repeats it if that condition is true.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/whileDo.png\" style=\"width:100%;\" alt=\"whileDo\">\n     <figcaption><p>\n      In RxGroovy, <code>whileDo</code> is not part of the standard set of operators, but is part of the\n      optional <code>rxjava-computation-expressions</code> package.  <code>whileDo</code> checks a condition\n      before each repetition of the source sequence, and only repeats it if that condition is true.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>doWhile repeat repeatWhen whileDo</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/repeat.o.png\" style=\"width:100%;\" alt=\"repeat\">\n     <figcaption><p>\n      RxJava implements this operator as <code>repeat</code>. It does not initiate an Observable,\n      but operates on an Observable in such a way that it repeats the sequence emitted by the\n      source Observable as its own sequence, either infinitely, or in the case of\n      <code>repeat(<i>n</i>)</code>, <i>n</i> times.\n     </p><p>\n      <code>repeat</code> operates by default on the <code>trampoline</code>\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>. There is also a variant that allows you to set the Scheduler by\n      passing one in as a parameter.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat()\"><code>repeat()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long)\"><code>repeat(long)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(rx.Scheduler)\"><code>repeat(Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeat(long,%20rx.Scheduler)\"><code>repeat(long,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/repeatWhen.f.png\" style=\"width:100%;\" alt=\"repeatWhen\">\n     <figcaption><p>\n      There is also an operator called <code>repeatWhen</code>. Rather than buffering and replaying\n      the sequence from the source Observable, it <em>resubscribes</em> to and mirrors the source\n      Observable, but only conditionally.\n     </p><p>\n      It decides whether to resubscribe and remirror the source Observable by passing that\n      Observable&#x2019;s termination notifications (error or completed) to a notification handler as\n      <code>void</code> emissions. This notification handler acts as an Observable operator, taking\n      an Observable that emits these <code>void</code> notifications as input, and returning an\n      Observable that emits <code>void</code> items (meaning, resubscribe and mirror the source\n      Observable) or terminates (meaning, terminate the sequence emitted by\n      <code>repeatWhen</code>).\n     </p><p>\n      <code>repeatWhen</code> operates by default on the <code>trampoline</code>\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>. There is also a variant that allows you to set the Scheduler by\n      passing one in as a parameter.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1)\"><code>repeatWhen(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#repeatWhen(rx.functions.Func1,%20rx.Scheduler)\"><code>repeatWhen(Func1,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doWhile.png\" style=\"width:100%;\" alt=\"doWhile\">\n     <figcaption><p>\n      In RxJava, <code>doWhile</code> is not part of the standard set of operators, but is part of the\n      optional <code>rxjava-computation-expressions</code> package.  <code>doWhile</code> checks a condition\n      after each repetition of the source sequence, and only repeats it if that condition is true.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/whileDo.png\" style=\"width:100%;\" alt=\"whileDo\">\n     <figcaption><p>\n      In RxJava, <code>whileDo</code> is not part of the standard set of operators, but is part of the\n      optional <code>rxjava-computation-expressions</code> package.  <code>whileDo</code> checks a condition\n      before each repetition of the source sequence, and only repeats it if that condition is true.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>repeat repeatUntil repeatWhen</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>doWhile repeat while</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/repeat.png\" style=\"width:100%;\" alt=\"repeat\">\n     <figcaption><p>\n      RxJS implements this operator as <code>repeat</code>. It accepts as its parameter the item to\n      repeat, and optionally two other parameters: the number of times you want the item to repeat,\n      and the <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> on which you want to perform this operation (it uses the\n      <code>immediate</code> Scheduler by default).\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.repeat(42, 3);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div><div class=\"output\"><pre>\nNext: 42\nNext: 42\nNext: 42\nCompleted</pre></div>\n     <p>\n      <code>repeat</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doWhile.png\" style=\"width:100%;\" alt=\"doWile\">\n     <figcaption><p>\n      RxJS also implements the <code>doWhile</code> operator. It repeats the source Observable&#x2019;s sequence\n      of emissions only so long as a condition you specify remains true.\n     </p>\n     <div class=\"code javascript\"><pre>\nvar i = 0;\n\nvar source = Rx.Observable.return(42).doWhile(\n    function (x) { return ++i &lt; 2; });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 42\nNext: 42\nCompleted</pre></div>\n     <p><code>doWhile</code> is found in each of the following distributions.\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.experimental.js</code></li>\n     </ul>\n     </p><p>It requires one of the following distributions:</p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/while.png\" style=\"width:100%;\" alt=\"while\">\n     <figcaption><p>\n      RxJS also implements the <code>while</code> operator. It repeats the source Observable&#x2019;s sequence\n      of emissions only if a condition you specify is true.\n     </p>\n     <div class=\"code javascript\"><pre>\nvar i = 0;\n\n// Repeat until condition no longer holds\nvar source = Rx.Observable.while(\n    function () { return i++ &lt; 3 },\n    Rx.Observable.return(42)\n);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 42\nNext: 42\nNext: 42\nCompleted</pre></div>\n     <p><code>while</code> is found in the <code>rx.experimental.js</code> distribution. It requires one of the\n     following distributions:</p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>doWhile repeat repeatWhen whileDo</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Repeat</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>repeat repeatWhen</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>repeat</code>.\n    </p>\n    <p>\n    Generates an observable sequence that repeats the given element the specified number of times.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/repeat/repeat.php\n\n$source = \\Rx\\Observable::range(1, 3)\n    -&gt;repeat(3);\n\n$subscription = $source-&gt;subscribe($createStdoutObserver());\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 2\nNext value: 3\nNext value: 1\nNext value: 2\nNext value: 3\nNext value: 1\nNext value: 2\nNext value: 3\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>repeatWhen</code>.\n    </p>\n    <p>\n    Returns an Observable that emits the same values as the source Observable with the exception of an onCompleted. An onCompleted notification from the source will result in the emission of a count item to the Observable provided as an argument to the notificationHandler function. If that Observable calls onComplete or onError then repeatWhen will call onCompleted or onError on the child subscription. Otherwise, this Observable will resubscribe to the source observable.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/repeat/repeatWhen.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$source = Rx\\Observable::just(42)\n    -&gt;repeatWhen(function (\\Rx\\Observable $notifications) {\n        return $notifications\n            -&gt;scan(function ($acc, $x) {\n                return $acc + $x;\n            }, 0)\n            -&gt;delay(1000)\n            -&gt;doOnNext(function () {\n                echo &quot;1 second delay&quot;, PHP_EOL;\n            })\n            -&gt;takeWhile(function ($count) {\n                return $count &lt; 2;\n            });\n    });\n\n$subscription = $source-&gt;subscribe($createStdoutObserver(), $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\n1 second delay\nNext value: 42\n1 second delay\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>do_while repeat while_do</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>repeat repeat_infinitely</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>repeat repeatWhen</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>repeatElement</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Repeat"},{"path":"/documentation/operators/count.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#mathematical\">Mathematical and Aggregate</a></li>\n  <li class=\"active\">Count</li>\n</ol>\n\n   <h1>Count</h1>\n   <h3>count the number of items emitted by the source Observable and emit only this value</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"count\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Count</span> operator transforms an Observable that emits items into\n     an Observable that emits a single value that represents the number of items emitted by the\n     source Observable.\n    </p><p>\n     If the source Observable terminates with an error, <span class=\"operator\">Count</span> will pass\n     this error notification along without emitting an item first. If the source Observable does not\n     terminate at all, <span class=\"operator\">Count</span> will neither emit an item nor terminate.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/07_Aggregation.html#Count\"><cite>Introduction to Rx</cite>: Count</a></li>\n    <li><a href=\"http://rxmarbles.com/#count\">RxMarbles: <code>count</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>count longCount</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxClojure has both <code>count</code> and <code>longCount</code> variants of this operator,\n      but both of these in fact return long values.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>count</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxCpp implements this operator as <code>count</code>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>count countLong</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxGroovy the operator is called <code>count</code> and the Observable it creates emits an\n      Integer value. There is also a <code>countLong</code> whose Observable emits a Long value.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\ndef myObservable = Observable.create({ aSubscriber -&gt;\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;Three&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;Two&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;One&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onCompleted();\n});\n\nmyObservable.count().subscribe(\n   { println(it); },                          // onNext\n   { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n   { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n3\nSequence complete</pre></div>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#count()\"><code>count()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#countLong()\"><code>countLong()</code></a></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>count countLong</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxJava the operator is called <code>count</code> and the Observable it creates emits an\n      Integer value. There is also a <code>countLong</code> whose Observable emits a Long value.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nString[] items = new String[] { &quot;one&quot;, &quot;two&quot;, &quot;three&quot; };\nassertEquals( new Integer(3), Observable.from(items).count().toBlocking().single() );</pre></div>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#count()\"><code>count()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#countLong()\"><code>countLong()</code></a></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>count</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxJS the operator <code>count</code> counts the number of items in the source Observable\n      that satisfy a specified predicate. That predicate takes the form of a function that takes\n      three parameters:\n     </p>\n     <ol>\n      <li>the emitted item</li>\n      <li>the index of that item in the sequence of emitted items</li>\n      <li>the source Observable</li>\n     </ol>\n     <p>\n      If the predicate function returns <code>true</code>, <code>count</code> will increment the\n      tally of items that it will report when the source Observable completes. If you want to count\n      <em>all</em> of the items emitted by the source Observable, simply pass <code>count</code> a\n      predicate that always returns <code>true</code>:\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nnumberOfItems = someObservable.count(function() { return true; });</pre></div>\n     <p>\n      <code>count</code> is part of the following packages:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.aggregates.js</code></li>\n     </ul>\n     <p>\n      <code>count</code> requires one of any of the following packages:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>count</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxKotlin implements this operator as <code>count</code>.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code kotlin\"><pre>\nval list = listOf(1, 2, 3, 4, 5)\nassertEquals( 5, Observable.from(list)!!.count()!!.toBlocking()!!.single() )</pre></div>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Count LongCount</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In Rx.NET the Observable this operator creates emits an Integer value, but there is also a\n      <code>LongCount</code> whose Observable emits a Long value. With both variants, you can either\n      pass the source Observable in to the operator as a parameter or you can call the operator as\n      an instance method of the source Observable (in which case you omit the parameter).\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>count</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>count</code>.\n    </p>\n    <p>\n    Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/count/count.php\n\n$source = \\Rx\\Observable::fromArray(range(1, 10));\n\n$subscription = $source-&gt;count()-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 10\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>count</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxPY you have the option to pass <code>count</code> a predicate that takes an item emitted\n      by the source Observable as a parameter. If you do so, <code>count</code> will emit a count\n      only of those items from the source Observable that the predicate evaluates as\n      <code>true</code>. Otherwise, it will emit a count of all items emitted by the source\n      Observable.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code python\"><pre>\nnumberOfItems = someObservable.count()\nnumberOfNegativeItems = someObservable.count(lambda x: x &lt; 0)</pre></div>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>count</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In Rx.rb you have the option to pass <code>count</code> a predicate that takes an item emitted\n      by the source Observable as a parameter. If you do so, <code>count</code> will emit a count\n      only of those items from the source Observable that the predicate evaluates as\n      <code>true</code>. Otherwise it will emit a count of all items emitted by the source\n      Observable.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>count length longCount size</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxScala the operator <code>count</code> counts the number of items in the source Observable\n      that satisfy a specified predicate. That predicate accepts an emitted item as a parameter and\n      returns a Boolean. <code>count</code> will emit a count of all items for which this predicate\n      returned <code>true</code>.\n     </p><p>\n      Use <code>length</code> or <code>size</code> instead if you want to count <em>all</em> of the\n      items emitted by the source Observable and emit this count as an Integer, or use\n      <code>longCount</code> to emit it as a Long.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Count"},{"path":"/documentation/operators/sequenceequal.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#conditional\">Conditional and Boolean</a></li>\n  <li class=\"active\">SequenceEqual</li>\n</ol>\n\n   <h1>SequenceEqual</h1>\n   <h3>determine whether two Observables emit the same sequence of items</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"sequenceEqual\"></rx-marbles>\n    <figcaption><p>\n     Pass <span class=\"operator\">SequenceEqual</span> two Observables, and it will compare the items emitted by\n     each Observable, and the Observable it returns will emit <code>true</code> only if both sequences are the\n     same (the same items, in the same order, with the same termination state).\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/06_Inspection.html#SequenceEqual\"><cite>Introduction to Rx</cite>: SequenceEqual</a></li>\n    <li><a href=\"http://rxmarbles.com/#sequenceEqual\">RxMarbles: <code>sequenceEqual</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>sequenceEqual</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/sequenceEqual.png\" style=\"width:100%;\" alt=\"sequenceEqual\">\n      <figcaption><p>\n       Pass <code>sequenceEqual</code> two Observables, and it will compare the items emitted by each\n       Observable, and the Observable it returns will emit <code>true</code> only if both sequences terminate\n       normally after emitting the same sequence of items in the same order; otherwise it will emit\n       <code>false</code>. You can optionally pass a third parameter: a function that accepts two items and\n       returns <code>true</code> if they are equal according to a standard of your choosing.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\ndef firstfour = Observable.from([1, 2, 3, 4]);\ndef firstfouragain = Observable.from([1, 2, 3, 4]);\ndef firstfive = Observable.from([1, 2, 3, 4, 5]);\ndef firstfourscrambled = Observable.from([3, 2, 1, 4]);\n\nprintln(&apos;firstfour == firstfive?&apos;);\nObservable.sequenceEqual(firstfour, firstfive).subscribe({ println(it); });\nprintln(&apos;firstfour == firstfouragain?&apos;);\nObservable.sequenceEqual(firstfour, firstfouragain).subscribe({ println(it); });\nprintln(&apos;firstfour == firstfourscrambled?&apos;);\nObservable.sequenceEqual(firstfour, firstfourscrambled).subscribe({ println(it); });</pre></div>\n      <div class=\"output\"><pre>\nfirstfour == firstfive?\nfalse\nfirstfour == firstfouragain?\ntrue\nfirstfour == firstfourscrambled?\nfalse</pre></div>\n      <p>\n       This operator does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sequenceEqual(rx.Observable,%20rx.Observable)\"><code>sequenceEqual(Observable,Observable)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sequenceEqual(rx.Observable,%20rx.Observable,%20rx.functions.Func2)\"><code>sequenceEqual(Observable,Observable,Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>sequenceEqual</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/sequenceEqual.png\" style=\"width:100%;\" alt=\"sequenceEqual\">\n      <figcaption><p>\n       Pass <code>sequenceEqual</code> two Observables, and it will compare the items emitted by each\n       Observable, and the Observable it returns will emit <code>true</code> only if both sequences terminate\n       normally after emitting the same sequence of items in the same order; otherwise it will emit\n       <code>false</code>. You can optionally pass a third parameter: a function that accepts two items and\n       returns <code>true</code> if they are equal according to a standard of your choosing.\n      </p><p>\n       This operator does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sequenceEqual(rx.Observable,%20rx.Observable)\"><code>sequenceEqual(Observable,Observable)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sequenceEqual(rx.Observable,%20rx.Observable,%20rx.functions.Func2)\"><code>sequenceEqual(Observable,Observable,Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>sequenceEqual</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>sequenceEqual</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/sequenceEqual.png\" style=\"width:100%;\" alt=\"sequenceEqual\">\n      <figcaption><p>\n       In RxJS, <code>sequenceEqual</code> is a method of a particular Observable instance, so you pass it\n       exactly one other Observable to compare the instance to. You can optionally pass a second parameter: a\n       function that accepts two items and returns <code>true</code> if they are equal according to a standard\n       of your choosing. <code>sequenceEqual</code> returns an Observable that will emit a <code>true</code> if\n       the two Observables emit the same set of items in the same order before completing, or a\n       <code>false</code> otherwise.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source1 = Rx.Observable.return(42);\nvar source2 = Rx.Observable.return(42);\n\nvar source = source1.sequenceEqual(source2);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: true\nCompleted</pre></div>\n      <p>\n       <code>sequenceEqual</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.aggregates.js</code></li>\n      </ul>\n      <p>\n       <code>sequenceEqual</code> requires one of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>sequenceEqual</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>AssertEqual SequenceEqual</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>sequence_equal</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>sequence_eql?</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>sequenceEqual sequenceEqualWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"SequenceEqual"},{"path":"/documentation/operators/takeuntil.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#conditional\">Conditional and Boolean</a></li>\n  <li class=\"active\">TakeUntil</li>\n</ol>\n\n   <h1>TakeUntil</h1>\n   <h3>discard any items emitted by an Observable after a second Observable emits an item or terminates</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"takeUntil\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">TakeUntil</span> subscribes and begins mirroring the source Observable. It also\n     monitors a second Observable that you provide. If this second Observable emits an item or sends a\n     termination notification, the Observable returned by <span class=\"operator\">TakeUntil</span> stops\n     mirroring the source Observable and terminates.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/skip.html\"><span class=\"operator\">Skip</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skiplast.html\"><span class=\"operator\">SkipLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipuntil.html\"><span class=\"operator\">SkipUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipwhile.html\"><span class=\"operator\">SkipWhile</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/take.html\"><span class=\"operator\">Take</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takelast.html\"><span class=\"operator\">TakeLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takewhile.html\"><span class=\"operator\">TakeWhile</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html#SkipUntilTakeUntil\"><cite>Introduction to Rx</cite>: SkipUntil and TakeUntil</a></li>\n    <li><a href=\"http://rxmarbles.com/#takeUntil\">RxMarbles: <code>takeUntil</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>take_until</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>takeUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/takeUntil.png\" style=\"width:100%;\" alt=\"takeUntil\">\n      <figcaption><p>\n       In RxGroovy, this operator is implemented as <code>takeUntil</code>. Note that the second Observable can\n       cause <code>takeUntil</code> to quit emitting items either by emitting an item or by issuing an\n       <code>onError</code> or <code>onCompleted</code> notification.\n      </p><p>\n       <code>takeUntil</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeUntil(rx.Observable)\"><code>takeUntil(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/takeUntil.p.png\" style=\"width:100%;\" alt=\"takeUntil\">\n      <figcaption><p>\n       A second version of this operator was released in RxGroovy 1.1. It uses a predicate function that\n       evaluates the items emitted by the source Observable, rather than a second Observable, to terminate the\n       resulting Observable sequence. In this way, it behaves in a similar way to\n       <a href=\"http://reactivex.io/documentation/operators/takewhile.html\"><span class=\"operator\">TakeWhile</span></a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeUntil(rx.functions.Func1)\"><code>takeUntil(Func1)</code> (RxGroovy 1.1)</a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>takeUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/takeUntil.png\" style=\"width:100%;\" alt=\"takeUntil\">\n      <figcaption><p>\n       In RxJava, this operator is implemented as <code>takeUntil</code>. Note that the second Observable can\n       cause <code>takeUntil</code> to quit emitting items either by emitting an item or by issuing an\n       <code>onError</code> or <code>onCompleted</code> notification.\n      </p><p>\n       <code>takeUntil</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeUntil(rx.Observable)\"><code>takeUntil(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/takeUntil.p.png\" style=\"width:100%;\" alt=\"takeUntil\">\n      <figcaption><p>\n       A second version of this operator was released in RxJava 1.1. It uses a predicate function that\n       evaluates the items emitted by the source Observable, rather than a second Observable, to terminate the\n       resulting Observable sequence. In this way, it behaves in a similar way to\n       <a href=\"http://reactivex.io/documentation/operators/takewhile.html\"><span class=\"operator\">TakeWhile</span></a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeUntil(rx.functions.Func1)\"><code>takeUntil(Func1)</code> (RxJava 1.1)</a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>takeUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>takeUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/takeUntil.png\" style=\"width:100%;\" alt=\"takeUntil\">\n      <figcaption><p>\n       RxJS implements the <code>takeUntil</code> operator. You can pass it either an Observable or a\n       <code>Promise</code> that it will monitor for an item that triggers <code>takeUntil</code> to stop\n       mirroring the source Observable.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(0, 1000)\n    .takeUntil(Rx.Observable.timer(5000));\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nNext: 3\nNext: 4\nCompleted</pre></div>\n      <p>\n       <code>takeUntil</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <p>\n      There is also a <code>takeUntilWithTime</code> operator to which you can pass an absolute time or an\n      initial duration, but this is described on the <a href=\"http://reactivex.io/documentation/operators/take.html\"><span class=\"operator\">Take</span></a>\n      operator page.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>takeUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>TakeUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>takeUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>takeUntil</code>.\n    </p>\n    <p>\n    Returns the values from the source observable sequence until the other observable sequence produces a value.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/take/take.php\n\n$observable = Rx\\Observable::fromArray([21, 42, 63]);\n$observable\n    -&gt;take(2)\n    -&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 21\nNext value: 42\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>take_until take_until_with_time</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>take_until</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>takeUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>takeUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"TakeUntil"},{"path":"/documentation/operators/from.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#creating\">Creating</a></li>\n  <li class=\"active\">From</li>\n</ol>\n\n<h1>From</h1>\n<h3>convert various other objects and data types into Observables</h3>\n\n<figure>\n <img src=\"images/from.c.png\" style=\"width:100%;\" alt=\"From\">\n <figcaption><p>\n  When you work with Observables, it can be more convenient if all of the data you mean to work with\n  can be represented as Observables, rather than as a mixture of Observables and other types. This\n  allows you to use a single set of operators to govern the entire lifespan of the data stream.\n </p><p>\n  Iterables, for example, can be thought of as a sort of synchronous Observable; Futures, as a sort\n  of Observable that always emits only a single item. By explicitly converting such objects to\n  Observables, you allow them to interact as peers with other Observables.\n </p><p>\n  For this reason, most ReactiveX implementations have methods that allow you to convert\n  certain language-specific objects and data structures into Observables.\n </p></figcaption>\n</figure>\n\n<h2>See Also</h2>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/just.html\"><span class=\"operator\">Just</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/start.html\"><span class=\"operator\">Start</span></a></li>\n <li><a href=\"http://rxwiki.wikidot.com/101samples#toc5\"><cite>101 Rx Samples</cite>: Observation Operators</a></li>\n <li><a href=\"https://www.youtube.com/watch?v=sDqrlNprY24\">RxJava Tutorial 03: Observable from, just, &amp; create methods</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>seq</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>from</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>decode from fromAction fromCallable fromFunc0 fromRunnable runAsync</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/from.Future.png\" style=\"width:100%;\" alt=\"from\">\n     <figcaption><p>\n      In RxGroovy, the <code>from</code> operator can convert a Future, an Iterable, or an Array.\n      In the case of an Iterable or an Array, the resulting Observable will emit each item contained\n      in the Iterable or Array.\n     </p><p>\n      In the case of a Future, it will emit the single result of the <code>get</code> call. You may\n      optionally pass the version of <code>from</code> that accepts a future two additional\n      parameters indicating a timeout span and the units of time that span is denominated in. The\n      resulting Observable will terminate with an error if that span of time passes before the\n      Future responds with a value.\n     </p><p>\n      <code>from</code> does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>,\n      however you can pass the variant that converts a Future a Scheduler as an optional second parameter, and\n      it will use that Scheduler to govern the Future.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(T%5B%5D)\"><code>from(array)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.lang.Iterable)\"><code>from(Iterable)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future)\"><code>from(Future)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20rx.Scheduler)\"><code>from(Future,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20long,%20java.util.concurrent.TimeUnit)\"><code>from(Future,timout,timeUnit)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/fromFunc0.png\" style=\"width:100%;\" alt=\"fromFunc0\">\n     <figcaption><p>\n      In addition, in the <code>RxJavaAsyncUtil</code> package, you have available to you the\n      following operators that convert actions, callables, functions, and runnables into\n      Observables that emit the results of those things:\n     </p>\n     <ul>\n      <li><code>fromAction</code></li>\n      <li><code>fromCallable</code></li>\n      <li><code>fromFunc0</code></li>\n      <li><code>fromRunnable</code></li>\n     </ul>\n     <p>\n      See the <a href=\"http://reactivex.io/documentation/operators/start.html\"><span class=\"operator\">Start</span></a> operator for more\n      information about those operators.\n     </p>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/St.from.png\" style=\"width:100%;\" alt=\"from\">\n     <figcaption><p>\n      Note that there is also a <code>from</code> operator that is a method of the optional\n      <code>StringObservable</code> class. It converts a stream of characters or a\n      <code>Reader</code> into an Observable that emits byte arrays or Strings.\n     </p></figcaption>\n    </figure>\n    <p>\n     In the separate <code>RxJavaAsyncUtil</code> package, which is not included by default with RxGroovy, there\n     is also a <code>runAsync</code> function. Pass <code>runAsync</code> an <code>Action</code> and a\n     <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>, and it will return a\n     <code>StoppableObservable</code> that uses the specified <code>Action</code> to generate items that it\n     emits.\n    </p><p>\n     The <code>Action</code> accepts an <code>Observer</code> and a <code>Subscription</code>. It uses the\n     <code>Subscription</code> to check for the <code>isUnsubscribed</code> condition, upon which it will stop\n     emitting items. You can also manually stop a <code>StoppableObservable</code> at any time by calling its\n     <code>unsubscribe</code> method (which will also unsubscribe the <code>Subscription</code> you have\n     associated with the <code>StoppableObservable</code>).\n    </p><p>\n     Because <code>runAsync</code> immediately invokes the <code>Action</code> and begins emitting the items, it\n     is possible that some items may be lost in the interval between when you establish the\n     <code>StoppableObservable</code> with this method and when your <code>Observer</code> is ready to receive\n     items. If this is a problem, you can use the variant of <code>runAsync</code> that also accepts a\n     <a href=\"http://reactivex.io/documentation/operators/../subject.html\"><code>Subject</code></a> and pass a <code>ReplaySubject</code> with which you can\n     retrieve the otherwise-missing items.\n    </p>\n    <figure>\n     <img src=\"images/St.decode.png\" style=\"width:100%;\" alt=\"decode\">\n     <figcaption><p>\n      The <code>StringObservable</code> class, which is not a default part of RxGroovy, also includes the\n      <code>decode</code> operator which converts a stream of multibyte characters into an Observable that\n      emits byte arrays that respect the character boundaries.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>decode from fromAction fromCallable fromFunc0 fromRunnable runAsync</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/from.Future.png\" style=\"width:100%;\" alt=\"from\">\n     <figcaption><p>\n      In RxJava, the <code>from</code> operator can convert a Future, an Iterable, or an Array.\n      In the case of an Iterable or an Array, the resulting Observable will emit each item contained\n      in the Iterable or Array.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nInteger[] items = { 0, 1, 2, 3, 4, 5 };\nObservable myObservable = Observable.from(items);\n\nmyObservable.subscribe(\n    new Action1&lt;Integer&gt;() {\n        @Override\n        public void call(Integer item) {\n            System.out.println(item);\n        }\n    },\n    new Action1&lt;Throwable&gt;() {\n        @Override\n        public void call(Throwable error) {\n            System.out.println(&quot;Error encountered: &quot; + error.getMessage());\n        }\n    },\n    new Action0() {\n        @Override\n        public void call() {\n            System.out.println(&quot;Sequence complete&quot;);\n        }\n    }\n);\n</pre></div>\n     <div class=\"output\"><pre>\n0\n1\n2\n3\n4\n5\nSequence complete</pre></div>\n     <p>\n      In the case of a Future, it will emit the single result of the <code>get</code> call. You may\n      optionally pass the version of <code>from</code> that accepts a future two additional\n      parameters indicating a timeout span and the units of time that span is denominated in. The\n      resulting Observable will terminate with an error if that span of time passes before the\n      Future responds with a value.\n     </p><p>\n      <code>from</code> does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>,\n      however you can pass the variant that converts a Future a Scheduler as an optional second parameter, and\n      it will use that Scheduler to govern the Future.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(T%5B%5D)\"><code>from(array)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.lang.Iterable)\"><code>from(Iterable)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future)\"><code>from(Future)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20rx.Scheduler)\"><code>from(Future,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#from(java.util.concurrent.Future,%20long,%20java.util.concurrent.TimeUnit)\"><code>from(Future,timout,timeUnit)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/fromFunc0.png\" style=\"width:100%;\" alt=\"fromFunc0\">\n     <figcaption><p>\n      In addition, in the <code>RxJavaAsyncUtil</code> package, you have available to you the\n      following operators that convert actions, callables, functions, and runnables into\n      Observables that emit the results of those things:\n     </p>\n     <ul>\n      <li><code>fromAction</code></li>\n      <li><code>fromCallable</code></li>\n      <li><code>fromFunc0</code></li>\n      <li><code>fromRunnable</code></li>\n     </ul>\n     <p>\n      See the <a href=\"http://reactivex.io/documentation/operators/start.html\"><span class=\"operator\">Start</span></a> operator for more\n      information about those operators.\n     </p>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/St.from.png\" style=\"width:100%;\" alt=\"from\">\n     <figcaption><p>\n      Note that there is also a <code>from</code> operator that is a method of the optional\n      <code>StringObservable</code> class. It converts a stream of characters or a\n      <code>Reader</code> into an Observable that emits byte arrays or Strings.\n     </p></figcaption>\n    </figure>\n    <p>\n     In the separate <code>RxJavaAsyncUtil</code> package, which is not included by default with RxJava, there\n     is also a <code>runAsync</code> function. Pass <code>runAsync</code> an <code>Action</code> and a\n     <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>, and it will return a\n     <code>StoppableObservable</code> that uses the specified <code>Action</code> to generate items that it\n     emits.\n    </p><p>\n     The <code>Action</code> accepts an <code>Observer</code> and a <code>Subscription</code>. It uses the\n     <code>Subscription</code> to check for the <code>isUnsubscribed</code> condition, upon which it will stop\n     emitting items. You can also manually stop a <code>StoppableObservable</code> at any time by calling its\n     <code>unsubscribe</code> method (which will also unsubscribe the <code>Subscription</code> you have\n     associated with the <code>StoppableObservable</code>).\n    </p><p>\n     Because <code>runAsync</code> immediately invokes the <code>Action</code> and begins emitting the items, it\n     is possible that some items may be lost in the interval between when you establish the\n     <code>StoppableObservable</code> with this method and when your <code>Observer</code> is ready to receive\n     items. If this is a problem, you can use the variant of <code>runAsync</code> that also accepts a\n     <a href=\"http://reactivex.io/documentation/operators/../subject.html\"><code>Subject</code></a> and pass a <code>ReplaySubject</code> with which you can\n     retrieve the otherwise-missing items.\n    </p>\n    <figure>\n     <img src=\"images/St.decode.png\" style=\"width:100%;\" alt=\"decode\">\n     <figcaption><p>\n      The <code>StringObservable</code> class, which is not a default part of RxGroovy, also includes the\n      <code>decode</code> operator which converts a stream of multibyte characters into an Observable that\n      emits byte arrays that respect the character boundaries.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>fromArray fromCallable fromFuture fromIterable fromPublisher</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>from fromCallback fromEvent fromEventPattern fromNodeCallback fromPromise of ofArrayChanges ofObjectChanges ofWithScheduler pairs</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <p>\n     There are several, specialized <span class=\"operator\">From</span> variants in RxJS:\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/from.png\" style=\"width:100%;\" alt=\"from\">\n     <figcaption><p>\n      In RxJS, the <code>from</code> operator converts an array-like or iterable object into an\n      Observable that emits the items in that array or iterable. A String, in this context, is\n      treated as an array of characters.\n     </p><p>\n      This operator also takes three additional, optional parameters:\n     </p>\n     <ol start=\"2\">\n      <li>a transforming function that takes an item from the array or iterable as input and produces an item to be emitted by the resulting Observable as output</li>\n      <li>a second argument to pass into the transforming function as additional context information</li>\n      <li>a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> on which this operator should operate</li>\n     </ol>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\n// Array-like object (arguments) to Observable\nfunction f() {\n  return Rx.Observable.from(arguments);\n}\n\nf(1, 2, 3).subscribe(\n  function (x) { console.log(&apos;Next: &apos; + x); },\n  function (err) { console.log(&apos;Error: &apos; + err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 3\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\n// Any iterable object...\n// Set\nvar s = new Set([&apos;foo&apos;, window]);\nRx.Observable.from(s).subscribe(\n  function (x) { console.log(&apos;Next: &apos; + x); },\n  function (err) { console.log(&apos;Error: &apos; + err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: foo\nNext: window\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\n// Map\nvar m = new Map([[1, 2], [2, 4], [4, 8]]);\nRx.Observable.from(m).subscribe(\n  function (x) { console.log(&apos;Next: &apos; + x); },\n  function (err) { console.log(&apos;Error: &apos; + err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: [1, 2]\nNext: [2, 4]\nNext: [4, 8]\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\n// String\nRx.Observable.from(&quot;foo&quot;).subscribe(\n  function (x) { console.log(&apos;Next: &apos; + x); },\n  function (err) { console.log(&apos;Error: &apos; + err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: f\nNext: o\nNext: o\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\n// Using an arrow function as the map function to manipulate the elements\nRx.Observable.from([1, 2, 3], function (x) { return x + x; }).subscribe(\n  function (x) { console.log(&apos;Next: &apos; + x); },\n  function (err) { console.log(&apos;Error: &apos; + err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 2\nNext: 4\nNext: 6\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\n// Generate a sequence of numbers\nRx.Observable.from({length: 5}, function(v, k) { return k; }).subscribe(\n  function (x) { console.log(&apos;Next: &apos; + x); },\n  function (err) { console.log(&apos;Error: &apos; + err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nNext: 3\nNext: 4\nCompleted</pre></div>\n     <p>\n      <code>from</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/fromCallback.png\" style=\"width:100%;\" alt=\"fromCallback\">\n     <figcaption><p>\n      The <code>fromCallback</code> operator takes a function as a parameter, calls this\n      function, and emits the value returned from it as its single emission.\n     </p><p>\n      This operator also takes two additional, optional parameters:\n     </p>\n     <ol start=\"2\">\n      <li>a parameter to pass to the callback function</li>\n      <li>a tranforming function that takes the return value of the callback function as input and returns an item to be emitted by the resulting Observable</li>\n     </ol>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar fs = require(&apos;fs&apos;),\n    Rx = require(&apos;rx&apos;);\n\n// Wrap fs.exists\nvar exists = Rx.Observable.fromCallback(fs.exists);\n\n// Check if file.txt exists\nvar source = exists(&apos;file.txt&apos;);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: true\nCompleted</pre></div>\n     <p>\n      <code>fromCallback</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.async.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.async.compat.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     <p>\n      There is also a <code>fromNodeCallback</code> operator, which is specialized for the types\n      of callback functions found in Node.js.\n     </p><p>\n      This operator takes three additional, optional parameters:\n     </p>\n     <ol start=\"2\">\n      <li>a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> on which you want to run the Node.js callback</li>\n      <li>a parameter to give to the callback function</li>\n      <li>a tranforming function that takes the return value of the callback function as input and returns an item to be emitted by the resulting Observable</li>\n     </ol>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar fs = require(&apos;fs&apos;),\n    Rx = require(&apos;rx&apos;);\n\n// Wrap fs.exists\nvar rename = Rx.Observable.fromNodeCallback(fs.rename);\n\n// Rename file which returns no parameters except an error\nvar source = rename(&apos;file1.txt&apos;, &apos;file2.txt&apos;);\n\nvar subscription = source.subscribe(\n    function () { console.log(&apos;Next: success!&apos;); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: success!\nCompleted</pre></div>\n     <p>\n      <code>fromNodeCallback</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.async.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.async.compat.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/fromEvent.png\" style=\"width:100%;\" alt=\"fromEvent\">\n     <figcaption><p>\n      The <code>fromEvent</code> operator takes an &#x201C;element&#x201D; and an event name as\n      parameters, and it then listens for events of that name taking place on that element. It\n      returns an Observable that emits those events. An &#x201C;element&#x201D; may be a simple\n      <abbr title=\"document-object model\">DOM</abbr> element, or a NodeList, jQuery element,\n      Zepto Element, Angular element, Ember.js element, or EventEmitter.\n     </p><p>\n      This operator also takes an optional third parameter: a function that accepts the arguments\n      from the event handler as parameters and returns an item to be emitted by the resulting\n      Observable in place of the event.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\n// using a jQuery element\nvar input = $(&apos;#input&apos;);\n\nvar source = Rx.Observable.fromEvent(input, &apos;click&apos;);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: Clicked!&apos;); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });\n\ninput.trigger(&apos;click&apos;);</pre></div>\n     <div class=\"output\"><pre>\nNext: Clicked!</pre></div>\n     <div class=\"code javascript\"><pre>\n// using a Node.js EventEmitter and the optional third parameter\nvar EventEmitter = require(&apos;events&apos;).EventEmitter,\n    Rx = require(&apos;rx&apos;);\n\nvar eventEmitter = new EventEmitter();\n\nvar source = Rx.Observable.fromEvent(\n    eventEmitter,\n    &apos;data&apos;,\n    function (first, second) {\n        return { foo: first, bar: second };\n    });\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: foo -&apos; + x.foo + &apos;, bar -&apos; + x.bar);\n    },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });\n\neventEmitter.emit(&apos;data&apos;, &apos;baz&apos;, &apos;quux&apos;);</pre></div>\n     <div class=\"output\"><pre>\nNext: foo - baz, bar - quux</pre></div>\n     <p>\n      <code>fromEvent</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.async.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.async.compat.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     <p>\n      The <code>fromEventPattern</code> operator is similar, except that instead of taking an\n      element and an event name as parameters, it takes two functions as parameters. The first\n      function attaches an event listener to a variety of events on a variety of elements; the\n      second function removes this set of listeners. In this way you can establish a single\n      Observable that emits items representing a variety of events and a variety of target elements.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar input = $(&apos;#input&apos;);\n\nvar source = Rx.Observable.fromEventPattern(\n    function add (h) {\n        input.bind(&apos;click&apos;, h);\n    },\n    function remove (h) {\n        input.unbind(&apos;click&apos;, h);\n    }\n);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: Clicked!&apos;); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });\n\ninput.trigger(&apos;click&apos;);</pre></div>\n     <div class=\"output\"><pre>\nNext: Clicked!</pre></div>\n    </figcaption></figure>\n    <figure class=\"variant\">\n     <img src=\"images/of.png\" style=\"width:100%;\" alt=\"of\">\n     <figcaption><p>\n      The <code>of</code> operator accepts a number of items as parameters, and returns an\n      Observable that emits each of these parameters, in order, as its emitted sequence.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.of(1,2,3);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 3\nCompleted</pre></div>\n     <p>\n      <code>of</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     <p>\n      A variant of this operator, called <code>ofWithScheduler</code> takes a\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> as its first parameter, and operates the resulting Observable\n      on this Scheduler.\n     </p>\n     </figcaption>\n    </figure>\n    <p>\n     There is also a <code>fromPromise</code> operator that converts a Promise into an Observable,\n     converting its <code>resolve</code> calls into <code>onNext</code> notifications, and its\n     <code>reject</code> calls into <code>onError</code> notifications.\n    </p><p>\n     <code>fromPromise</code> is found in the following distributions:\n    </p>\n    <ul>\n     <li><code>rx.async.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n     <li><code>rx.async.compat.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n     <li><code>rx.lite.js</code></li>\n     <li><code>rx.lite.compat.js</code></li>\n    </ul>\n    <h4>Sample Code</h4>\n    <div class=\"code javascript\"><pre>\nvar promise = new RSVP.Promise(function (resolve, reject) {\n   resolve(42);\n});\n\nvar source = Rx.Observable.fromPromise(promise);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (e) { console.log(&apos;Error: &apos; + e); },\n    function ( ) { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 42:\nCompleted</pre></div>\n    <div class=\"code javascript\"><pre>\nvar promise = new RSVP.Promise(function (resolve, reject) {\n   reject(new Error(&apos;reason&apos;));\n});\n\nvar source = Rx.Observable.fromPromise(promise);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (e) { console.log(&apos;Error: &apos; + e); },\n    function ( ) { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nError: Error: reject</pre></div>\n    <p>\n     There is also an <code>ofArrayChanges</code> operator that monitors an Array with the\n     <code>Array.observe</code> method, and returns an Observable that emits any changes that take place in\n     the array. This operator is found only in the <code>rx.all.js</code> distribution.\n    </p>\n    <h4>Sample Code</h4>\n    <div class=\"code javascript\"><pre>\nvar arr = [1,2,3];\nvar source = Rx.Observable.ofArrayChanges(arr);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (e) { console.log(&apos;Error: &apos; + e); },\n    function ( ) { console.log(&apos;Completed&apos;); });\n\narr.push(4)</pre></div>\n     <div class=\"output\"><pre>\nNext: {type: &quot;splice&quot;, object: Array[4], index: 3, removed: Array[0], addedCount: 1}</pre></div>\n    <p>\n     A similar operator is <code>ofObjectChanges</code>. It returns an Observable that emits any changes made\n     to a particular object, as reported by its <code>Object.observe</code> method. It is also found only in\n     the <code>rx.all.js</code> distribution.\n    </p>\n    <h4>Sample Code</h4>\n    <div class=\"code javascript\"><pre>\nvar obj = {x: 1};\nvar source = Rx.Observable.ofObjectChanges(obj);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (e) { console.log(&apos;Error: &apos; + e); },\n    function ( ) { console.log(&apos;Completed&apos;); });\n\nobj.x = 42;</pre></div>\n     <div class=\"output\"><pre>\nNext: {type: &quot;update&quot;, object: Object, name: &quot;x&quot;, oldValue: 1}</pre></div>\n    <p>\n     There is also a <code>pairs</code> operator. This operator accepts an Object, and returns an Observable\n     that emits, as key/value pairs, the attributes of that object.\n    </p>\n    <h4>Sample Code</h4>\n    <div class=\"code javascript\"><pre>\nvar obj = {\n  foo: 42,\n  bar: 56,\n  baz: 78\n};\n\nvar source = Rx.Observable.pairs(obj);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (e) { console.log(&apos;Error: &apos; + e); },\n    function ( ) { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: [&apos;foo&apos;, 42]\nNext: [&apos;bar&apos;, 56]\nNext: [&apos;baz&apos;, 78]\nCompleted</pre></div>\n    <p>\n     <code>pairs</code> is found in the following distributions:\n    </p>\n    <ul>\n     <li><code>rx.js</code></li>\n     <li><code>rx.all.js</code></li>\n     <li><code>rx.all.compat.js</code></li>\n     <li><code>rx.compat.js</code></li>\n     <li><code>rx.lite.js</code></li>\n     <li><code>rx.lite.compat.js</code></li>\n    </ul>\n\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>asObservable from</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>AsObservable FromAsyncPattern FromEvent FromEventPattern ToObservable</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>fromArray fromIterator asObservable</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>fromArray</code>.\n    </p>\n    <p>\n    Converts an array to an observable sequence\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/fromArray/fromArray.php\n\n$source = \\Rx\\Observable::fromArray([1, 2, 3, 4]);\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n//Next value: 1\n//Next value: 2\n//Next value: 3\n//Next value: 4\n//Complete!\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 2\nNext value: 3\nNext value: 4\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>fromIterator</code>.\n    </p>\n    <p>\n    Converts an Iterator into an observable sequence\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/iterator/iterator.php\n\nfunction gen_one_to_three()\n{\n    for ($i = 1; $i <= 3;=\"\" $i++)=\"\" {=\"\" yield=\"\" $i;=\"\" }=\"\" $generator=\"gen_one_to_three();\" $source=\"new\" \\rx\\observable\\iteratorobservable($generator);=\"\" $source-=\"\">subscribe($stdoutObserver);\n\n   </=></pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 2\nNext value: 3\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>asObservable</code>.\n    </p>\n    <p>\n    Hides the identity of an observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/asObservable/asObservable.php\n\n// Create subject\n$subject = new \\Rx\\Subject\\AsyncSubject();\n\n// Send a value\n$subject-&gt;onNext(42);\n$subject-&gt;onCompleted();\n\n// Hide its type\n$source = $subject-&gt;asObservable();\n\n$source-&gt;subscribe($stdoutObserver);\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>from_array from_callback from_future from_iterable from_list from_marbles of</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>of_array of_enumerable of_enumerator</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>from items</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>from toObservable</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"From"},{"path":"/documentation/operators/map.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#transforming\">Transforming</a></li>\n  <li class=\"active\">Map</li>\n</ol>\n\n   <h1>Map</h1>\n   <h3>transform the items emitted by an Observable by applying a function to each item</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"map\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Map</span> operator applies a function of your choosing to each item\n     emitted by the source Observable, and returns an Observable that emits the results of these\n     function applications.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/flatmap.html\"><span class=\"operator\">FlatMap</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/08_Transformation.html#Select\"><cite>Introduction to Rx</cite>: Select</a></li>\n    <li><a href=\"http://rxmarbles.com/#map\">RxMarbles: <code>map</code></a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc22\"><cite>101 Rx Samples</cite>: Select &#x2014; Indexed</a></li>\n    <li><a href=\"https://egghead.io/lessons/javascript-using-the-map-method-with-observable\">Using the map method with Observable</a> by Jafar Husain (JavaScript Video Tutorial)</li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>keep keep-indexed map map-indexed</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>map</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>byLine cast encode map</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/map.png\" style=\"width:100%;\" alt=\"map\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>map</code>. For example, the following code maps a\n       function that squares the incoming value onto the values in <code>numbers</code>:\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nnumbers = Observable.from([1, 2, 3, 4, 5]);\n\nnumbers.map({it * it}).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n1\n4\n9\n16\n25\nSequence complete</pre></div>\n      <p>\n       This operator does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#map(rx.functions.Func1)\"><code>map(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/cast.png\" style=\"width:100%;\" alt=\"cast\">\n      <figcaption><p>\n       The <code>cast</code> operator is a specialized version of <span class=\"operator\">Map</span> that\n       transforms each item from the source Observable by casting it into a particular Class before reemitting\n       it.\n      </p><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#cast(java.lang.Class)\"><code>cast(Class)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/St.encode.png\" style=\"width:100%;\" alt=\"encode\">\n      <figcaption><p>\n       In the <code>StringObservable</code> class that is not part of the RxGroovy core there is also a\n       specialty mapping operator, <code>encode</code>, that transforms an Observable that emits strings into\n       an Observable that emits byte arrays that respect character boundaries of multibyte characters in the\n       original strings.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/St.byLine.png\" style=\"width:100%;\" alt=\"byLine\">\n      <figcaption><p>\n       Also in the <code>StringObservable</code> class that is not part of the RxGroovy core there is a\n       specialty mapping operator called <code>byLine</code>, that transforms an Observable that emits strings\n       into an Observable that emits lines of text, by buffering the strings from the source Observable until a\n       line-feed is found in one of them.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>byLine cast encode map</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/map.png\" style=\"width:100%;\" alt=\"map\">\n      <figcaption><p>\n       RxJava implements this operator as <code>map</code>.\n      </p><p>\n       This operator does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#map(rx.functions.Func1)\"><code>map(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/cast.png\" style=\"width:100%;\" alt=\"cast\">\n      <figcaption><p>\n       The <code>cast</code> operator is a specialized version of <span class=\"operator\">Map</span> that\n       transforms each item from the source Observable by casting it into a particular Class before reemitting\n       it.\n      </p><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#cast(java.lang.Class)\"><code>cast(Class)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/St.encode.png\" style=\"width:100%;\" alt=\"encode\">\n      <figcaption><p>\n       In the <code>StringObservable</code> class that is not part of the RxJava core there is also a specialty\n       mapping operator, <code>encode</code>, that transforms an Observable that emits strings into an\n       Observable that emits byte arrays that respect character boundaries of multibyte characters in the\n       original strings.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/St.byLine.png\" style=\"width:100%;\" alt=\"byLine\">\n      <figcaption><p>\n       Also in the <code>StringObservable</code> class that is not part of the RxJava core there is a\n       specialty mapping operator called <code>byLine</code>, that transforms an Observable that emits strings\n       into an Observable that emits lines of text, by buffering the strings from the source Observable until a\n       line-feed is found in one of them.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>cast map</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>map pluck select</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/map.i.png\" style=\"width:100%;\" alt=\"map\">\n      <figcaption><p>\n       RxJS implements this operator as <code>map</code> or <code>select</code> (the two are\n       synonymous). In addition to the transforming function, you may pass this operator an optional\n       second parameter that will become the &#x201C;<code>this</code>&#x201D; context in which the\n       transforming function will execute.\n      </p><p>\n       The transforming function gets three parameters:\n      </p>\n      <ol>\n       <li>the emitted item</li>\n       <li>the index of that item in the sequence of emitted items</li>\n       <li>the Observable from which that item was emitted</li>\n      </ol>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n// Using a value\nvar md = Rx.Observable.fromEvent(document, &apos;mousedown&apos;).map(true);\nvar mu = Rx.Observable.fromEvent(document, &apos;mouseup&apos;).map(false);\n\n// Using a function\nvar source = Rx.Observable.range(1, 3)\n    .select(function (x, idx, obs) {\n        return x * x;\n    });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 1\nNext: 4\nNext: 9\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/pluck.png\" style=\"width:100%;\" alt=\"pluck\">\n      <figcaption><p>\n       There is also an operator called <code>pluck</code> which is a simpler version of this\n       operator. It transforms the elements emitted by the source Observable by extracting a\n       single named property from those elements and emitting that property in their place.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable\n    .fromArray([\n        { value: 0 },\n        { value: 1 },\n        { value: 2 }\n    ])\n    .pluck(&apos;value&apos;);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nCompleted</pre></div></figcaption>\n     </figure>\n     <p><code>map</code>/<code>select</code> and <code>pluck</code> are found in each of the\n        following distributions:</p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     <h4>See Also</h4>\n     <ul>\n      <li><a href=\"http://xgrommx.github.io/rx-book/content/helpers/pluck.html\"><code>Rx.helpers.pluck(property)</code></a> from Dennis Stoyanov&#x2019;s RxJS book</li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>cast map</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Cast Select</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>map mapWithIndex mapTo select pluck</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>map</code>.\n    </p>\n    <p>\n    Takes a transforming function that operates on each element.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/map/map.php\n\n$observable = \\Rx\\Observable::fromArray([21, 42]);\n$observable\n    -&gt;map(function ($elem) {\n        return $elem * 2;\n    })\n    -&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nNext value: 84\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>mapWithIndex</code>.\n    </p>\n    <p>\n    Maps operator variant that calls the map selector with the index and value\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/map/mapWithIndex.php\n\n$subscriptions = Rx\\Observable::fromArray([21, 42])\n    -&gt;mapWithIndex(function ($index, $elem) {\n        return $index + $elem;\n    })\n    -&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 21\nNext value: 43\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>mapTo</code>.\n    </p>\n    <p>\n    Maps every value to the same value every time\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/map/mapTo.php\n\n$subscription = Rx\\Observable::fromArray([21, 42])\n    -&gt;mapTo(1)\n    -&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 1\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>select</code>.\n    </p>\n    <p>\n    Alias for Map\n    </p>\n\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>pluck</code>.\n    </p>\n    <p>\n    Returns an Observable containing the value of a specified array index (if array) or property (if object) from all elements in the Observable sequence. If a property can&apos;t be resolved the observable will error.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/pluck/pluck.php\n\n$source = Rx\\Observable::fromArray([\n    (object)[&apos;value&apos; =&gt; 0],\n    (object)[&apos;value&apos; =&gt; 1],\n    (object)[&apos;value&apos; =&gt; 2]\n])\n    -&gt;pluck(&apos;value&apos;);\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0\nNext value: 1\nNext value: 2\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>map pluck select</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>map map_with_index</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>map</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>map mapWithIndex</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Map"},{"path":"/documentation/operators/range.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#creating\">Creating</a></li>\n  <li class=\"active\">Range</li>\n</ol>\n\n<h1>Range</h1>\n<h3>create an Observable that emits a particular range of sequential integers</h3>\n\n<figure>\n <img src=\"images/range.c.png\" style=\"width:100%;\" alt=\"Range\">\n <figcaption><p>\n  The <span class=\"operator\">Range</span> operator emits a range of sequential integers, in order,\n  where you select the start of the range and its length.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/interval.html\"><span class=\"operator\">Interval</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/04_CreatingObservableSequences.html#ObservableRange\"><cite>Introduction to Rx</cite>: Range</a></li>\n <li><a href=\"http://rxwiki.wikidot.com/101samples#toc40\"><cite>101 Rx Samples</cite>: Range</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/range.png\" style=\"width:100%;\" alt=\"range\">\n     <figcaption><p>\n      RxGroovy implements this operator as <code>range</code>. It accepts as its parameters the\n      start value of the range and the number of items in the range. If you set that number of\n      items to zero, the resulting Observable will emit no values (if you set it to a negative\n      number, <code>range</code> will cause an exception).\n     </p><p>\n      <code>range</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but there is a variant that allows you to set the Scheduler by\n      passing one in as a parameter.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\n// myObservable emits the integers 5, 6, and 7 before completing:\ndef myObservable = Observable.range(5, 3);</pre></div>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int)\"><code>range(int,int)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int%20rx.Scheduler)\"><code>range(int,int,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/range.png\" style=\"width:100%;\" alt=\"range\">\n     <figcaption><p>\n      RxJava implements this operator as <code>range</code>. It accepts as its parameters the\n      start value of the range and the number of items in the range. If you set that number of\n      items to zero, the resulting Observable will emit no values (if you set it to a negative\n      number, <code>range</code> will cause an exception).\n     </p><p>\n      <code>range</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but there is a variant that allows you to set the Scheduler by\n      passing one in as a parameter.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int)\"><code>range(int,int)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#range(int,%20int%20rx.Scheduler)\"><code>range(int,int,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>intervalRange range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/range.png\" style=\"width:100%;\" alt=\"range\">\n     <figcaption><p>\n      RxJS implements this operator as <code>range</code>. It accepts as its parameters the\n      start value of the range and the number of items in the range.\n     </p><p>\n      <code>range</code> operates by default on the <code>currentThread</code>\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but there is a variant that allows you to set the Scheduler by\n      passing one in as the optional third parameter.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 3);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div><div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nCompleted</pre></div>\n     <p>\n      <code>range</code> is found in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>range</code>.\n    </p>\n    <p>\n    Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/range/range.php\n\n$observable = \\Rx\\Observable::range(0, 3);\n\n$observable-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0\nNext value: 1\nNext value: 2\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>range</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Range"},{"path":"/documentation/operators/groupby.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#transforming\">Transforming</a></li>\n  <li class=\"active\">GroupBy</li>\n</ol>\n\n<h1>GroupBy</h1>\n<h3>divide an Observable into a set of Observables that each emit a different subset of items from the original Observable</h3>\n\n<figure>\n <img src=\"images/groupBy.c.png\" style=\"width:100%;\" alt=\"GroupBy\">\n <figcaption><p>\n  The <span class=\"operator\">GroupBy</span> operator divides an Observable that emits items into\n  an Observable that emits Observables, each one of which emits some subset of the items from the\n  original source Observable. Which items end up on which Observable is typically decided by a\n  discriminating function that evaluates each item and assigns it a key. All items with the same key\n  are emitted by the same Observable.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/window.html\"><span class=\"operator\">Window</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/07_Aggregation.html#GroupBy\"><cite>Introduction to Rx</cite>: GroupBy</a></li>\n <li><a href=\"http://blogs.microsoft.co.il/iblogger/2015/08/11/animations-of-rx-operators-groupby/\">Animations of Rx operators: GroupBy</a> by Tamir Dresher</li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>group-by split-with</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>group_by</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>groupBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/groupBy.png\" style=\"width:100%;\" alt=\"groupBy\">\n     <figcaption><p>\n      RxGroovy implements the <code>groupBy</code> operator. The Observable it returns emits items\n      of a particular subclass of Observable &#x2014; the <code>GroupedObservable</code>. Objects that\n      implement the <code>GroupedObservable</code> interface have an additional method &#x2014;\n      <code>getkey</code> &#x2014; by which you can retrieve the key by which items were designated\n      for this particular <code>GroupedObservable</code>.\n     </p><p>\n      The following sample code uses <code>groupBy</code> to transform a list of numbers into two\n      lists, grouped by whether or not the numbers are even:\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\ndef numbers = Observable.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\ndef groupFunc = { return(0 == (it % 2)); };\n\nnumbers.groupBy(groupFunc).flatMap({ it.reduce([it.getKey()], {a, b -&gt; a &lt;&lt; b}) }).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n[false, 1, 3, 5, 7, 9]\n[true, 2, 4, 6, 8]\nSequence complete</pre></div>\n     <p>\n      Another version of <code>groupBy</code> allows you to pass in a transformative function\n      that changes the elements before they are emitted by the resulting\n      <code>GroupedObservable</code>s.\n     </p><p>\n      Note that when <code>groupBy</code> splits up the source Observable into an Observable that\n      emits <code>GroupedObservable</code>s, each of these <code>GroupedObservable</code>s begins to\n      buffer the items that it will emit upon subscription. For this reason, if you ignore any of\n      these <code>GroupedObservable</code>s (you neither subscribe to it or apply an operator to\n      it that subscribes to it), this buffer will present a potential memory leak. For this reason,\n      rather than ignoring a <code>GroupedObservable</code> that you have no interest in observing,\n      you should instead apply an operator like <a href=\"http://reactivex.io/documentation/operators/take.html\"><code>take(0)</code></a> to it\n      as a way of signalling to it that it may discard its buffer.\n     </p><p>\n      If you unsubscribe from one of the <code>GroupedObservable</code>s, or if an operator like\n      <code>take</code> that you apply to the <code>GroupedObservable</code> unsubscribes from it,\n      that <code>GroupedObservable</code> will be terminated. If the source Observable later emits an\n      item whose key matches the <code>GroupedObservable</code> that was terminated in this way,\n      <code>groupBy</code> will create and emit a <em>new</em> <code>GroupedObservable</code> to match\n      the key. In other words, unsubscribing from a <code>GroupedObservable</code> will <em>not</em>\n      cause <code>groupBy</code> to swallow items from its group.  For example, see the following code:\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\nObservable.range(1,5)\n          .groupBy({ 0 })\n          .flatMap({ this.take(1) })\n          .subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n1\n2\n3\n4\n5\n</pre></div>\n     <p>\n      In the above code, the source Observable emits the sequence <code>{ 1 2 3 4 5 }</code>. When it emits\n      the first item in this sequence, the <code>groupBy</code> operator creates and emits a\n      <code>GroupedObservable</code> with the key of <code>0</code>. The <code>flatMap</code> operator\n      applies the <code>take(1)</code> operator to that <code>GroupedObservable</code>, which gives it the\n      item (<code>1</code>) that it emits and that also unsubscribes from the <code>GroupedObservable</code>,\n      which is terminated. When the source Observable emits the second item in its sequence, the\n      <code>groupBy</code> operator creates and emits a <em>second</em> <code>GroupedObservable</code> with\n      the same key (<code>0</code>) to replace the one that was terminated. <code>flatMap</code> again applies\n      <code>take(1)</code> to this new <code>GroupedObservable</code> to retrieve the new item to emit\n      (<code>2</code>) and to unsubscribe from and terminate the <code>GroupedObservable</code>, and this\n      process repeats for the remaining items in the source sequence.\n     </p><p>\n      <code>groupBy</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupBy(rx.functions.Func1)\"><code>groupBy(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupBy(rx.functions.Func1,%20rx.functions.Func1)\"><code>groupBy(Func1,Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>groupBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/groupBy.png\" style=\"width:100%;\" alt=\"groupBy\">\n     <figcaption><p>\n      RxJava implements the <code>groupBy</code> operator. The Observable it returns emits items\n      of a particular subclass of Observable &#x2014; the <code>GroupedObservable</code>. Objects\n      that implement the <code>GroupedObservable</code> interface have an additional method &#x2014;\n      <code>getkey</code> &#x2014; by which you can retrieve the key by which items were designated\n      for this particular <code>GroupedObservable</code>.\n     </p><p>\n      Another version of <code>groupBy</code> allows you to pass in a transformative function\n      that changes the elements before they are emitted by the resulting\n      <code>GroupedObservable</code>s.\n     </p><p>\n      Note that when <code>groupBy</code> splits up the source Observable into an Observable that\n      emits <code>GroupedObservable</code>s, each of these <code>GroupedObservable</code>s begins to\n      buffer the items that it will emit upon subscription. For this reason, if you ignore any of\n      these <code>GroupedObservable</code>s (you neither subscribe to it or apply an operator to\n      it that subscribes to it), this buffer will present a potential memory leak. For this reason,\n      rather than ignoring a <code>GroupedObservable</code> that you have no interest in observing,\n      you should instead apply an operator like <a href=\"http://reactivex.io/documentation/operators/take.html\"><code>take(0)</code></a> to it\n      as a way of signalling to it that it may discard its buffer.\n     </p><p>\n      If you unsubscribe from one of the <code>GroupedObservable</code>s, that\n      <code>GroupedObservable</code> will be terminated. If the source Observable later emits an\n      item whose key matches the <code>GroupedObservable</code> that was terminated in this way,\n      <code>groupBy</code> will create and emit a new <code>GroupedObservable</code> to match the\n      key.\n     </p><p>\n      <code>groupBy</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupBy(rx.functions.Func1)\"><code>groupBy(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupBy(rx.functions.Func1,%20rx.functions.Func1)\"><code>groupBy(Func1,Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>groupBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>groupBy groupByUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/groupBy.png\" style=\"width:100%;\" alt=\"groupBy\">\n     <figcaption><p>\n      RxJS implements <code>groupBy</code>. It takes one to three parameters:\n     </p>\n     <ol>\n      <li>(required) a function that accepts an item from the source Observable and returns its key</li>\n      <li>a function that accepts an item from the source Observable and returns an item to be emitted in its place by one of the resulting Observables</li>\n      <li>a function used to compare two keys for identity (that is, whether items with two keys should be emitted on the same Observable)</li>\n     </ol>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar codes = [\n    { keyCode: 38}, // up\n    { keyCode: 38}, // up\n    { keyCode: 40}, // down\n    { keyCode: 40}, // down\n    { keyCode: 37}, // left\n    { keyCode: 39}, // right\n    { keyCode: 37}, // left\n    { keyCode: 39}, // right\n    { keyCode: 66}, // b\n    { keyCode: 65}  // a\n];\n\nvar source = Rx.Observable.fromArray(codes)\n    .groupBy(\n        function (x) { return x.keyCode; },\n        function (x) { return x.keyCode; });\n\nvar subscription = source.subscribe(\n    function (obs) {\n        // Print the count\n        obs.count().subscribe(function (x) {\n            console.log(&apos;Count: &apos; + x);\n        });\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div><div class=\"output\"><pre>\nCount: 2\nCount: 2\nCount: 2\nCount: 2\nCount: 1\nCount: 1\nCompleted</pre></div>\n     <p><code>groupBy</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.coincidence.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/groupByUntil.png\" style=\"width:100%;\" alt=\"groupByUntil\">\n     <figcaption><p>\n      RxJS also implements <code>groupByUntil</code>. It monitors an additional Observable, and\n      whenever that Observable emits an item, it closes any of the keyed Observables it has opened\n      (it will open new ones if additional items are emitted by the source Observable that match\n      the key). <code>groupByUntil</code> takes from two to four parameters:\n     </p>\n     <ol>\n      <li>(required) a function that accepts an item from the source Observable and returns its key</li>\n      <li>a function that accepts an item from the source Observable and returns an item to be emitted in its place by one of the resulting Observables</li>\n      <li>(required) a function that returns an Observable, the emissions from which trigger the termination of any open Observables</li>\n      <li>a function used to compare two keys for identity (that is, whether items with two keys should be emitted on the same Observable)</li>\n     </ol>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar codes = [\n    { keyCode: 38}, // up\n    { keyCode: 38}, // up\n    { keyCode: 40}, // down\n    { keyCode: 40}, // down\n    { keyCode: 37}, // left\n    { keyCode: 39}, // right\n    { keyCode: 37}, // left\n    { keyCode: 39}, // right\n    { keyCode: 66}, // b\n    { keyCode: 65}  // a\n];\n\nvar source = Rx.Observable\n    .for(codes, function (x) { return Rx.Observable.return(x).delay(1000); })\n    .groupByUntil(\n        function (x) { return x.keyCode; },\n        function (x) { return x.keyCode; },\n        function (x) { return Rx.Observable.timer(2000); });\n\nvar subscription = source.subscribe(\n    function (obs) {\n        // Print the count\n        obs.count().subscribe(function (x) { console.log(&apos;Count: &apos; + x); });\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div><div class=\"output\"><pre>\nCount: 2\nCount: 2\nCount: 1\nCount: 1\nCount: 1\nCount: 1\nCount: 1\nCount: 1\nCompleted</pre></div>\n     <p><code>groupByUntil</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.coincidence.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>groupBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>GroupBy GroupByUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>groupBy groupByUntil partition</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>groupBy</code>.\n    </p>\n    <p>\n    Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/groupBy/groupBy.php\n\n$observable = \\Rx\\Observable::fromArray([21, 42, 21, 42, 21, 42]);\n$observable\n    -&gt;groupBy(\n        function ($elem) {\n            if ($elem === 42) {\n                return 0;\n            }\n\n            return 1;\n        },\n        null,\n        function ($key) {\n            return $key;\n        }\n    )\n    -&gt;subscribeCallback(function ($groupedObserver) use ($createStdoutObserver) {\n        $groupedObserver-&gt;subscribe($createStdoutObserver($groupedObserver-&gt;getKey() . &quot;: &quot;));\n    });\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\n1: Next value: 21\n0: Next value: 42\n1: Next value: 21\n0: Next value: 42\n1: Next value: 21\n0: Next value: 42\n1: Complete!\n0: Complete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>groupByUntil</code>.\n    </p>\n    <p>\n    Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/groupBy/groupByUntil.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$codes = [\n    [&apos;id&apos; =&gt; 38],\n    [&apos;id&apos; =&gt; 38],\n    [&apos;id&apos; =&gt; 40],\n    [&apos;id&apos; =&gt; 40],\n    [&apos;id&apos; =&gt; 37],\n    [&apos;id&apos; =&gt; 39],\n    [&apos;id&apos; =&gt; 37],\n    [&apos;id&apos; =&gt; 39],\n    [&apos;id&apos; =&gt; 66],\n    [&apos;id&apos; =&gt; 65]\n];\n\n$source = Rx\\Observable\n    ::fromArray($codes)\n    -&gt;concatMap(function ($x) {\n        return \\Rx\\Observable::timer(100)-&gt;mapTo($x);\n    })\n    -&gt;groupByUntil(\n        function ($x) {\n            return $x[&apos;id&apos;];\n        },\n        function ($x) {\n            return $x[&apos;id&apos;];\n        },\n        function ($x) {\n            return Rx\\Observable::timer(200);\n        });\n\n$subscription = $source-&gt;subscribe(new CallbackObserver(\n    function (\\Rx\\Observable $obs) {\n        // Print the count\n        $obs-&gt;count()-&gt;subscribe(new CallbackObserver(\n            function ($x) {\n                echo &apos;Count: &apos;, $x, PHP_EOL;\n            }));\n    },\n    function (Exception $err) {\n        echo &apos;Error&apos;, $err-&gt;getMessage(), PHP_EOL;\n    },\n    function () {\n        echo &apos;Completed&apos;, PHP_EOL;\n    }), $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nCount: 2\nCount: 2\nCount: 1\nCount: 1\nCount: 1\nCount: 1\nCount: 1\nCount: 1\nCompleted\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>partition</code>.\n    </p>\n    <p>\n    Returns two observables which partition the observations of the source by the given function. The first will trigger observations for those values for which the predicate returns true. The second will trigger observations for those values where the predicate returns false. The predicate is executed once for each subscribed observer. Both also propagate all error observations arising from the source and each completes when the source completes.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/partition/partition.php\n\nlist($evens, $odds) = \\Rx\\Observable::range(0, 10)\n    -&gt;partition(function ($x) {\n        return $x % 2 === 0;\n    });\n\n$evens-&gt;subscribe($createStdoutObserver(&apos;Evens &apos;));\n$odds-&gt;subscribe($createStdoutObserver(&apos;Odds &apos;));\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nEvens Next value: 0\nEvens Next value: 2\nEvens Next value: 4\nEvens Next value: 6\nEvens Next value: 8\nEvens Complete!\nOdds Next value: 1\nOdds Next value: 3\nOdds Next value: 5\nOdds Next value: 7\nOdds Next value: 9\nOdds Complete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>group_by group_by_until partition</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>groupBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"GroupBy"},{"path":"/documentation/operators/empty-never-throw.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#creating\">Creating</a></li>\n  <li class=\"active\">Empty/Never/Throw</li>\n</ol>\n\n<h1>Empty</h1>\n<h3>create an Observable that emits no items but terminates normally</h3>\n<figure>\n  <img src=\"images/empty.c.png\" style=\"width:100%;\" alt=\"Empty\">\n</figure>\n<h1>Never</h1>\n<h3>create an Observable that emits no items and does not terminate</h3>\n<figure>\n  <img src=\"images/never.c.png\" style=\"width:100%;\" alt=\"Never\">\n</figure>\n<h1>Throw</h1>\n<h3>create an Observable that emits no items and terminates with an error</h3>\n<figure>\n  <img src=\"images/throw.c.png\" style=\"width:100%;\" alt=\"Throw\">\n</figure>\n\n<p>\n The <span class=\"operator\">Empty</span>, <span class=\"operator\">Never</span>, and\n <span class=\"operator\">Throw</span> operators generate Observables with very specific and limited\n behavior. These are useful for testing purposes, and sometimes also for combining with other\n Observables or as parameters to operators that expect other Observables as parameters.\n</p>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/04_CreatingObservableSequences.html#SimpleFactoryMethods\"><cite>Introduction to Rx</cite>: Simple Factory Methods</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>empty never throw</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>empty never throw</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>empty never error</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxGroovy implements these operators as <code>empty</code>, <code>never</code>, and\n      <code>error</code>. The <code>error</code> operator takes as a parameter the\n      <code>Throwable</code> with which you want the Observable to terminate.\n     </p><p>\n      These operators do not operate by default on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but\n      <code>empty</code> and <code>error</code> optionally take a Scheduler as a parameter, and if\n      you pass them a Scheduler they will issue their termination notifications on that Scheduler.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\nprintln(&quot;*** empty() ***&quot;);\nObservable.empty().subscribe(\n  { println(&quot;empty: &quot; + it); },                      // onNext\n  { println(&quot;empty: error - &quot; + it.getMessage()); }, // onError\n  { println(&quot;empty: Sequence complete&quot;); }           // onCompleted\n);\n\nprintln(&quot;*** error() ***&quot;);\nObservable.error(new Throwable(&quot;badness&quot;)).subscribe(\n  { println(&quot;error: &quot; + it); },                      // onNext\n  { println(&quot;error: error - &quot; + it.getMessage()); }, // onError\n  { println(&quot;error: Sequence complete&quot;); }           // onCompleted\n);\n\nprintln(&quot;*** never() ***&quot;);\nObservable.never().subscribe(\n  { println(&quot;never: &quot; + it); },                      // onNext\n  { println(&quot;never: error - &quot; + it.getMessage()); }, // onError\n  { println(&quot;never: Sequence complete&quot;); }           // onCompleted\n);\nprintln(&quot;*** END ***&quot;);</pre></div>\n     <div class=\"output\"><pre>\n*** empty() ***\nempty: Sequence complete\n*** error() ***\nerror: error - badness\n*** never() ***\n*** END ***</pre></div>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#empty()\"><code>empty()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#never()\"><code>never()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#error(java.lang.Throwable)\"><code>error(throwable)</code></a></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>empty never error</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJava 1.x implements these operators as <code>empty</code>, <code>never</code>, and\n      <code>error</code>. The <code>error</code> operator takes as a parameter the\n      <code>Throwable</code> with which you want the Observable to terminate.\n     </p><p>\n      These operators do not operate by default on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but\n      <code>empty</code> and <code>error</code> optionally take a Scheduler as a parameter, and if\n      you pass them a Scheduler they will issue their termination notifications on that Scheduler.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#empty()\"><code>empty()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#never()\"><code>never()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#error(java.lang.Throwable)\"><code>error(throwable)</code></a></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>empty never error</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJava 2.x implements these operators as <code>empty</code>, <code>never</code>, and\n      <code>error</code>. The <code>error</code> operator takes as a parameter the\n      <code>Throwable</code> with which you want the Observable to terminate, or a\n      <code>Callable</code> that returns such a <code>Throwable</code>.\n     </p><p>\n      These operators do not operate by default on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html#empty()\"><code>empty()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html#never()\"><code>never()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html#error(java.util.concurrent.Callable)\"><code>error(Callable)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html#error(java.lang.Throwable)\"><code>error(Throwable)</code></a></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>empty never throw</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJS implements these operators as <code>empty</code>, <code>never</code>, and\n      <code>throw</code>.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.empty();\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\n// This will never produce a value, hence never calling any of the callbacks\nvar source = Rx.Observable.never();\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\n</pre></div>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.return(42)\n    .selectMany(Rx.Observable.throw(new Error(&apos;error!&apos;)));\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nError: Error: error!</pre></div>\n     <p>\n      <code>empty</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     <p>\n      <code>never</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     <p>\n      <code>throw</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>empty never error asObservable</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Empty Never Throw</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>emptyObservable never error</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>emptyObservable</code>.\n    </p>\n    <p>\n    Returns an empty observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/empty-observable/empty-observable.php\n\n$observable = \\Rx\\Observable::emptyObservable();\n$observable-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>never</code>.\n    </p>\n    <p>\n    Returns a non-terminating observable sequence, which can be used to denote an infinite duration.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/never/never.php\n\n$observable = \\Rx\\Observable::never();\n$observable-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\n\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>error</code>.\n    </p>\n    <p>\n    Returns an observable sequence that terminates with an exception.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/error-observable/error-observable.php\n\n$observable = Rx\\Observable::error(new Exception(&apos;Oops!&apos;));\n$observable-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nException: Oops!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>empty never throw throw_exception</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>empty never raise_error</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>empty never error</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>empty never failWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Empty"},{"path":"/documentation/operators/max.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#mathematical\">Mathematical and Aggregate</a></li>\n  <li class=\"active\">Max</li>\n</ol>\n\n   <h1>Max</h1>\n   <h3>emits the item from the source Observable that had the maximum value</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"max\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Max</span> operator operates on an Observable that emits numbers\n     (or items that can be evaluated as numbers), and emits a single item: the item with the largest\n     number.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/min.html\"><span class=\"operator\">Min</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/07_Aggregation.html#MaxAndMin\"><cite>Introduction to Rx</cite>: Min, Max, Sum, and Average</a></li>\n    <li><a href=\"http://rxmarbles.com/#max\">RxMarbles: <code>max</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>max maxBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxGroovy, this operator is not in the ReactiveX core, but is part of the distinct\n      <code>rxjava-math</code> module.\n     </p>\n     <figure>\n      <img src=\"images/max.png\" style=\"width:100%;\" alt=\"max\">\n      <figcaption><p>\n       RxGroovy implements a <code>max</code> operator. It takes an optional comparator that it\n       will use instead of its default to compare the value of two items. If more than one item\n       has the identical maximum value, <code>max</code> will emit the <em>last</em> such item\n       emitted by the source Observable.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/maxBy.png\" style=\"width:100%;\" alt=\"maxBy\">\n      <figcaption><p>\n       The <code>maxBy</code> operator is similar to <code>max</code>, but instead of emitting the\n       item with the maximum value, it emits the item with the maximum <em>key</em>, where that\n       key is generated based on a function you provide to <code>maxBy</code>\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>max maxBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxJava, this operator is not in the ReactiveX core, but is part of the distinct\n      <code>rxjava-math</code> module.\n     </p>\n     <figure>\n      <img src=\"images/max.png\" style=\"width:100%;\" alt=\"max\">\n      <figcaption><p>\n       RxJava implements a <code>max</code> operator. It takes an optional comparator that it\n       will use instead of its default to compare the value of two items. If more than one item\n       has the identical maximum value, <code>max</code> will emit the <em>last</em> such item\n       emitted by the source Observable.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/maxBy.png\" style=\"width:100%;\" alt=\"maxBy\">\n      <figcaption><p>\n       The <code>maxBy</code> operator is similar to <code>max</code>, but instead of emitting the\n       item with the maximum value, it emits the item with the maximum <em>key</em>, where that\n       key is generated based on a function you provide to <code>maxBy</code>\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>max maxBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/max.png\" style=\"width:100%;\" alt=\"max\">\n      <figcaption><p>\n       RxJS implements the <code>max</code> operator. It takes an optional comparer function that it\n       will use instead of its default to compare the value of two items.</p>\n       <h4>Sample Code</h4>\n       <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.fromArray([1,3,5,7,9,2,4,6,8]).max();\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: &apos; + x); },\n  function (err) { console.log(&apos;Error: &apos; + err); },\n  function () { console.log(&apos;Completed&apos;); } );</pre></div>\n       <div class=\"output\"><pre>\nNext: 9\nCompleted</pre></div></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/maxBy.png\" style=\"width:100%;\" alt=\"maxBy\">\n      <figcaption><p>\n       The <code>maxBy</code> operator is similar to <code>max</code>, but instead of emitting the\n       item with the maximum value, it emits the item with the maximum <em>key</em>, where that\n       key is generated based on a function you provide to <code>maxBy</code>. <code>maxBy</code>\n       also takes an optional second parameter: a comparer function that it will use instead of its\n       default to compare the keys of the two items.\n       </p><p>\n       <code>maxBy</code> emits a list. If more than one item has the maximum key value, each such\n       item will be represented in the list.\n       </p>\n       <h4>Sample Code</h4>\n       <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.fromArray([1,3,5,7,9,2,4,6,8,9])\n               .maxBy( function (x) { return x; } );\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: &apos; + x); },\n  function (err) { console.log(&apos;Error: &apos; + err); },\n  function () { console.log(&apos;Completed&apos;); } );</pre></div>\n       <div class=\"output\"><pre>\nNext: 9,9\nCompleted</pre></div></figcaption>\n     </figure>\n     <p>\n      <code>max</code> and <code>maxBy</code> are found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.aggregates.js</code></li>\n     </ul>\n     <p>\n      They requires one of the following:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>max maxBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Max MaxBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>max</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>max</code>.\n    </p>\n    <p>\n    Returns the maximum value in an observable sequence according to the specified comparer.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/max/max.php\n\n/* Without comparer */\n$source = \\Rx\\Observable::fromArray([1, 3, 5, 7, 9, 2, 4, 6, 8])\n    -&gt;max();\n\n$subscription = $source-&gt;subscribe($createStdoutObserver());\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 9\nComplete!\n    </pre>\n</div>\n\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/max/max-with-comparer.php\n\n/* With a comparer */\n$comparer = function ($x, $y) {\n    if ($x &gt; $y) {\n        return 1;\n    } elseif ($x &lt; $y) {\n        return -1;\n    }\n    return 0;\n};\n\n$source = \\Rx\\Observable::fromArray([1, 3, 5, 7, 9, 2, 4, 6, 8])\n    -&gt;max($comparer);\n\n$subscription = $source-&gt;subscribe($createStdoutObserver());\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 9\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>max max_by</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>max max_by</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Max"},{"path":"/documentation/operators/min.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#mathematical\">Mathematical and Aggregate</a></li>\n  <li class=\"active\">Min</li>\n</ol>\n\n   <h1>Min</h1>\n   <h3>emits the item from the source Observable that had the minimum value</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"min\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Min</span> operator operates on an Observable that emits numbers\n     (or items that can be evaluated as numbers), and emits a single item: the item with the smallest\n     number.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/min.html\"><span class=\"operator\">Min</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/07_Aggregation.html#MaxAndMin\"><cite>Introduction to Rx</cite>: Min, Max, Sum, and Average</a></li>\n    <li><a href=\"http://rxmarbles.com/#min\">RxMarbles: <code>min</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>min minBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxGroovy, this operator is not in the ReactiveX core, but is part of the distinct\n      <code>rxjava-math</code> module.\n     </p>\n     <figure>\n      <img src=\"images/min.png\" style=\"width:100%;\" alt=\"min\">\n      <figcaption><p>\n       RxGroovy implements a <code>min</code> operator. It takes an optional comparator that it\n       will use instead of its default to compare the value of two items. If more than one item\n       has the identical minimum value, <code>min</code> will emit the <em>last</em> such item\n       emitted by the source Observable.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/minBy.png\" style=\"width:100%;\" alt=\"minBy\">\n      <figcaption><p>\n       The <code>minBy</code> operator is similar to <code>min</code>, but instead of emitting the\n       item with the minimum value, it emits the item with the minimum <em>key</em>, where that\n       key is generated based on a function you provide to <code>minBy</code>\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>min minBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxJava, this operator is not in the ReactiveX core, but is part of the distinct\n      <code>rxjava-math</code> module.\n     </p>\n     <figure>\n      <img src=\"images/min.png\" style=\"width:100%;\" alt=\"min\">\n      <figcaption><p>\n       RxJava implements a <code>min</code> operator. It takes an optional comparator that it\n       will use instead of its default to compare the value of two items. If more than one item\n       has the identical minimum value, <code>min</code> will emit the <em>last</em> such item\n       emitted by the source Observable.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/minBy.png\" style=\"width:100%;\" alt=\"minBy\">\n      <figcaption><p>\n       The <code>minBy</code> operator is similar to <code>min</code>, but instead of emitting the\n       item with the minimum value, it emits the item with the minimum <em>key</em>, where that\n       key is generated based on a function you provide to <code>minBy</code>\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>min minBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/min.png\" style=\"width:100%;\" alt=\"min\">\n      <figcaption><p>\n       RxJS implements the <code>min</code> operator. It takes an optional comparer function that it\n       will use instead of its default to compare the value of two items.</p>\n       <h4>Sample Code</h4>\n       <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.fromArray([1,3,5,7,9,2,4,6,8]).min();\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: &apos; + x); },\n  function (err) { console.log(&apos;Error: &apos; + err); },\n  function () { console.log(&apos;Completed&apos;); } );</pre></div>\n       <div class=\"output\"><pre>\nNext: 1\nCompleted</pre></div></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/minBy.png\" style=\"width:100%;\" alt=\"minBy\">\n      <figcaption><p>\n       The <code>minBy</code> operator is similar to <code>min</code>, but instead of emitting the\n       item with the minimum value, it emits the item with the minimum <em>key</em>, where that\n       key is generated based on a function you provide to <code>minBy</code>. <code>minBy</code>\n       also takes an optional second parameter: a comparer function that it will use instead of its\n       default to compare the keys of the two items.\n       </p><p>\n       <code>minBy</code> emits a list. If more than one item has the minimum key value, each such\n       item will be represented in the list.\n       </p>\n       <h4>Sample Code</h4>\n       <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.fromArray([1,3,5,7,9,2,4,6,8,1])\n               .minBy( function (x) { return x; } );\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: &apos; + x); },\n  function (err) { console.log(&apos;Error: &apos; + err); },\n  function () { console.log(&apos;Completed&apos;); } );</pre></div>\n       <div class=\"output\"><pre>\nNext: 1,1\nCompleted</pre></div></figcaption>\n     </figure>\n     <p>\n      <code>min</code> and <code>minBy</code> are found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.aggregates.js</code></li>\n     </ul>\n     <p>\n      They requires one of the following:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>min minBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Min MinBy</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>min</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>min</code>.\n    </p>\n    <p>\n    Returns the minimum value in an observable sequence according to the specified comparer.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/min/min.php\n\n/* Without comparer */\n$source = \\Rx\\Observable::fromArray([1, 3, 5, 7, 9, 2, 4, 6, 8])\n    -&gt;min();\n\n$subscription = $source-&gt;subscribe($createStdoutObserver());\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nComplete!\n    </pre>\n</div>\n\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/min/min-with-comparer.php\n\n/* With a comparer */\n$comparer = function ($x, $y) {\n    if ($x &gt; $y) {\n        return 1;\n    } elseif ($x &lt; $y) {\n        return -1;\n    }\n    return 0;\n};\n\n$source = \\Rx\\Observable::fromArray([1, 3, 5, 7, 9, 2, 4, 6, 8])\n    -&gt;min($comparer);\n\n$subscription = $source-&gt;subscribe($createStdoutObserver());\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>min min_by</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>min min_by</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Min"},{"path":"/documentation/operators/just.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#creating\">Creating</a></li>\n  <li class=\"active\">Just</li>\n</ol>\n\n<h1>Just</h1>\n<h3>create an Observable that emits a particular item</h3>\n\n<figure>\n <img src=\"images/just.c.png\" style=\"width:100%;\" alt=\"Just\">\n <figcaption><p>\n  The <span class=\"operator\">Just</span> operator converts an item into an Observable that emits\n  that item.\n </p><p>\n  <span class=\"operator\">Just</span> is similar to <span class=\"operator\">From</span>, but note\n  that <span class=\"operator\">From</span> will dive into an array or an iterable or something of\n  that sort to pull out items to emit, while <span class=\"operator\">Just</span> will simply emit\n  the array or iterable or what-have-you as it is, unchanged, as a single item.\n </p><p>\n  Note that if you pass <code>null</code> to <span class=\"operator\">Just</span>, it will return\n  an Observable that <em>emits</em> <code>null</code> as an item. Do not make the mistake of\n  assuming that this will return an empty Observable (one that emits no items at all). For that,\n  you will need the <a href=\"http://reactivex.io/documentation/operators/empty-never-throw.html\"><span class=\"operator\">Empty</span></a>\n  operator.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/from.html\"><span class=\"operator\">From</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/repeat.html\"><span class=\"operator\">Repeat</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/start.html\"><span class=\"operator\">Start</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/timer.html\"><span class=\"operator\">Timer</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/04_CreatingObservableSequences.html#ObservableReturn\"><cite>Introduction to Rx</cite>: Return</a></li>\n <li><a href=\"https://www.youtube.com/watch?v=sDqrlNprY24\">RxJava Tutorial 03: Observable from, just, &amp; create methods</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>return</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>just</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>just</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/just.png\" style=\"width:100%;\" alt=\"just\">\n     <figcaption><p>\n      RxGroovy implements this operator as <code>just</code>. It accepts between one and nine\n      items as parameters, and returns an Observable that emits these items in the same order as\n      they are given in the parameter list.\n     </p><p>\n      <code>just</code> does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\n// Observable emits &quot;some string&quot; as a single item\ndef observableThatEmitsAString = Observable.just(&quot;some string&quot;); \n// Observable emits the list [1, 2, 3, 4, 5] as a single item\ndef observableThatEmitsAList = Observable.just([1, 2, 3, 4, 5]); \n// Observable emits 1, 2, 3, 4, and 5 as distinct items\ndef observableThatEmitsSeveralNumbers = Observable.just( 1, 2, 3, 4, 5 );</pre></div>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T)\"><code>just(item)</code></a> (there are also versions that accept between two and nine items as parameters)</li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>just</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/just.png\" style=\"width:100%;\" alt=\"just\">\n     <figcaption><p>\n      RxJava implements this operator as <code>just</code>. It accepts between one and nine items as\n      parameters, and returns an Observable that emits these items in the same order as they are\n      given in the parameter list.\n     </p><p>\n      <code>just</code> does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable.just(1, 2, 3)\n          .subscribe(new Subscriber&lt;Integer&gt;() {\n        @Override\n        public void onNext(Integer item) {\n            System.out.println(&quot;Next: &quot; + item);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            System.err.println(&quot;Error: &quot; + error.getMessage());\n        }\n\n        @Override\n        public void onCompleted() {\n            System.out.println(&quot;Sequence complete.&quot;);\n        }\n    });</pre></div>\n     <div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 3\nSequence complete.</pre></div>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#just(T)\"><code>just(item)</code></a> (there are also versions that accept between two and nine items as parameters)</li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>just</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>just return</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/just.png\" style=\"width:100%;\" alt=\"just\">\n     <figcaption><p>\n      RxJS implements this operator as <code>return</code> and as <code>just</code> (two names for\n      the same operator with the same behavior). It accepts a single item as a parameter and returns\n      an Observable that emits that single item as its sole emission.\n     </p><p>\n      <code>return</code>/<code>just</code> operates by default on the <code>immediate</code>\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can also pass in a Scheduler of your choosing as an\n      optional second parameter, in which case it will operate on that Scheduler instead.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.just(42);\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div><div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div>\n     <p>\n      <code>return</code>/<code>just</code> is found in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>asObservable just</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Return</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>just</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>just</code>.\n    </p>\n    <p>\n    Returns an observable sequence that contains a single element.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/just/just.php\n\n\n$source =  \\Rx\\Observable::just(42);\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>just return_value</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>just</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>items just :+</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>just sequenceOf</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Just"},{"path":"/documentation/operators/start.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#creating\">Creating</a></li>\n  <li class=\"active\">Start</li>\n</ol>\n\n<h1>Start</h1>\n<h3>create an Observable that emits the return value of a function-like directive</h3>\n\n<figure>\n <img src=\"images/start.c.png\" style=\"width:100%;\" alt=\"Start\">\n <figcaption><p>\n  There are a number of ways that programming languages have for obtaining values as the result of\n  calculations, with names like functions, futures, actions, callables, runnables, and so forth.\n  The operators grouped here under the <span class=\"operator\">Start</span> operator category\n  make these things behave like Observables so that they can be chained with other Observables in\n  an Observable cascade\n </p></figcaption>\n</figure>\n\n<h2>See Also</h2>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/from.html\"><span class=\"operator\">From</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/just.html\"><span class=\"operator\">Just</span></a></li>\n <li><a href=\"http://rxwiki.wikidot.com/101samples#toc1\"><cite>101 Rx Samples</cite>: Start &#x2014; Run Code Asynchronously</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>asyncAction asyncFunc deferFuture forEachFuture fromAction fromCallable fromFunc0 fromRunnable start startFuture toAsync</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <p>\n     The various RxGroovy implementations of <span class=\"operator\">Start</span> are found in the\n     optional <code>rxjava-async</code> module.\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/start.png\" style=\"width:100%;\" alt=\"start\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module includes the <code>start</code> operator, which accepts\n      a function as its parameter, calls that function to retrieve a value, and then returns an\n      Observable that will emit that value to each subsequent observer.\n     </p><p>\n      Note that the function will only be executed once, even if more than one observer subscribes\n      to the resulting Observable.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toAsync.png\" style=\"width:100%;\" alt=\"toAsync\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>toAsync</code>,\n      <code>asyncAction</code>, and <code>asyncFunc</code> operators. These accept a function or\n      an Action as their parameter. In the case of a function, this variant of the operator calls\n      that function to retrieve a value, and then returns an Observable that will emit that value\n      to each subsequent observer (just as the <code>start</code> operator does).\n     </p><p>\n      In the case of Action, the process is similar, but there is no return value. In this case,\n      the Observable created by this operator will emit a <code>null</code> before terminating.\n     </p><p>\n      Note that the function or Action will only be executed once, even if more than one observer\n      subscribes to the resulting Observable.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/startFuture.png\" style=\"width:100%;\" alt=\"startFuture\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>startFuture</code> operator.\n      You pass it a function that returns a <code>Future</code>. <code>startFuture</code> calls this\n      function immediately to obtain the <code>Future</code>, and calls the\n      <code>Future</code>&#x2019;s <code>get</code> method to try to obtain its value. It returns an\n      Observable to which it will emit this value to any subsequent observers.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/deferFuture.png\" style=\"width:100%;\" alt=\"deferFuture\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>deferFuture</code> operator.\n      You pass it a function that returns a <code>Future</code> that returns an Observable.\n      <code>deferFuture</code> returns an Observable, but does not call the function you provide\n      until such time as an observer subscribes to the Observable it returns. When it does so, it\n      immediately calls <code>get</code> on the resulting <code>Future</code>, and then mirrors the\n      emissions from the Observable returned by the <code>Future</code> as its own emissions.\n     </p><p>\n      In this way you can include a <code>Future</code> that returns an Observable in a cascade of\n      Observables as a peer to other Observables.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/fromAction.png\" style=\"width:100%;\" alt=\"fromAction\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>fromAction</code> operator.\n      It accepts an <code>Action</code> as its parameter, and returns an Observable that emits the\n      item you pass to <code>fromAction</code> upon termination of the <code>Action</code>\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/fromCallable.png\" style=\"width:100%;\" alt=\"fromCallable\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>fromCallable</code> operator.\n      It accepts a <code>Callable</code> as its parameter, and returns an Observable that emits the\n      result of this callable as its sole emission.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/fromRunnable.png\" style=\"width:100%;\" alt=\"fromRunnable\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>fromRunnable</code> operator.\n      It accepts a <code>Runnable</code> as its parameter, and returns an Observable that emits the\n      item you pass to <code>fromRunnable</code> upon termination of the <code>Runnable</code>\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/forEachFuture.png\" style=\"width:100%;\" alt=\"forEachFuture\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>forEachFuture</code> operator.\n      It is not really a variant of the <span class=\"operator\">Start</span> operator, but something\n      all its own. You pass <code>forEachFuture</code> some subset of the typical observer methods\n      (<code>onNext</code>, <code>onError</code>, and <code>onCompleted</code>) and the Observable\n      will call these methods in the usual way. But <code>forEachFuture</code> itself returns a\n      <code>Future</code> that blocks on <code>get</code> until the source Observable completes,\n      then returns either the completion or error, depending on how the Observable completed.\n     </p><p>\n      You can use this if you need a function that blocks until the completion of an Observable.\n     </p></figcaption>\n    </figure>\n    <p>\n     The <code>rxjava-async</code> module also includes the <code>runAsync</code> operator. It is\n     peculiar in that it creates a specialization of an Observable called a\n     <code>StoppableObservable</code>.\n    </p><p>\n     Pass <code>runAsync</code> an <code>Action</code> and a\n     <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>, and it will\n     return a <code>StoppableObservable</code> that uses the specified <code>Action</code> to\n     generate items that it emits. The <code>Action</code> accepts an <code>Observer</code> and a\n     <code>Subscription</code>. It uses the <code>Subscription</code> to check for the\n     <code>unsubscribed</code> condition, upon which it will stop emitting items. You can also\n     manually stop a <code>StoppableObservable</code> at any time by calling its\n     <code>unsubscribe</code> method (which will also unsubscribe the <code>Subscription</code> you\n     have associated with the <code>StoppableObservable</code>).\n    </p><p>\n     Because <code>runAsync</code> immediately invokes the <code>Action</code> and begins emitting\n     the items (that is, it produces a <em>hot</em> Observable), it is possible that some items may\n     be lost in the interval between when you establish the <code>StoppableObservable</code> with\n     this operator and when your <code>Observer</code> is ready to receive items. If this is a\n     problem, you can use the variant of <code>runAsync</code> that also accepts a\n     <code>Subject</code> and pass a <code>ReplaySubject</code> with which you can retrieve the\n     otherwise-missing items.\n    </p><p>\n     In RxGroovy there is also a version of the\n     <a href=\"http://reactivex.io/documentation/operators/from.html\"><span class=\"operator\">From</span></a> operator that converts a\n     <code>Future</code> into an Observable, and in this way resembles the\n     <span class=\"operator\">Start</span> operator.\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>asyncAction asyncFunc deferFuture forEachFuture fromAction fromCallable fromFunc0 fromRunnable start startFuture toAsync</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     The various RxJava implementations of <span class=\"operator\">Start</span> are found in the\n     optional <code>rxjava-async</code> module.\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/start.png\" style=\"width:100%;\" alt=\"start\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module includes the <code>start</code> operator, which accepts\n      a function as its parameter, calls that function to retrieve a value, and then returns an\n      Observable that will emit that value to each subsequent observer.\n     </p><p>\n      Note that the function will only be executed once, even if more than one observer subscribes\n      to the resulting Observable.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toAsync.png\" style=\"width:100%;\" alt=\"toAsync\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>toAsync</code>,\n      <code>asyncAction</code>, and <code>asyncFunc</code> operators. These accept a function or\n      an Action as their parameter. In the case of a function, this variant of the operator calls\n      that function to retrieve a value, and then returns an Observable that will emit that value\n      to each subsequent observer (just as the <code>start</code> operator does).\n     </p><p>\n      In the case of Action, the process is similar, but there is no return value. In this case,\n      the Observable created by this operator will emit a <code>null</code> before terminating.\n     </p><p>\n      Note that the function or Action will only be executed once, even if more than one observer\n      subscribes to the resulting Observable.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/startFuture.png\" style=\"width:100%;\" alt=\"startFuture\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>startFuture</code> operator.\n      You pass it a function that returns a <code>Future</code>. <code>startFuture</code> calls this\n      function immediately to obtain the <code>Future</code>, and calls the\n      <code>Future</code>&#x2019;s <code>get</code> method to try to obtain its value. It returns an\n      Observable to which it will emit this value to any subsequent observers.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/deferFuture.png\" style=\"width:100%;\" alt=\"deferFuture\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>deferFuture</code> operator.\n      You pass it a function that returns a <code>Future</code> that returns an Observable.\n      <code>deferFuture</code> returns an Observable, but does not call the function you provide\n      until such time as an observer subscribes to the Observable it returns. When it does so, it\n      immediately calls <code>get</code> on the resulting <code>Future</code>, and then mirrors the\n      emissions from the Observable returned by the <code>Future</code> as its own emissions.\n     </p><p>\n      In this way you can include a <code>Future</code> that returns an Observable in a cascade of\n      Observables as a peer to other Observables.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/fromAction.png\" style=\"width:100%;\" alt=\"fromAction\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>fromAction</code> operator.\n      It accepts an <code>Action</code> as its parameter, and returns an Observable that emits the\n      item you pass to <code>fromAction</code> upon termination of the <code>Action</code>\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/fromCallable.png\" style=\"width:100%;\" alt=\"fromCallable\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>fromCallable</code> operator.\n      It accepts a <code>Callable</code> as its parameter, and returns an Observable that emits the\n      result of this callable as its sole emission.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/fromRunnable.png\" style=\"width:100%;\" alt=\"fromRunnable\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>fromRunnable</code> operator.\n      It accepts a <code>Runnable</code> as its parameter, and returns an Observable that emits the\n      item you pass to <code>fromRunnable</code> upon termination of the <code>Runnable</code>\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/forEachFuture.png\" style=\"width:100%;\" alt=\"forEachFuture\">\n     <figcaption><p>\n      The <code>rxjava-async</code> module also includes the <code>forEachFuture</code> operator.\n      It is not really a variant of the <span class=\"operator\">Start</span> operator, but something\n      all its own. You pass <code>forEachFuture</code> some subset of the typical observer methods\n      (<code>onNext</code>, <code>onError</code>, and <code>onCompleted</code>) and the Observable\n      will call these methods in the usual way. But <code>forEachFuture</code> itself returns a\n      <code>Future</code> that blocks on <code>get</code> until the source Observable completes,\n      then returns either the completion or error, depending on how the Observable completed.\n     </p><p>\n      You can use this if you need a function that blocks until the completion of an Observable.\n     </p></figcaption>\n    </figure>\n    <p>\n     The <code>rxjava-async</code> module also includes the <code>runAsync</code> operator. It is\n     peculiar in that it creates a specialization of an Observable called a\n     <code>StoppableObservable</code>.\n    </p><p>\n     Pass <code>runAsync</code> an <code>Action</code> and a\n     <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>, and it will\n     return a <code>StoppableObservable</code> that uses the specified <code>Action</code> to\n     generate items that it emits. The <code>Action</code> accepts an <code>Observer</code> and a\n     <code>Subscription</code>. It uses the <code>Subscription</code> to check for the\n     <code>unsubscribed</code> condition, upon which it will stop emitting items. You can also\n     manually stop a <code>StoppableObservable</code> at any time by calling its\n     <code>unsubscribe</code> method (which will also unsubscribe the <code>Subscription</code> you\n     have associated with the <code>StoppableObservable</code>).\n    </p><p>\n     Because <code>runAsync</code> immediately invokes the <code>Action</code> and begins emitting\n     the items (that is, it produces a <em>hot</em> Observable), it is possible that some items may\n     be lost in the interval between when you establish the <code>StoppableObservable</code> with\n     this operator and when your <code>Observer</code> is ready to receive items. If this is a\n     problem, you can use the variant of <code>runAsync</code> that also accepts a\n     <code>Subject</code> and pass a <code>ReplaySubject</code> with which you can retrieve the\n     otherwise-missing items.\n    </p><p>\n     In RxJava there is also a version of the\n     <a href=\"http://reactivex.io/documentation/operators/from.html\"><span class=\"operator\">From</span></a> operator that converts a\n     <code>Future</code> into an Observable, and in this way resembles the\n     <span class=\"operator\">Start</span> operator.\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>fromCallable</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>start startAsync toAsync</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/start.png\" style=\"width:100%;\" alt=\"start\">\n     <figcaption><p>\n      RxJS implements the <code>start</code> operator. It takes as its parameters a function whose\n      return value will be the emission from the resulting Observable, and, optionally, any\n      additional parameter to that function and a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> on which to run the\n      function.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar context = { value: 42 };\n\nvar source = Rx.Observable.start(\n    function () {\n        return this.value;\n    },\n    context,\n    Rx.Scheduler.timeout\n);\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n     <div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div>\n     <p>\n      <code>start</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.async.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.async.compat.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/startAsync.png\" style=\"width:100%;\" alt=\"start\">\n     <figcaption><p>\n      RxJS also implements the <code>startAsync</code> operator. It takes as its parameters an\n      asynchronous function whose return value will be the emission from the resulting Observable.\n     </p><p>\n      You can convert a function into an asynchronous function with the <code>toAsync</code>\n      method. It takes a function, function parameter, and <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> as\n      parameters, and returns an asynchronous function that will be invoked on the specified Scheduler. The\n      last two parameters are optional; if you do not specify a Scheduler, the <code>timeout</code> Scheduler\n      will be used by default.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.startAsync(function () {\n    return RSVP.Promise.resolve(42);\n});\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n     <div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div>\n     <p>\n      <code>startAsync</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.async.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.async.compat.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     <p>\n      <code>toAsync</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.async.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.async.compat.js</code> (requires <code>rx.binding.js</code> and either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>asyncAction asyncFunc deferFuture forEachFuture fromAction fromCallable fromFunc0 fromRunnable start startFuture toAsync</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Start ToAsync</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>start</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>start</code>.\n    </p>\n    <p>\n    Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/start/start.php\n\n$source = Rx\\Observable::start(function () {\n    return 42;\n});\n\n$source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>start start_async to_async</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Start"},{"path":"/documentation/operators/debounce.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">Debounce</li>\n</ol>\n\n   <h1>Debounce</h1>\n   <h3>only emit an item from an Observable if a particular timespan has passed without it emitting another item</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"debounce\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Debounce</span> operator filters out items emitted by the source Observable that\n     are rapidly followed by another emitted item.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/backpressure.html\">Backpressure-related Operators</a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/sample.html\"><span class=\"operator\">Sample</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/window.html\"><span class=\"operator\">Window</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/13_TimeShiftedSequences.html#Throttle\"><cite>Introduction to Rx</cite>: Throttle</a></li>\n    <li><a href=\"http://rxmarbles.com/#debounce\">RxMarbles: <code>debounce</code></a></li>\n    <li><a href=\"http://rxmarbles.com/#debounceWithSelector\">RxMarbles: <code>debounceWithSelector</code></a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc30\"><cite>101 Rx Samples</cite>: Throttle &#x2014; Simple</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>debounce throttleWithTimeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxGroovy implements this operator as <code>throttleWithTimeout</code> and <code>debounce</code>.\n     </p><p>\n      Note that the last item emitted by the source Observable will be emitted in turn by this operator even if\n      the source Observable&#x2019;s <code>onCompleted</code> notification is issued within the time window you\n      specify since that item&#x2019;s emission. That is to say: an <code>onCompleted</code> notification will\n      not trigger a throttle.\n     </p>\n     <figure>\n      <img src=\"images/debounce.png\" style=\"width:100%;\" alt=\"debounce\">\n      <figcaption><p>\n       One variant of <code>throtleWithTimeout</code>/<code>debounce</code> (two names for the same operator\n       variant) throttles at a periodic time interval that you choose by passing in a <code>TimeUnit</code> and\n       a quantity of such units as parameters to the operator.\n      </p><p>\n       This variant operates by default on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can optionally pass in a Scheduler of your choosing as\n       a third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleWithTimeout(long,%20java.util.concurrent.TimeUnit)\"><code>throttleWithTimeout(long,TimeUnit)</code></a> and <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit)\"><code>debounce(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleWithTimeout(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>throttleWithTimeout(long,TimeUnit,Scheduler)</code></a> and <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>debounce(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/debounce.f.png\" style=\"width:100%;\" alt=\"debounce\">\n      <figcaption><p>\n       There ia also a variant of <code>debounce</code> (that does not have a <code>throttleWithTimeout</code>\n       alias) that throttles the source Observable by applying a function to each item it emits, this function\n       generating an Observable. If the source Observable emits another item before this newly-generated\n       Observable terminates, <code>debounce</code> will suppress the item.\n      </p><p>\n       This variant of <code>debounce</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(rx.functions.Func1)\"><code>debounce(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>debounce throttleWithTimeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJava implements this operator as <code>throttleWithTimeout</code> and <code>debounce</code>.\n     </p><p>\n      Note that the last item emitted by the source Observable will be emitted in turn by this operator even if\n      the source Observable&#x2019;s <code>onCompleted</code> notification is issued within the time window you\n      specify since that item&#x2019;s emission. That is to say: an <code>onCompleted</code> notification will\n      not trigger a throttle.\n     </p>\n     <figure>\n      <img src=\"images/debounce.png\" style=\"width:100%;\" alt=\"debounce\">\n      <figcaption><p>\n       One variant of <code>throtleWithTimeout</code>/<code>debounce</code> (two names for the same operator\n       variant) throttles at a periodic time interval that you choose by passing in a <code>TimeUnit</code> and\n       a quantity of such units as parameters to the operator.\n      </p><p>\n       This variant operates by default on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can optionally pass in a Scheduler of your choosing as\n       a third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleWithTimeout(long,%20java.util.concurrent.TimeUnit)\"><code>throttleWithTimeout(long,TimeUnit)</code></a> and <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit)\"><code>debounce(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleWithTimeout(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>throttleWithTimeout(long,TimeUnit,Scheduler)</code></a> and <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>debounce(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/debounce.f.png\" style=\"width:100%;\" alt=\"debounce\">\n      <figcaption><p>\n       There ia also a variant of <code>debounce</code> (that does not have a <code>throttleWithTimeout</code>\n       alias) that throttles the source Observable by applying a function to each item it emits, this function\n       generating an Observable. If the source Observable emits another item before this newly-generated\n       Observable terminates, <code>debounce</code> will suppress the item.\n      </p><p>\n       This variant of <code>debounce</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#debounce(rx.functions.Func1)\"><code>debounce(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>debounce throttleWithTimeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>debounce debounceWithSelector throttleWithTimeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/debounce.png\" style=\"width:100%;\" alt=\"debounce\">\n      <figcaption><p>\n       The first variant &#x2014; called either <code>debounce</code> or <code>throttleWithTimeout</code> &#x2014;\n       accepts as its parameter a duration, defined as an integer number of milliseconds, and it suppresses any\n       emitted items that are followed by other emitted items during that duration since the first item&#x2019;s\n       emission.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar times = [\n    { value: 0, time: 100 },\n    { value: 1, time: 600 },\n    { value: 2, time: 400 },\n    { value: 3, time: 700 },\n    { value: 4, time: 200 }\n];\n\n// Delay each item by time and project value;\nvar source = Rx.Observable.from(times)\n  .flatMap(function (item) {\n    return Rx.Observable\n      .of(item.value)\n      .delay(item.time);\n  })\n  .debounce(500 /* ms */);\n\nvar subscription = source.subscribe(\n  function (x) {\n    console.log(&apos;Next: %s&apos;, x);\n  },\n  function (err) {\n    console.log(&apos;Error: %s&apos;, err);\n  },\n  function () {\n    console.log(&apos;Completed&apos;);\n  });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 2\nNext: 4\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/debounceWithSelector.png\" style=\"width:100%;\" alt=\"debounceWithSelector\">\n      <figcaption><p>\n       The <code>debounceWithSelector</code> operator throttles the source Observable by applying a function to\n       each item it emits, this function generating an Observable. If the source Observable emits another item\n       before this newly-generated Observable terminates, <code>debounce</code> will suppress the item.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar array = [\n    800,\n    700,\n    600,\n    500\n];\n\nvar source = Rx.Observable.for(\n    array,\n    function (x) {\n        return Rx.Observable.timer(x)\n    })\n    .map(function(x, i) { return i; })\n    .throttleWithSelector(function (x) {\n        return Rx.Observable.timer(700);\n    });\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 3\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <p>\n      <code>debounce</code> and <code>debounceWithSelector</code> are found in each of the following\n      distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>debounce throttleWithTimeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Throttle</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>debounce throttle_with_selector throttle_with_timeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>debounce throttleWithTimeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>debounce throttle</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Debounce"},{"path":"/documentation/operators/last.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">Last</li>\n</ol>\n\n   <h1>Last</h1>\n   <h3>emit only the last item (or the last item that meets some condition) emitted by an Observable</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"last\"></rx-marbles>\n    <figcaption><p>\n     If you are only interested in the last item emitted by an Observable, or the last item that meets some\n     criteria, you can filter the Observable with the <span class=\"operator\">Last</span> operator.\n    </p><p>\n     In some implementations, <code>Last</code> is not implemented as a filtering operator that returns an\n     Observable, but as a blocking function that returns a particular item when the source Observable\n     terminates. In those implementations, if you instead want a filtering operator, you may have better luck\n     with <a href=\"http://reactivex.io/documentation/operators/take.html\"><code>TakeLast(1)</code></a>.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/elementat.html\"><span class=\"operator\">ElementAt</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/first.html\"><span class=\"operator\">First</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/take.html\"><span class=\"operator\">Take</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takeLast.html\"><span class=\"operator\">TakeLast</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/07_Aggregation.html#Last\"><cite>Introduction to Rx</cite>: Last</a></li>\n    <li><a href=\"http://rxmarbles.com/#last\">RxMarbles: <code>last</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>last</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>last</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>last lastOrDefault</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxGroovy, this filtering operator is implemented as <code>last</code> and <code>lastOrDefault</code>.\n     </p><p>\n      Somewhat confusingly, there are also <code>BlockingObservable</code> operators called <code>last</code>\n      and <code>lastOrDefault</code> that block and then return items, rather than immediately returning\n      Observables.\n     </p>\n     <h3>The Filtering Operators</h3>\n     <figure>\n      <img src=\"images/last.png\" style=\"width:100%;\" alt=\"last\">\n      <figcaption><p>\n       To filter an Observable so that only its last emission is emitted, use the\n       <code>last</code> operator with no parameters. \n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#last()\"><code>last()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/last.p.png\" style=\"width:100%;\" alt=\"last\">\n      <figcaption><p>\n       You can also pass a predicate function to <code>last</code>, in which case it will produce an\n       Observable that emits only the last item from the source Observable that the predicate evaluates as\n       <code>true</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#last(rx.functions.Func1)\"><code>last(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/lastOrDefault.png\" style=\"width:100%;\" alt=\"lastOrDefault\">\n      <figcaption><p>\n       The <code>lastOrDefault</code> operator is similar to <code>last</code>, but you pass it a default item\n       that it can emit if the source Observable fails to emit any items.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#lastOrDefault(T)\"><code>lastOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/lastOrDefault.p.png\" style=\"width:100%;\" alt=\"lastOrDefault\">\n      <figcaption><p>\n       <code>lastOrDefault</code> also has a variant to which you can pass a predicate function, so that its\n       Observable will emit the last item from the source Observable that the predicate evaluates as\n       <code>true</code>, or the default item if no items emitted by the source Observable pass the predicate.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#lastOrDefault(T)\"><code>lastOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>last</code> and <code>lastOrDefault</code> do not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <h3>The <code>BlockingObservable</code> Methods</h3>\n     <p>\n      The <code>BlockingObservable</code> methods do not transform an Observable into another, filtered\n      Observable, but rather they break out of the Observable cascade, blocking until the Observable emits\n      the desired item, and then return that item itself.\n     </p><p>\n      To turn an Observable into a <code>BlockingObservable</code> so that you can use these methods, you can\n      use either the <code>Observable.toBlocking</code> or <code>BlockingObservable.from</code> methods.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toBlocking()\"><code>Observable.toBlocking()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#from(rx.Observable)\"><code>BlockingObservable.from(Observable)</code></a></li>\n     </ul>\n     <figure>\n      <img src=\"images/B.last.png\" style=\"width:100%;\" alt=\"last\">\n      <figcaption><p>\n       To retrieve the last emission from a <code>BlockingObservable</code>, use the <code>last</code> method\n       with no parameters. \n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#last()\"><code>BlockingObservable.last()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.last.p.png\" style=\"width:100%;\" alt=\"last\">\n      <figcaption><p>\n       You can also pass a predicate function to the <code>last</code> method to retrieve the last emission\n       from a <code>BlockingObservable</code> that satisfies the predicate.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#last(rx.functions.Func1)\"><code>BlockingObservable.last(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.lastOrDefault.png\" style=\"width:100%;\" alt=\"lastOrDefault\">\n      <figcaption><p>\n       As with the filtering operators, the <code>last</code> method of <code>BlockingObservable</code> will\n       throw a <code>NoSuchElementException</code> if there is no last element in the source\n       <code>BlockingObservable</code>. To return a default item instead in such cases, use the\n       <code>lastOrDefault</code> method.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#lastOrDefault(T)\"><code>BlockingObservable.lastOrDefault()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.lastOrDefault.p.png\" style=\"width:100%;\" alt=\"lastOrDefault\">\n      <figcaption><p>\n       And, as with <code>last</code>, there is a <code>lastOrDefault</code> variant that takes a predicate\n       function as an argument and retrieves the last item from the source <code>BlockingObservable</code>\n       that satisfies that predicate, or a default item instead if no satisfying item was emitted.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#lastOrDefault(T,%20rx.functions.Func1)\"><code>BlockingObservable.lastOrDefault(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>last lastOrDefault</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxJava, this filtering operator is implemented as <code>last</code> and <code>lastOrDefault</code>.\n     </p><p>\n      Somewhat confusingly, there are also <code>BlockingObservable</code> operators called <code>last</code>\n      and <code>lastOrDefault</code> that block and then return items, rather than immediately returning\n      Observables.\n     </p>\n     <h3>The Filtering Operators</h3>\n     <figure>\n      <img src=\"images/last.png\" style=\"width:100%;\" alt=\"last\">\n      <figcaption><p>\n       To filter an Observable so that only its last emission is emitted, use the\n       <code>last</code> operator with no parameters. \n      </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable.just(1, 2, 3)\n          .last()\n          .subscribe(new Subscriber&lt;Integer&gt;() {\n        @Override\n        public void onNext(Integer item) {\n            System.out.println(&quot;Next: &quot; + item);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            System.err.println(&quot;Error: &quot; + error.getMessage());\n        }\n\n        @Override\n        public void onCompleted() {\n            System.out.println(&quot;Sequence complete.&quot;);\n        }\n    });</pre></div>\n     <div class=\"output\"><pre>\nNext: 3\nSequence complete.</pre></div>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#last()\"><code>last()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/last.p.png\" style=\"width:100%;\" alt=\"last\">\n      <figcaption><p>\n       You can also pass a predicate function to <code>last</code>, in which case it will produce an\n       Observable that emits only the last item from the source Observable that the predicate evaluates as\n       <code>true</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#last(rx.functions.Func1)\"><code>last(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/lastOrDefault.png\" style=\"width:100%;\" alt=\"lastOrDefault\">\n      <figcaption><p>\n       The <code>lastOrDefault</code> operator is similar to <code>last</code>, but you pass it a default item\n       that it can emit if the source Observable fails to emit any items.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#lastOrDefault(T)\"><code>lastOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/lastOrDefault.p.png\" style=\"width:100%;\" alt=\"lastOrDefault\">\n      <figcaption><p>\n       <code>lastOrDefault</code> also has a variant to which you can pass a predicate function, so that its\n       Observable will emit the last item from the source Observable that the predicate evaluates as\n       <code>true</code>, or the default item if no items emitted by the source Observable pass the predicate.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#lastOrDefault(T)\"><code>lastOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>last</code> and <code>lastOrDefault</code> do not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <h3>The <code>BlockingObservable</code> Methods</h3>\n     <p>\n      The <code>BlockingObservable</code> methods do not transform an Observable into another, filtered\n      Observable, but rather they break out of the Observable cascade, blocking until the Observable emits\n      the desired item, and then return that item itself.\n     </p><p>\n      To turn an Observable into a <code>BlockingObservable</code> so that you can use these methods, you can\n      use either the <code>Observable.toBlocking</code> or <code>BlockingObservable.from</code> methods.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toBlocking()\"><code>Observable.toBlocking()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#from(rx.Observable)\"><code>BlockingObservable.from(Observable)</code></a></li>\n     </ul>\n     <figure>\n      <img src=\"images/B.last.png\" style=\"width:100%;\" alt=\"last\">\n      <figcaption><p>\n       To retrieve the last emission from a <code>BlockingObservable</code>, use the <code>last</code> method\n       with no parameters. \n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#last()\"><code>BlockingObservable.last()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.last.p.png\" style=\"width:100%;\" alt=\"last\">\n      <figcaption><p>\n       You can also pass a predicate function to the <code>last</code> method to retrieve the last emission\n       from a <code>BlockingObservable</code> that satisfies the predicate.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#last(rx.functions.Func1)\"><code>BlockingObservable.last(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.lastOrDefault.png\" style=\"width:100%;\" alt=\"lastOrDefault\">\n      <figcaption><p>\n       As with the filtering operators, the <code>last</code> method of <code>BlockingObservable</code> will\n       throw a <code>NoSuchElementException</code> if there is no last element in the source\n       <code>BlockingObservable</code>. To return a default item instead in such cases, use the\n       <code>lastOrDefault</code> method.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#lastOrDefault(T)\"><code>BlockingObservable.lastOrDefault()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.lastOrDefault.p.png\" style=\"width:100%;\" alt=\"lastOrDefault\">\n      <figcaption><p>\n       And, as with <code>last</code>, there is a <code>lastOrDefault</code> variant that takes a predicate\n       function as an argument and retrieves the last item from the source <code>BlockingObservable</code>\n       that satisfies that predicate, or a default item instead if no satisfying item was emitted.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#lastOrDefault(T,%20rx.functions.Func1)\"><code>BlockingObservable.lastOrDefault(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>blockingLast last lastElement</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>last</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/last.p.png\" style=\"width:100%;\" alt=\"last\">\n      <figcaption><p>\n       RxJS implements the <code>last</code> operator. It optionally takes a predicate function as a parameter,\n       in which case, rather than emitting the last item from the source Observable, the resulting Observable\n       will emit the last item from the source Observable that satisfies the predicate.\n      </p><p>\n       The predicate function itself takes three arguments:\n      </p>\n      <ol>\n       <li>the item from the source Observable to be, or not be, filtered</li>\n       <li>the zero-based index of this item in the source Observable&#x2019;s sequence</li>\n       <li>the source Observable object</li>\n      </ol>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 10)\n    .last(function (x, idx, obs) { return x % 2 === 1; });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 8\nCompleted</pre></div>\n      <p>\n       If the source Observable emits no items (or no items that match the predicate), <code>last</code>\n       will terminate with a &#x201C;<code>Sequence contains no elements.</code>&#x201D; <code>onError</code>\n       notification.\n      </p><p>\n       If instead you want the Observable to emit a default value in such a case, you can pass a\n       second parameter (named <code>defaultValue</code>) to <code>last</code>:\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 10)\n    .last(function (x, idx, obs) { return x &gt; 42; }, 88 );\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 88\nCompleted\n</pre></div></figcaption>\n     </figure>\n     <p>\n      <code>last</code> is found in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.aggregates.js</code></li>\n     </ul>\n     <p>\n      It requires one of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>last lastOrDefault takeLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Last LastOrDefault</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>last last_or_default</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>last last_or_default</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>last lastOrElse head headOption headOrElse</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Last"},{"path":"/documentation/operators/concat.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#mathematical\">Mathematical and Aggregate</a></li>\n  <li class=\"active\">Concat</li>\n</ol>\n\n   <h1>Concat</h1>\n   <h3>emit the emissions from two or more Observables without interleaving them</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"concat\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Concat</span> operator concatenates the output of multiple\n     Observables so that they act like a single Observable, with all of the items emitted by the\n     first Observable being emitted before any of the items emitted by the second Observable (and\n     so forth, if there are more than two).\n    </p></figcaption>\n   </figure>\n<!-- REMOVING THIS SECTION AS CONFUSING AND MISLEADING\n   <figure>\n    <img src=\"images/concat.hot.png\"  style=\"width:100%;\" alt=\"Concat\" />\n    <figcaption><p>\n     Note that if the source Observables are &ldquo;hot&rdquo; and are therefore sending their emissions and\n     notifications to the <span class=\"operator\">Concat</span> concurrently, an <code>onError</code>\n     notification from <em>any</em> of the source Observables may &ldquo;jump the queue&rdquo; and trigger an\n     <code>onError</code> notification from the Observable that results from the\n     <span class=\"operator\">Concat</span> operation &mdash; even if the source Observable that was the source\n     of the error notification has not yet begun to be concatenated to that resulting Observable.\n    </p></figcaption>\n   </figure>\nEND REMOVED SECTION -->\n   <p>\n    <span class=\"operator\">Concat</span> waits to subscribe to each additional Observable that you\n    pass to it until the previous Observable completes. Note that because of this, if you try to\n    concatenate a &#x201C;hot&#x201D; Observable, that is, one that begins emitting items immediately\n    and before it is subscribed to, <span class=\"operator\">Concat</span> will not see, and therefore\n    will not emit, any items that Observable emits before all previous Observables complete and\n    <span class=\"operator\">Concat</span> subscribes to the &#x201C;hot&#x201D; Observable.\n   </p><p>\n    In some ReactiveX implementations there is also a <span class=\"operator\">ConcatMap</span>\n    operator (a.k.a. <code>concat_all</code>, <code>concat_map</code>,\n    <code>concatMapObserver</code>, <code>for</code>, <code>forIn</code>/<code>for_in</code>,\n    <code>mapcat</code>, <code>selectConcat</code>, or <code>selectConcatObserver</code>) that\n    transforms the items emitted by a source Observable into corresponding Observables and then\n    concatenates the items emitted by each of these Observables in the order in which they are\n    observed and transformed.\n   </p><p>\n    The <a href=\"http://reactivex.io/documentation/operators/startwith.html\"><span class=\"operator\">StartWith</span></a> operator is similar to\n    <span class=\"operator\">Concat</span>, but <em>prepends</em>, rather than appends, items or\n    emissions of items to those emitted by a source Observable.\n   </p><p>\n    The <a href=\"http://reactivex.io/documentation/operators/merge.html\"><span class=\"operator\">Merge</span></a> operator is also similar. It\n    combines the emissions of two or more Observables, but may interleave them, whereas\n    <span class=\"operator\">Concat</span> never interleaves the emissions from multiple Observables.\n   </p>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/catch.html\"><span class=\"operator\">Catch</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/merge.html\"><span class=\"operator\">Merge</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/startwith.html\"><span class=\"operator\">StartWith</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/12_CombiningSequences.html#Concat\"><cite>Introduction to Rx</cite>: Concat</a></li>\n    <li><a href=\"http://rxmarbles.com/#concat\">RxMarbles: <code>concat</code></a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc51\"><cite>101 Rx Samples</cite>: Concat &#x2014; cold observable</a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc52\"><cite>101 Rx Samples</cite>: Concat &#x2014; hot observable</a></li>\n    <li><a href=\"http://blog.danlew.net/2015/06/22/loading-data-from-multiple-sources-with-rxjava/\">Loading data from multiple sources with RxJava</a> by Dan Lew (example using Concat and First)</li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>concat concat*</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/concat.png\" style=\"width:100%;\" alt=\"concat\">\n      <figcaption><p>\n       In RxClojure <code>concat</code> concatenates some number of individual Observables together\n       in the order in which they are given.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/concatX.png\" style=\"width:100%;\" alt=\"concat*\">\n      <figcaption><p>\n       The <code>concat*</code> operator concatenates the Observables emitted by an Observable\n       together, in the order in which they are emitted.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>concat</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxCpp implements this operator as <code>concat</code>:\n     </p>\n     <figure>\n      <img src=\"images/concat.png\" style=\"width:100%;\" alt=\"concat\">\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>concat concatWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/concat.png\" style=\"width:100%;\" alt=\"concat\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>concat</code>. There are variants of this operator\n       that take between two and nine Observables as parameters, and that concatenate them in the\n       order they appear in the parameter list. There is also a variant that takes as a parameter an\n       Observable of Observables, and concatenates each of these Observables in the order that they\n       are emitted.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\nodds  = Observable.from([1, 3, 5, 7]);\nevens = Observable.from([2, 4, 6]);\n\nObservable.concat(odds, evens).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n1\n3\n5\n7\n2\n4\n6\nSequence complete</pre></div>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#concat(rx.Observable)\"><code>concat(Observable&lt;Observable&gt;)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#concat(rx.Observable,%20rx.Observable)\"><code>concat(Observable,Observable)</code></a> (there are also versions that take up to nine Observables)</li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      There is also an instance method, <code>concatWith</code>, such that\n      <code>Observable.concat(a,b)</code> is equivalent to <code>a.concatWith(b)</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#concatWith(rx.Observable)\"><code>concatWith(Observable)</code></a></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>concat concatWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/concat.png\" style=\"width:100%;\" alt=\"concat\">\n      <figcaption><p>\n       RxJava implements this operator as <code>concat</code>. There are variants of this operator\n       that take between two and nine Observables as parameters, and that concatenate them in the\n       order they appear in the parameter list. There is also a variant that takes as a parameter an\n       Observable of Observables, and concatenates each of these Observables in the order that they\n       are emitted.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#concat(rx.Observable)\"><code>concat(Observable&lt;Observable&gt;)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#concat(rx.Observable,%20rx.Observable)\"><code>concat(Observable,Observable)</code></a> (there are also versions that take up to nine Observables)</li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      There is also an instance method, <code>concatWith</code>, such that\n      <code>Observable.concat(a,b)</code> is equivalent to <code>a.concatWith(b)</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#concatWith(rx.Observable)\"><code>concatWith(Observable)</code></a></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>concat concatArray concatArrayDelayError concatArrayEager concatDelayError concatEager concatWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n      <span style=\"color:#ff0000\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>concat concatAll</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJS implements this operator as <code>concat</code> and <code>concatAll</code>.\n     </p>\n     <figure>\n      <img src=\"images/concat.png\" style=\"width:100%;\" alt=\"concat\">\n      <figcaption><p>\n       <code>concat</code> takes a variable number of Observables (or Promises) as parameters (or a\n       single array of Observables or Promises), and concatenates them in the order they appear in\n       the parameter list (or array). It exists as both an Observable prototype method and as an\n       instance method.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/concatAll.png\" style=\"width:100%;\" alt=\"concatAll\">\n      <figcaption><p>\n       <code>concatAll</code> is an instance method that operates on an Observable of Observables,\n       concatinating each of these Observables in the order they are emitted.\n      </p></figcaption>\n     </figure>\n     <p>\n      <code>concat</code> and <code>concatAll</code> are found in each of the following\n      distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>concat concatWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/concat.png\" style=\"width:100%;\" alt=\"concat\">\n      <figcaption><p>\n       RxKotlin implements this operator as <code>concat</code>. There are variants of this operator\n       that take between two and nine Observables as parameters, and that concatenate them in the\n       order they appear in the parameter list. There is also a variant that takes as a parameter an\n       Observable of Observables, and concatenates each of these Observables in the order that they\n       are emitted.\n      </p></figcaption>\n     </figure>\n     <p>\n      There is also an instance method, <code>concatWith</code>, such that\n      <code>Observable.concat(a,b)</code> is equivalent to <code>a.concatWith(b)</code>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Concat</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/concat.C.png\" style=\"width:100%;\" alt=\"Concat\">\n      <figcaption><p>\n       Rx.NET implements this operator as <code>Concat</code>. It accepts either an enumerable of\n       Observables, an Observable of Observables, or two Observables as parameters, and concatenates\n       these in the order given.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>concat concatAll</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>concat</code>.\n    </p>\n    <p>\n    Concatenate an observable sequence onto the end of the source observable.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/concat/concat.php\n\n\n$source1 = \\Rx\\Observable::just(42);\n$source2 = \\Rx\\Observable::just(56);\n\n$source = \\Rx\\Observable::emptyObservable()-&gt;concat($source1)-&gt;concat($source2);\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nNext value: 56\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>concatAll</code>.\n    </p>\n    <p>\n    Concatenates a sequence of observable sequences into a single observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/concat/concatAll.php\n\n$source = Rx\\Observable::range(0, 3)\n    -&gt;map(function ($x) {\n        return \\Rx\\Observable::range($x, 3);\n    })\n    -&gt;concatAll();\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0\nNext value: 1\nNext value: 2\nNext value: 1\nNext value: 2\nNext value: 3\nNext value: 2\nNext value: 3\nNext value: 4\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>concat concatAll</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/concat.png\" style=\"width:100%;\" alt=\"concat\">\n      <figcaption><p>\n       In RxPY <code>concat</code> takes a variable number of Observables as parameters (or an\n       array of Observables), and concatenates them in the order they appear in the parameter list\n       (or array).\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/concat_all.png\" style=\"width:100%;\" alt=\"concat_all\">\n      <figcaption><p>\n       <code>concatAll</code> operates on an Observable of Observables, concatinating each of these\n       Observables in the order they are emitted.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>concat merge_all</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/concat.png\" style=\"width:100%;\" alt=\"concat\">\n      <figcaption><p>\n       In Rx.rb, the <code>concat</code> operator operates on two Observables as an instance\n       operator, or on an array of Observables as a class method.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/merge_all.png\" style=\"width:100%;\" alt=\"merge_all\">\n      <figcaption><p>\n       The <code>merge_all</code> operator, despite its name, really behaves like a\n       <span class=\"operator\">Concat</span> variant in Rx.rb. It accepts an Observable of\n       Observables as its parameter, and concatenates the emissions from these Observables.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>concat ++</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxScala implements this operator in two ways. There is a <code>concat</code> operator that\n      accepts an Observable of Observables as its parameter, and then concatenates each of these\n      Observables in the order they are emitted. There is also a <code>++</code> operator that\n      concatenates one Observable to another.\n     </p>\n     <figure>\n      <img src=\"images/plusplus.png\" style=\"width:100%;\" alt=\"plus-plus\">\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>concat</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Concat"},{"path":"/documentation/operators/backpressure.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#backpressure\">Backpressure</a></li>\n</ol>\n\n<h1>backpressure operators</h1>\n<h3>strategies for coping with Observables that produce items more rapidly than their observers consume them</h3>\n\n<p>\n In ReactiveX it is not difficult to get into a situation in which an Observable is emitting items\n more rapidly than an operator or observer can consume them. This presents the problem of what to do\n with such a growing backlog of unconsumed items.\n</p><p>\n For example, imagine using the <a href=\"http://reactivex.io/documentation/operators/zip.html\"><span class=\"operator\">Zip</span></a> operator to\n zip together two infinite Observables, one of which emits items twice as frequently as the other. A\n naive implementation of the operator would have to maintain an ever-expanding buffer of items\n emitted by the faster Observable to eventually combine with items emitted by the slower one. This\n could cause ReactiveX to seize an unwieldy amount of system resources.\n</p><p>\n There are a variety of strategies with which you can exercise flow control and backpressure in\n ReactiveX in order to alleviate the problems caused when a quickly-producing Observable meets a\n slow-consuming observer, which include, in some ReactiveX implementations, reactive pull\n backpressure and some backpressure-specific operators.\n</p><p>\n A <dfn>cold Observable</dfn> emits a particular sequence of items, but can begin emitting this\n sequence when its observer finds it to be convenient, and at whatever rate the observer desires,\n without disrupting the integrity of the sequence. For example if you convert a static iterable into\n an Observable, that Observable will emit the same sequence of items no matter when it is later\n subscribed to or how frequently those items are observed. Examples of items emitted by a cold\n Observable might include the results of a database query, file retrieval, or web request.\n</p><p>\n A <dfn>hot Observable</dfn> begins generating items to emit immediately when it is created.\n Subscribers typically begin observing the sequence of items emitted by a hot Observable from\n somewhere in the middle of the sequence, beginning with the first item emitted by the Observable\n subsequent to the establishment of the subscription. Such an Observable emits items at its own\n pace, and it is up to its observers to keep up. Examples of items emitted by a hot Observable might\n include mouse &amp; keyboard events, system events, or stock prices.\n</p><p>\n When a cold Observable is multicast (when it is converted into a connectable Observable and its\n <a href=\"http://reactivex.io/documentation/operators/connect.html\"><span class=\"operator\">Connect</span></a> method is called), it effectively\n becomes hot and for the purposes of backpressure and flow-control it should be treated as a hot\n Observable.\n</p><p>\n Cold Observables are ideal for the reactive pull model of backpressure implemented by some\n implementations of ReactiveX (which is described elsewhere). Hot Observables typically do not cope\n well with a reactive pull model, and are better candidates for other flow control strategies, such\n as the use of the operators described on this page, or operators like\n <a href=\"http://reactivex.io/documentation/operators/buffer.html\"><span class=\"operator\">Buffer</span></a>, \n <a href=\"http://reactivex.io/documentation/operators/sample.html\"><span class=\"operator\">Sample</span></a>, \n <a href=\"http://reactivex.io/documentation/operators/debounce.html\"><span class=\"operator\">Debounce</span></a>, or\n <a href=\"http://reactivex.io/documentation/operators/window.html\"><span class=\"operator\">Window</span></a>.\n</p>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/buffer.html\"><span class=\"operator\">Buffer</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/sample.html\"><span class=\"operator\">Sample</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/debounce.html\"><span class=\"operator\">Debounce</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/window.html\"><span class=\"operator\">Window</span></a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>onBackpressureBuffer onBackpressureDrop onBackpressureLatest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <p>\n     RxGroovy implements reactive pull backpressure, and many of its operators support that form of\n     backpressure. It also has three operators that you can apply to Observables that have not been\n     written to support backpressure:\n    <figure class=\"variant\">\n     <img src=\"images/bp.obp.buffer.png\" style=\"width:100%;\" alt=\"onBackpressureBuffer\">\n     <figcaption><p>\n      <code>onBackpressureBuffer</code> maintains a buffer of all unobserved emissions from the\n      source Observable and emits them to downstream observers according to the requests they\n      generate.\n     </p><p>\n      A version of this operator that was introduced in RxGroovy 1.1 allows you to set the capacity of the\n      buffer; applying this operator will cause the resulting Observable to terminate with an error if this\n      buffer is overrun. A second version, introduced during the same release, allows you to set an\n      <code>Action</code> that <code>onBackpressureBuffer</code> will call if the buffer is overrun.\n     </p><ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer()\"><code>onBackpressureBuffer()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long)\"><code>onBackpressureBuffer(long)</code> (RxGroovy 1.1)</a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long,%20rx.functions.Action0)\"><code>onBackpressureBuffer(long,&#xA0;Action0)</code> (RxGroovy 1.1)</a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/bp.obp.drop.png\" style=\"width:100%;\" alt=\"onBackpressureDrop\">\n     <figcaption><p>\n      <code>onBackpressureDrop</code> drops emissions from the source Observable unless there is a\n      pending request from a downstream observer, in which case it will emit enough items to fulfill\n      the request.\n     </p><p>\n      A version of this operator that was introduced in the 1.1 release notifies you, by means of an\n      <code>Action</code> you pass as a parameter, when an item has been dropped and which item was dropped.\n     </p><ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureDrop()\"><code>onBackpressureDrop()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureDrop(rx.functions.Action1)\">onBackpressureDrop(Action1) (RxGroovy 1.1)</a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/bp.obp.latest.png\" style=\"width:100%;\" alt=\"onBackpressureLatest\">\n     <figcaption><p>\n      <code>onBackpressureLatest</code> (new in RxJava 1.1) holds on to the most-recently emitted item from the\n      source Observable and immediately emits that item to its observer upon request. It drops any other items\n      that it observes between requests from its observer.\n     </p><ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureLatest()\"><code>onBackpressureLatest()</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </p></div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>onBackpressureBuffer onBackpressureDrop onBackpressureLatest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     RxJava implements reactive pull backpressure, and many of its operators support that form of\n     backpressure. It also has three operators that you can apply to Observables that have not been\n     written to support backpressure:\n    <figure class=\"variant\">\n     <img src=\"images/bp.obp.buffer.png\" style=\"width:100%;\" alt=\"onBackpressureBuffer\">\n     <figcaption><p>\n      <code>onBackpressureBuffer</code> maintains a buffer of all unobserved emissions from the\n      source Observable and emits them to downstream observers according to the requests they\n      generate.\n     </p><p>\n      A version of this operator that was introduced in RxJava 1.1 allows you to set the capacity of the\n      buffer; applying this operator will cause the resulting Observable to terminate with an error if this\n      buffer is overrun. A second version, introduced during the same release, allows you to set an\n      <code>Action</code> that <code>onBackpressureBuffer</code> will call if the buffer is overrun.\n     </p><ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer()\"><code>onBackpressureBuffer()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long)\"><code>onBackpressureBuffer(long)</code> (RxJava 1.1)</a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureBuffer(long,%20rx.functions.Action0)\"><code>onBackpressureBuffer(long,&#xA0;Action0)</code> (RxJava 1.1)</a></li>\n     </ul></figcaption>\n     \n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/bp.obp.drop.png\" style=\"width:100%;\" alt=\"onBackpressureDrop\">\n     <figcaption><p>\n      <code>onBackpressureDrop</code> drops emissions from the source Observable unless there is a\n      pending request from a downstream observer, in which case it will emit enough items to fulfill\n      the request.\n     </p><p>\n      A version of this operator that was introduced in the 1.1 release notifies you, by means of an\n      <code>Action</code> you pass as a parameter, when an item has been dropped and which item was dropped.\n     </p><ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureDrop()\"><code>onBackpressureDrop()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureDrop(rx.functions.Action1)\">onBackpressureDrop(Action1) (RxJava 1.1)</a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/bp.obp.latest.png\" style=\"width:100%;\" alt=\"onBackpressureLatest\">\n     <figcaption><p>\n      <code>onBackpressureLatest</code> (new in RxJava 1.1) holds on to the most-recently emitted item from the\n      source Observable and immediately emits that item to its observer upon request. It drops any other items\n      that it observes between requests from its observer.\n     </p><ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onBackpressureLatest()\"><code>onBackpressureLatest()</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </p></div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>Flowable</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#ff0000\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>controlled pausable pausableBuffered stopAndWait windowed</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <p>\n     RxJS implements backpressure by transforming an ordinary Observable into a\n     <code>ControlledObservable</code> with the <code>controlled</code> operator. This forces the\n     Observable to respect pull <code>request</code>s from its observer rather than pushing items on\n     its own initiative.\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/bp.stopAndWait.png\" style=\"width:100%;\" alt=\"stopAndWait\">\n     <figcaption><p>\n      As an alternative to using <code>request</code> to pull items from a\n      <code>ControlledObservable</code>, you may apply the <code>stopAndWait</code> operator to it.\n      This operator will request a new item from the Observable each time its observers&#x2019;\n      <code>onNext</code> routine receives the latest item.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/bp.windowed.png\" style=\"width:100%;\" alt=\"windowed\">\n     <figcaption><p>\n      A second possibility is to use the <code>windowed(</code><i>n</i><code>)</code>. This behaves\n      similarly to <code>stopAndWait</code> but has an internal buffer of <i>n</i> items, which\n      allows the <code>ControlledObservable</code> to run somewhat ahead of the observer from time\n      to time. <code>windowed(1)</code> is equivalent to <code>stopAndWait</code>.\n     </p></figcaption>\n    </figure>\n    <p>\n     There are also two operators that convert an ordinary Observable into at\n     <code>PausableObservable</code>.\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/bp.pausable.png\" style=\"width:100%;\" alt=\"pausable\">\n     <figcaption><p>\n      If you call the <code>pause</code> method of a <code>PausableObservable</code> created with\n      the <code>pausable</code> operator, it will drop (ignore) any items emitted by the underlying\n      source Observable until such time as you call its <code>resume</code> method, whereupon it\n      will continue to pass along emitted items to its observers.\n     </p>\n     <h4>See Also</h4>\n     <ul>\n      <li><a href=\"http://rxmarbles.com/#pausable\">RxMarbles: <code>pausable</code></a></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/bp.pausableBuffered.png\" style=\"width:100%;\" alt=\"pausableBuffered\">\n     <figcaption><p>\n      If you call the <code>pause</code> method of a <code>PausableObservable</code> created with\n      the <code>pausableBuffered</code> operator, it will buffer any items emitted by the underlying\n      source Observable until such time as you call its <code>resume</code> method, whereupon it\n      will emit those buffered items and then continue to pass along any additional emitted items to\n      its observers.\n     </p>\n     <h4>See Also</h4>\n     <ul>\n      <li><a href=\"http://rxmarbles.com/#pausableBuffered\">RxMarbles: <code>pausableBuffered</code></a></li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>onBackpressureBuffer onBackpressureDrop onBackpressureLatest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"backpressure operators"},{"path":"/documentation/operators/takewhile.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#conditional\">Conditional and Boolean</a></li>\n  <li class=\"active\">TakeWhile</li>\n</ol>\n\n   <h1>TakeWhile</h1>\n   <h3>mirror items emitted by an Observable until a specified condition becomes false</h3>\n\n   <figure>\n    <img src=\"images/takeWhile.c.png\" style=\"width:100%;\" alt=\"TakeWhile\">\n    <figcaption><p>\n     The <span class=\"operator\">TakeWhile</span> mirrors the source Observable until such time as some condition\n     you specify becomes false, at which point <span class=\"operator\">TakeWhile</span> stops mirroring the\n     source Observable and terminates its own Observable.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/skip.html\"><span class=\"operator\">Skip</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skiplast.html\"><span class=\"operator\">SkipLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipuntil.html\"><span class=\"operator\">SkipUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipwhile.html\"><span class=\"operator\">SkipWhile</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/take.html\"><span class=\"operator\">Take</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takelast.html\"><span class=\"operator\">TakeLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takeuntil.html\"><span class=\"operator\">TakeUntil</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html#SkipWhileTakeWhile\"><cite>Introduction to Rx</cite>: SkipWhile and TakeWhile</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>take-while</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>takeWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/takeWhile.png\" style=\"width:100%;\" alt=\"takeWhile\">\n      <figcaption><p>\n       The <code>takeWhile</code> operator returns an Observable that mirrors the behavior of the source\n       Observable until such time as a function, applied to an item emitted by that Observable, returns\n       <code>false</code>, whereupon the new Observable terminates with an <code>onCompleted</code>\n       notification.\n      </p>\n      <div class=\"code groovy\"><pre>\nnumbers = Observable.from( [1, 2, 3, 4, 5, 6, 7, 8, 9] );\n\nnumbers.takeWhile({ ((it &lt; 6) || (0 == (it % 2))) }).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n1\n2\n3\n4\n5\n6\nSequence complete</pre></div>\n      <p>\n       <code>takeWhile</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeWhile(rx.functions.Func1)\"><code>takeWhile(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>takeWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/takeWhile.png\" style=\"width:100%;\" alt=\"takeWhile\">\n      <figcaption><p>\n       The <code>takeWhile</code> operator returns an Observable that mirrors the behavior of the source\n       Observable until such time as a function, applied to an item emitted by that Observable, returns\n       <code>false</code>, whereupon the new Observable terminates with an <code>onCompleted</code>\n       notification.\n      </p><p>\n       <code>takeWhile</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeWhile(rx.functions.Func1)\"><code>takeWhile(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>takeWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>takeWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/takeWhile.png\" style=\"width:100%;\" alt=\"takeWhile\">\n      <figcaption><p>\n       RxJS implements the <code>takeWhile</code> operator. You pass it a function that governs the takeping\n       process. <code>takeWhile</code> calls that function for each item emitted by the source Observable\n       until such time as the function returns <code>false</code>, whereupon <code>takeWhile</code> stops\n       mirroring the source Observable (starting with that item) and issues an <code>onCompleted</code>\n       notification. The function takes three parameters:\n      </p>\n      <ol>\n       <li>the emitted item</li>\n       <li>the zero-based index of that item in the sequence of emissions</li>\n       <li>the source Observable</li>\n      </ol>\n      <p>\n       You may optionally pass a second parameter to <code>takeWhile</code>. If so, that item will also be\n       available to your predicate function as &#x201C;<code>this</code>&#x201D;.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(1, 5)\n    .takeWhile(function (x) { return x &lt; 3; });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nCompleted</pre></div>\n      <p>\n       <code>takeWhile</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>takeWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>TakeWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>takeWhile takeWhileWithIndex</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>takeWhile</code>.\n    </p>\n    <p>\n    Returns elements from an observable sequence as long as a specified condition is true.  It takes as a parameter a a callback to test each source element for a condition.  The callback predicate is called with the value of the element.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/take/takeWhile.php\n\n\n$source = \\Rx\\Observable::range(1, 5)\n    -&gt;takeWhile(function ($x) {\n        return $x &lt; 3;\n    });\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 2\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>takeWhileWithIndex</code>.\n    </p>\n    <p>\n    Returns elements from an observable sequence as long as a specified condition is true.  It takes as a parameter a a callback to test each source element for a condition.  The callback predicate is called with the index and the value of the element.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/take/takeWhileWithIndex.php\n\n\n$source = \\Rx\\Observable::range(1, 5)\n    -&gt;takeWhileWithIndex(function ($i) {\n        return $i &lt; 3;\n    });\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 2\nNext value: 3\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>take_while</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>take_while take_while_with_index</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>takeWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>takeWhile takeWhileWithIndex</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"TakeWhile"},{"path":"/documentation/operators/distinct.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">Distinct</li>\n</ol>\n\n   <h1>Distinct</h1>\n   <h3>suppress duplicate items emitted by an Observable</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"distinct\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Distinct</span> operator filters an Observable by only allowing items through\n     that have not already been emitted.\n    </p><p>\n     In some implementations there are variants that allow you to adjust the criteria by which two items are\n     considered &#x201C;distinct.&#x201D; In some, there is a variant of the operator that only compares an item\n     against its immediate predecessor for distinctness, thereby filtering only <em>consecutive</em> duplicate\n     items from the sequence.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/filter.html\"><span class=\"operator\">Filter</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html#Distinct\"><cite>Introduction to Rx</cite>: Distinct and DistinctUntilChanged</a></li>\n    <li><a href=\"http://rxmarbles.com/#distinct\">RxMarbles: <code>distinct</code></a></li>\n    <li><a href=\"http://rxmarbles.com/#distinctUntilChanged\">RxMarbles: <code>distinctUntilChanged</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>distinct</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>distinct_until_changed</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>distinct distinctUntilChanged</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/distinct.png\" style=\"width:100%;\" alt=\"distinct\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>distinct</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinct()\"><code>distinct()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/distinct.key.png\" style=\"width:100%;\" alt=\"distinct\">\n      <figcaption><p>\n       There is also a variant of this operator that takes a function as a parameter. This function\n       operates on items emitted by the source Observable to generate a &#x201C;key.&#x201D; It is\n       these keys, then, and not the items themselves, that <code>distinct</code> will compare to\n       determine whether or not two items are distinct.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinct(rx.functions.Func1)\"><code>distinct(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/distinctUntilChanged.png\" style=\"width:100%;\" alt=\"distinctUntilChanged\">\n      <figcaption><p>\n       RxGroovy also implements the <code>distinctUntilChanged</code> operator. It only compares\n       emitted items from the source Observable against their immediate predecessors in order to\n       determine whether or not they are distinct.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinctUntilChanged()\"><code>distinctUntilChanged()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/distinctUntilChanged.key.png\" style=\"width:100%;\" alt=\"distinctUntilChanged\">\n      <figcaption><p>\n       As with <code>distinct</code>, there is also a version of <code>distinctUntilChanged</code>\n       that accepts a key selector function and that uses the resulting key to determine whether or\n       not two adjacently-emitted items are distinct.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinctUntilChanged(rx.functions.Func1)\"><code>distinctUntilChanged(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>distinct</code> and <code>distinctUntilChanged</code> do not by default operate on any\n      particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>distinct distinctUntilChanged</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/distinct.png\" style=\"width:100%;\" alt=\"distinct\">\n      <figcaption><p>\n       RxJava implements this operator as <code>distinct</code>.\n      </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable.just(1, 2, 1, 1, 2, 3)\n          .distinct()\n          .subscribe(new Subscriber&lt;Integer&gt;() {\n        @Override\n        public void onNext(Integer item) {\n            System.out.println(&quot;Next: &quot; + item);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            System.err.println(&quot;Error: &quot; + error.getMessage());\n        }\n\n        @Override\n        public void onCompleted() {\n            System.out.println(&quot;Sequence complete.&quot;);\n        }\n    });</pre></div>\n     <div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 3\nSequence complete.</pre></div>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinct()\"><code>distinct()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/distinct.key.png\" style=\"width:100%;\" alt=\"distinct\">\n      <figcaption><p>\n       There is also a variant of this operator that takes a function as a parameter. This function\n       operates on items emitted by the source Observable to generate a &#x201C;key.&#x201D; It is\n       these keys, then, and not the items themselves, that <code>distinct</code> will compare to\n       determine whether or not two items are distinct.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinct(rx.functions.Func1)\"><code>distinct(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/distinctUntilChanged.png\" style=\"width:100%;\" alt=\"distinctUntilChanged\">\n      <figcaption><p>\n       RxJava also implements the <code>distinctUntilChanged</code> operator. It only compares\n       emitted items from the source Observable against their immediate predecessors in order to\n       determine whether or not they are distinct.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinctUntilChanged()\"><code>distinctUntilChanged()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/distinctUntilChanged.key.png\" style=\"width:100%;\" alt=\"distinctUntilChanged\">\n      <figcaption><p>\n       As with <code>distinct</code>, there is also a version of <code>distinctUntilChanged</code>\n       that accepts a key selector function and that uses the resulting key to determine whether or\n       not two adjacently-emitted items are distinct.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#distinctUntilChanged(rx.functions.Func1)\"><code>distinctUntilChanged(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>distinct</code> and <code>distinctUntilChanged</code> do not by default operate on any\n      particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>distinct distinctUntilChanged</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>distinct distinctUntilChanged</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/distinct.png\" style=\"width:100%;\" alt=\"distinct\">\n      <figcaption><p>\n       In RxJS, the <code>distinct</code> operator has two optional parameters:\n      </p>\n      <ol>\n       <li>a function that accepts an item emitted by the source Observable and returns a <i>key</i> which will be used instead of the item itself when comparing two items for distinctness</li>\n       <li>a function that accepts two items (or two keys) and compares them for distinctness, returning <code>false</code> if they are distinct (an equality function is the default if you do not supply your own function here)</li>\n      </ol>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n/* Without key selector */\nvar source = Rx.Observable.fromArray([\n        42, 24, 42, 24\n    ])\n    .distinct();\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x.toString()); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 42\nNext: 24\nCompleted</pre></div>\n      <div class=\"code javascript\"><pre>\n/* With key selector */\nvar source = Rx.Observable.fromArray([\n        {value: 42}, {value: 24}, {value: 42}, {value: 24}\n    ])\n    .distinct(function (x) { return x.value; });\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x.toString());\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n      <div class=\"output\"><pre>\nNext: { value: 42 }\nNext: { value: 24 }\nCompleted</pre></div></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/distinctUntilChanged.png\" style=\"width:100%;\" alt=\"distinctUntilChanged\">\n      <figcaption><p>\n       RxJS also has a <code>distinctUntilChanged</code> operator. It only compares emitted items\n       from the source Observable against their immediate predecessors in order to determine whether\n       or not they are distinct. It takes the same two optional parameters as the\n       <code>distinct</code> operator.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n/* Without key selector */\nvar source = Rx.Observable.fromArray([\n        24, 42, 24, 24\n    ])\n    .distinctUntilChanged();\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 24\nNext: 42\nNext: 24\nCompleted</pre></div>\n      <div class=\"code javascript\"><pre>\n/* With key selector */\nvar source = Rx.Observable.fromArray([\n        {value: 24}, {value: 42}, {value: 42}, {value: 24}\n    ])\n    .distinctUntilChanged(function (x) { return x.value; });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x.toString()); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: { value: 24 }\nNext: { value: 42 }\nNext: { value: 24 }\nCompleted</pre></div></figcaption>\n     </figure>\n     <p>\n      <code>distinct</code> and <code>distinctUntilChanged</code> are found in each of the following\n      distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>distinct distinctUntilChanged</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Distinct DistinctUntilChanged</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>distinct distinctKey distinctUntilChanged distinctUntilKeyChanged</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>distinct</code>.\n    </p>\n    <p>\n    Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer. Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/distinct/distinct.php\n\n$source = \\Rx\\Observable::fromArray([\n    42, 24, 42, 24\n])-&gt;distinct();\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nNext value: 24\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>distinctKey</code>.\n    </p>\n    <p>\n    Variant of distinct that takes a key selector\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/distinct/distinctKey.php\n\n$source = \\Rx\\Observable::fromArray([\n    [&apos;id&apos; =&gt; &apos;42&apos;],\n    [&apos;id&apos; =&gt; &apos;24&apos;],\n    [&apos;id&apos; =&gt; &apos;42&apos;],\n    [&apos;id&apos; =&gt; &apos;24&apos;]\n])\n    -&gt;distinctKey(function ($x) {\n        return $x[&apos;id&apos;];\n    })\n    -&gt;map(function ($x) {\n        return $x[&apos;id&apos;];\n    });\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nNext value: 24\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>distinctUntilChanged</code>.\n    </p>\n    <p>\n    A variant of distinct that only compares emitted items from the source Observable against their immediate predecessors in order to determine whether or not they are distinct.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/distinct/distinctUntilChanged.php\n\n$source = \\Rx\\Observable::fromArray([\n    24, 42, 24, 24\n])-&gt;distinctUntilChanged();\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 24\nNext value: 42\nNext value: 24\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>distinctUntilKeyChanged</code>.\n    </p>\n    <p>\n    Variant of distinctUntilChanged that takes a key selector and the comparer.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/distinct/distinctUntilKeyChanged.php\n\n$source = \\Rx\\Observable::fromArray([\n    [&apos;id&apos; =&gt; &apos;24&apos;],\n    [&apos;id&apos; =&gt; &apos;42&apos;],\n    [&apos;id&apos; =&gt; &apos;24&apos;],\n    [&apos;id&apos; =&gt; &apos;24&apos;]\n])\n    -&gt;distinctUntilKeyChanged(function ($x) {\n        return $x[&apos;id&apos;];\n    })\n    -&gt;map(function ($x) {\n        return $x[&apos;id&apos;];\n    });\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 24\nNext value: 42\nNext value: 24\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>distinct distinct_until_changed</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>distinct distinct_until_changed</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>distinct distinctUntilChanged</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>distinctUntilChanged</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Distinct"},{"path":"/documentation/operators/takelast.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">TakeLast</li>\n</ol>\n\n   <h1>TakeLast</h1>\n   <h3>emit only the final <i>n</i> items emitted by an Observable</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"takeLast\"></rx-marbles>\n    <figcaption><p>\n     You can emit only the final <i>n</i> items emitted by an Observable and ignore those items that come\n     before them, by modifying the Observable with the <span class=\"operator\">TakeLast</span> operator.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/last.html\"><span class=\"operator\">Last</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skip.html\"><span class=\"operator\">Skip</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skiplast.html\"><span class=\"operator\">SkipLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipuntil.html\"><span class=\"operator\">SkipUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipwhile.html\"><span class=\"operator\">SkipWhile</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/take.html\"><span class=\"operator\">Take</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takeuntil.html\"><span class=\"operator\">TakeUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takewhile.html\"><span class=\"operator\">TakeWhile</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html#SkipLastTakeLast\"><cite>Introduction to Rx</cite>: SkipLast and TakeLast</a></li>\n    <li><a href=\"http://rxmarbles.com/#takeLast\">RxMarbles: <code>takeLast</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>next</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>takeLast takeLastBuffer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/takeLast.n.png\" style=\"width:100%;\" alt=\"takeLast\">\n      <figcaption><p>\n       You can emit only the final <i>n</i> items emitted by an Observable and ignore those items that precede\n       them, by modifying the Observable with the <code>takeLast(<i>n</i>)</code> operator. Note that this will\n       delay the emission of any item from the source Observable until the source Observable completes.\n      </p>\n     <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\nnumbers = Observable.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\nnumbers.takeLast(2).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n8\n9\nSequence complete</pre></div>\n      <p>\n       This variant of <code>takeLast</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int)\"><code>takeLast(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/takeLast.t.png\" style=\"width:100%;\" alt=\"takeLast\">\n      <figcaption><p>\n       There is also a variant of <code>takeLast</code> that takes a temporal duration rather than a quantity of\n       items. It emits only those items that are emitted during that final duration of the source\n       Observable&#x2019;s lifespan. You set this duration by passing in a length of time and the time units\n       this length is denominated in as parameters to <code>takeLast</code>.\n      </p><p>\n       Note that this will delay the emission of any item from the source Observable until the source Observable\n       completes.\n      </p><p>\n       This variant of <code>takeLast</code> by default operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you may also pass in a Scheduler of your choosing as an\n       optional third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit)\"><code>takeLast(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>takeLast(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/takeLast.tn.png\" style=\"width:100%;\" alt=\"takeLast\">\n      <figcaption><p>\n       There is also a variant that combines the two methods. It emits the minimum of the number of items\n       emitted during a specified time window <em>or</em> a particular count of items.\n      </p><p>\n       This variant of <code>takeLast</code> by default operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you may also pass in a Scheduler of your choosing as an\n       optional fourth parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit)\"><code>takeLast(int,long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>takeLast(int,long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/takeLastBuffer.png\" style=\"width:100%;\" alt=\"takeLastBuffer\">\n      <figcaption><p>\n       There is also an operator called <code>takeLastBuffer</code>. It exists in the same set of variants\n       as described above for <code>takeLast</code>, and only differs in behavior by emitting its items not\n       individually but collected into a single <code>List</code> of items that is emitted as a single item.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int)\"><code>takeLastBuffer(int)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(long,%20java.util.concurrent.TimeUnit)\"><code>takeLastBuffer(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>takeLastBuffer(long,TimeUnit,Scheduler)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int,%20long,%20java.util.concurrent.TimeUnit)\"><code>takeLastBuffer(int,long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>takeLastBuffer(int,long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>takeLast takeLastBuffer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/takeLast.n.png\" style=\"width:100%;\" alt=\"takeLast\">\n      <figcaption><p>\n       You can emit only the final <i>n</i> items emitted by an Observable and ignore those items that precede\n       them, by modifying the Observable with the <code>takeLast(<i>n</i>)</code> operator. Note that this will\n       delay the emission of any item from the source Observable until the source Observable completes.\n      </p><p>\n       This variant of <code>takeLast</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int)\"><code>takeLast(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/takeLast.t.png\" style=\"width:100%;\" alt=\"takeLast\">\n      <figcaption><p>\n       There is also a variant of <code>takeLast</code> that takes a temporal duration rather than a quantity of\n       items. It emits only those items that are emitted during that final duration of the source\n       Observable&#x2019;s lifespan. You set this duration by passing in a length of time and the time units\n       this length is denominated in as parameters to <code>takeLast</code>.\n      </p><p>\n       Note that this will delay the emission of any item from the source Observable until the source Observable\n       completes.\n      </p><p>\n       This variant of <code>takeLast</code> by default operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you may also pass in a Scheduler of your choosing as an\n       optional third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit)\"><code>takeLast(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>takeLast(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/takeLast.tn.png\" style=\"width:100%;\" alt=\"takeLast\">\n      <figcaption><p>\n       There is also a variant that combines the two methods. It emits the minimum of the number of items\n       emitted during a specified time window <em>or</em> a particular count of items.\n      </p><p>\n       This variant of <code>takeLast</code> by default operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you may also pass in a Scheduler of your choosing as an\n       optional fourth parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit)\"><code>takeLast(int,long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLast(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>takeLast(int,long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/takeLastBuffer.png\" style=\"width:100%;\" alt=\"takeLastBuffer\">\n      <figcaption><p>\n       There is also an operator called <code>takeLastBuffer</code>. It exists in the same set of variants\n       as described above for <code>takeLast</code>, and only differs in behavior by emitting its items not\n       individually but collected into a single <code>List</code> of items that is emitted as a single item.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int)\"><code>takeLastBuffer(int)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(long,%20java.util.concurrent.TimeUnit)\"><code>takeLastBuffer(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>takeLastBuffer(long,TimeUnit,Scheduler)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int,%20long,%20java.util.concurrent.TimeUnit)\"><code>takeLastBuffer(int,long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeLastBuffer(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>takeLastBuffer(int,long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>takeLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>takeLast takeLastBuffer takeLastBufferWithTime takeLastWithTime</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/takeLast.n.png\" style=\"width:100%;\" alt=\"takeLast\">\n      <figcaption><p>\n       You can emit only the final <i>n</i> items emitted by an Observable and ignore those items that precede\n       them, by modifying the Observable with the <code>takeLast(<i>n</i>)</code> operator. Note that this will\n       delay the emission of any item from the source Observable until that Observable completes.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 5)\n    .takeLast(3);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 2\nNext: 3\nNext: 4\nCompleted</pre></div>\n      <p>\n       <code>takeLast</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.alljs</code></li>\n       <li><code>rx.all.compatjs</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/takeLastWithTime.png\" style=\"width:100%;\" alt=\"takeLastWithTime\">\n      <figcaption><p>\n       The <code>takeLastWithTime</code> operator takes a temporal duration rather than a quantity of items. It\n       emits only those items that are emitted during that final duration of the source Observable&#x2019;s\n       lifespan. You set this duration by passing in a number of milliseconds as a parameter to\n       <code>takeLastWithTime</code>.\n      </p><p>\n       Note that the mechanism by which this is implemented will delay the emission of any item from the source\n       Observable until that Observable completes.\n      </p><p>\n       <code>takeLastWithTime</code> by default operates the timer on the <code>timeout</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> and emits items on the <code>currentThread</code> Scheduler,\n       but you may also pass in Schedulers of your choosing to override these, as an optional second and third\n       parameters, respectively.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(0, 1000)\n    .take(10)\n    .takeLastWithTime(5000);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 5\nNext: 6\nNext: 7\nNext: 8\nNext: 9\nCompleted</pre></div>\n      <p>\n       <code>takeLastWithTime</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/takeLastBuffer.png\" style=\"width:100%;\" alt=\"takeLastBuffer\">\n      <figcaption><p>\n       There is also an operator called <code>takeLastBuffer</code>. It differs in behavior from\n       <code>takeLast</code> by emitting its items not individually but collected into a single array of items\n       that is emitted as a single item.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 5)\n    .takeLastBuffer(3);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 2,3,4\nCompleted</pre></div>\n      <p>\n       <code>takeLastBuffer</code> is found in each of the following distributions:\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/takeLastBufferWithTime.png\" style=\"width:100%;\" alt=\"takeLastBufferWithTime\">\n      <figcaption><p>\n       <code>takeLastBuffer</code> also has its duration-based variant, <code>takeLastBufferWithTime</code>,\n       which is similar to <code>takeLastWithTime</code> except that it emits its items not individually but\n       collected into a single array of items that is emitted as a single item.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable\n    .timer(0, 1000)\n    .take(10)\n    .takeLastBufferWithTime(5000);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 5,6,7,8,9\nCompleted</pre></div>\n      <p>\n       <code>takeLastBufferWithTime</code> is found in each of the following distributions:\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>takeLast takeLastBuffer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>TakeLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>takeLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>takeLast</code>.\n    </p>\n    <p>\n    Returns a specified number of contiguous elements from the end of an observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/take/takeLast.php\n\n$source = \\Rx\\Observable::range(0, 5)\n    -&gt;takeLast(3);\n\n$source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 2\nNext value: 3\nNext value: 4\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>take_last take_last_buffer take_last_with_time</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>take_last take_last_buffer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>tail takeRight</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>takeLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"TakeLast"},{"path":"/documentation/operators/refcount.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#connectable\">Connectable</a></li>\n  <li class=\"active\">RefCount</li>\n</ol>\n\n<h1>RefCount</h1>\n<h3>make a Connectable Observable behave like an ordinary Observable</h3>\n\n<figure>\n <img src=\"images/publishRefCount.c.png\" style=\"width:100%;\" alt=\"RefCount\">\n <figcaption><p>\n  A <dfn>connectable Observable</dfn> resembles an ordinary Observable, except that it does not begin\n  emitting items when it is subscribed to, but only when the <span class=\"operator\">Connect</span>\n  operator is applied to it. In this way you can prompt an Observable to begin emitting items at a\n  time of your choosing.\n </p><p>\n  The <span class=\"operator\">RefCount</span> operator automates the process of connecting to and disconnecting\n  from a connectable Observable. It operates on a connectable Observable and returns an ordinary Observable.\n  When the first observer subscribes to this Observable, <span class=\"operator\">RefCount</span> connects to the \n  underlying connectable Observable. <span class=\"operator\">RefCount</span> then keeps track of how many other\n  observers subscribe to it and does not disconnect from the underlying connectable Observable until the last\n  observer has done so.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/connect.html\"><span class=\"operator\">Connect</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/publish.html\"><span class=\"operator\">Publish</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/replay.html\"><span class=\"operator\">Replay</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/14_HotAndColdObservables.html#RefCount\"><cite>Introduction to Rx</cite>: RefCount</a></li>\n <li><a href=\"http://nerds.weddingpartyapp.com/tech/2015/01/21/rxjava-share-publish-refcount-and-all-that-jazz/\"><cite>Wedding Party</cite>: Share, Publish, Refcount, and All That Jazz</a> by Kaushik Gopal</li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>publish</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>refCount share</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/publishRefCount.png\" style=\"width:100%;\" alt=\"refCount\">\n     <figcaption><p>\n      RxGroovy implements this operator as <code>refCount</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#refCount()\"><code>refCount()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <p>\n     There is also a <code>share</code> operator, which is the equivalent of applying both the\n     <code>publish</code> and <code>refCount</code> operators to an Observable, in that order.\n    </p>\n    <ul>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#share()\"><code>share()</code></a></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>refCount share</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/publishRefCount.png\" style=\"width:100%;\" alt=\"refCount\">\n     <figcaption><p>\n      RxJava implements this operator as <code>refCount</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#refCount()\"><code>refCount()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <p>\n     There is also a <code>share</code> operator, which is the equivalent of applying both the\n     <code>publish</code> and <code>refCount</code> operators to an Observable, in that order.\n    </p>\n    <ul>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#share()\"><code>share()</code></a></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>share</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>refCount share shareValue</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/publishRefCount.png\" style=\"width:100%;\" alt=\"refCount\">\n     <figcaption><p>\n      RxJava implements this operator as <code>refCount</code>.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar interval = Rx.Observable.interval(1000);\n\nvar source = interval\n    .take(2)\n    .doAction(function (x) { console.log(&apos;Side effect&apos;); });\n\nvar published = source.publish().refCount();\n\npublished.subscribe(createObserver(&apos;SourceA&apos;));\npublished.subscribe(createObserver(&apos;SourceB&apos;));\n\nfunction createObserver(tag) {\n    return Rx.Observer.create(\n        function (x) { console.log(&apos;Next: &apos; + tag + x); },\n        function (err) { console.log(&apos;Error: &apos; + err); },\n        function () { console.log(&apos;Completed&apos;); });\n}</pre></div><div class=\"output\"><pre>\nSide effect\nNext: SourceA0\nNext: SourceB0\nSide effect\nNext: SourceA1\nNext: SourceB1\nCompleted\nCompleted</pre></div>\n     <p>\n      <code>refCount</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.binding.js</code> (requires <code>rx.js</code>, <code>rx.compat.js</code>, <code>rx.lite.js</code>, or <code>rx.lite.compat.js</code>)</li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <p>\n     There is also a <code>share</code> operator, which is the equivalent of applying both the\n     <code>publish</code> and <code>refCount</code> operators to an Observable, in that order.\n     A variant called <code>shareValue</code> takes as a parameter a single item that it will\n     emit to any subscribers before beginning to emit items from the source Observable.\n    </p>\n    <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar interval = Rx.Observable.interval(1000);\n\nvar source = interval\n    .take(2)\n    .do(\n        function (x) { console.log(&apos;Side effect&apos;); });\n\nvar published = source.share();\n\n// When the number of observers subscribed to published observable goes from\n// 0 to 1, we connect to the underlying observable sequence.\npublished.subscribe(createObserver(&apos;SourceA&apos;));\n// When the second subscriber is added, no additional subscriptions are added to the\n// underlying observable sequence. As a result the operations that result in side\n// effects are not repeated per subscriber.\npublished.subscribe(createObserver(&apos;SourceB&apos;));\n\nfunction createObserver(tag) {\n    return Rx.Observer.create(\n        function (x) { console.log(&apos;Next: &apos; + tag + x); },\n        function (err) { console.log(&apos;Error: &apos; + err); },\n        function () { console.log(&apos;Completed&apos;); });\n}</pre></div><div class=\"output\"><pre>\nSide effect\nNext: SourceA0\nNext: SourceB0\nSide effect\nNext: SourceA1\nNext: SourceB1\nCompleted</pre></div>\n     <p>\n      <code>share</code> and <code>shareValue</code> are found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.binding.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>refCount share</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>RefCount</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>share shareValue</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>share</code>.\n    </p>\n    <p>\n    Returns an observable sequence that shares a single subscription to the underlying sequence.  This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/share/share.php\n\n$loop = \\React\\EventLoop\\Factory::create();\n$scheduler  = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n//With Share\n$source = \\Rx\\Observable::interval(1000, $scheduler)\n    -&gt;take(2)\n    -&gt;doOnNext(function ($x) {\n        echo &quot;Side effect\\n&quot;;\n    });\n\n$published = $source-&gt;share();\n\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceA &apos;));\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceB &apos;));\n\n$loop-&gt;run();\n\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nSide effect\nSourceA Next value: 0\nSourceB Next value: 0\nSide effect\nSourceA Next value: 1\nSourceB Next value: 1\nSourceA Complete!\nSourceB Complete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>shareValue</code>.\n    </p>\n    <p>\n    Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.  This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/share/shareValue.php\n\n$loop = \\React\\EventLoop\\Factory::create();\n$scheduler  = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$source = \\Rx\\Observable::interval(1000, $scheduler)\n    -&gt;take(2)\n    -&gt;doOnNext(function ($x) {\n        echo &quot;Side effect\\n&quot;;\n    });\n\n$published = $source-&gt;shareValue(42);\n\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceA &apos;));\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceB &apos;));\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nSourceA Next value: 42\nSourceB Next value: 42\nSide effect\nSourceA Next value: 0\nSourceB Next value: 0\nSide effect\nSourceA Next value: 1\nSourceB Next value: 1\nSourceA Complete!\nSourceB Complete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>ref_count</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>refCount share</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>refCount</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"RefCount"},{"path":"/documentation/operators/timestamp.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#utility\">Utility</a></li>\n  <li class=\"active\">Timestamp</li>\n</ol>\n\n   <h1>Timestamp</h1>\n   <h3>attach a timestamp to each item emitted by an Observable indicating when it was emitted</h3>\n   <figure>\n    <img src=\"images/timestamp.c.png\" style=\"width:100%;\" alt=\"Timestamp\">\n    <figcaption><p>\n     The <span class=\"operator\">Timestamp</span> operator attaches a timestamp to each item emitted by the\n     source Observable before reemitting that item in its own sequence. The timestamp indicates at what time\n     the item was emitted.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/timestamp.html\"><span class=\"operator\">Timestamp</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/08_Transformation.html#TimeStampAndTimeInterval\"><cite>Introduction to Rx</cite>: Timestamp and TimeInterval</a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc35\"><cite>101 Rx Samples</cite>: Timestamp</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>timestamp</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/timestamp.png\" style=\"width:100%;\" alt=\"timestamp\">\n      <figcaption><p>\n       The <code>timestamp</code> method converts an Observable that emits items of type <i>T</i> into one that\n       emits objects of type <code>Timestamped&lt;<i>T</i>&gt;</code>, where each such object is stamped with\n       the time at which it was originally emitted.\n      </p>\n      <div class=\"code groovy\"><pre>\ndef myObservable = Observable.range(1, 1000000).filter({ 0 == (it % 200000) });\n\nmyObservable.timestamp().subscribe(\n  { println(it.toString()); },               // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\nTimestamped(timestampMillis = 1369252582698, value = 200000)\nTimestamped(timestampMillis = 1369252582740, value = 400000)\nTimestamped(timestampMillis = 1369252582782, value = 600000)\nTimestamped(timestampMillis = 1369252582823, value = 800000)\nTimestamped(timestampMillis = 1369252582864, value = 1000000)\nSequence complete</pre></div>\n      <p>\n       <code>timestamp</code> by default operates on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> but also has a variant\n       that allows you to choose the Scheduler by passing it in as a parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timestamp()\"><code>timestamp()</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timestamp(rx.Scheduler)\"><code>timestamp(Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>timestamp</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/timestamp.png\" style=\"width:100%;\" alt=\"timestamp\">\n      <figcaption><p>\n       The <code>timestamp</code> method converts an Observable that emits items of type <i>T</i> into one that\n       emits objects of type <code>Timestamped&lt;<i>T</i>&gt;</code>, where each such object is stamped with\n       the time at which it was originally emitted.\n      </p><p>\n       <code>timestamp</code> by default operates on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> but also has a variant\n       that allows you to choose the Scheduler by passing it in as a parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timestamp()\"><code>timestamp()</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timestamp(rx.Scheduler)\"><code>timestamp(Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>timestamp</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>timestamp</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/timestamp.png\" style=\"width:100%;\" alt=\"timestamp\">\n      <figcaption><p>\n       The <code>timestamp</code> method attaches a timestamp to each item emitted by the source Observable\n       before emitting that item as part of its own sequence. The timestamp indicates when the item was\n       emitted by the source Observable.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(0, 1000)\n    .timestamp()\n    .map(function (x) { return x.value + &apos;:&apos; + x.timestamp; })\n    .take(5);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0:1378690776351\nNext: 1:1378690777313\nNext: 2:1378690778316\nNext: 3:1378690779317\nNext: 4:1378690780319\nCompleted</pre></div>\n      <p>\n       <code>timestamp</code> by default operates on the <code>timeout</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but also has a\n       variant that allows you to specify the Scheduler by passing it in as a parameter.\n      </p><p>\n       <code>timestamp</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>timestamp</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Timestamp</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>timestamp</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>timestamp</code>.\n    </p>\n    <p>\n    Records the timestamp for each value in an observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/timestamp/timestamp.php\n\n$loop = new \\React\\EventLoop\\StreamSelectLoop();\n\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$source = \\Rx\\Observable::interval(1000, $scheduler)\n    -&gt;timestamp()\n    -&gt;map(function (\\Rx\\Timestamped $x) {\n        return $x-&gt;getValue() . &apos;:&apos; . $x-&gt;getTimestampMillis();\n    })\n    -&gt;take(5);\n\n$source-&gt;subscribe($createStdoutObserver());\n\n$loop-&gt;run();\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0:1460781738354\nNext value: 1:1460781739358\nNext value: 2:1460781740359\nNext value: 3:1460781741362\nNext value: 4:1460781742367\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>timestamp</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>timestamp</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Timestamp"},{"path":"/documentation/operators/amb.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#conditional\">Conditional and Boolean</a></li>\n  <li class=\"active\">Amb</li>\n</ol>\n\n   <h1>Amb</h1>\n   <h3>given two or more source Observables, emit all of the items from only the first of these Observables to emit an item or notification</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"amb\"></rx-marbles>\n    <figcaption><p>\n     When you pass a number of source Observables to <span class=\"operator\">Amb</span>, it will pass through the\n     emissions and notifications of exactly one of these Observables: the first one that sends a notification to\n     <span class=\"operator\">Amb</span>, either by emitting an item or sending an <code>onError</code> or\n     <code>onCompleted</code> notification. <span class=\"operator\">Amb</span> will ignore and discard the\n     emissions and notifications of all of the other source Observables.\n    </p></figcaption>\n   </figure>\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://rxmarbles.com/#amb\">RxMarbles: <code>amb</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>amb</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>amb ambWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/amb.png\" style=\"width:100%;\" alt=\"amb\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>amb</code>. It takes up to nine Observables\n       as individual parameters, or a single Iterable of Observables. There is also an instance\n       version of the operator, <code>ambWith</code>, so that, for example, instead of writing\n       <code>Observable.amb(o1,o2)</code> you could also write <code>o1.ambWith(o2)</code> for the\n       same effect.\n      </p><p>\n       This operator does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#amb(java.lang.Iterable)\"><code>amb(Iterable)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#amb(rx.Observable,%20rx.Observable)\"><code>amb(Observable,Observable)</code></a> (there are also versions that take up to nine Observable parameters)</li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#ambWith(rx.Observable)\"><code>ambWith(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>amb ambWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/amb.png\" style=\"width:100%;\" alt=\"amb\">\n      <figcaption><p>\n       RxJava 1.x implements this operator as <code>amb</code>. It takes up to nine Observables as\n       individual parameters, or a single Iterable of Observables. There is also an instance\n       version of the operator, <code>ambWith</code>, so that, for example, instead of writing\n       <code>Observable.amb(o1,o2)</code> you could also write <code>o1.ambWith(o2)</code> for the\n       same effect.\n      </p><p>\n       This operator does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#amb(java.lang.Iterable)\"><code>amb(Iterable)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#amb(rx.Observable,%20rx.Observable)\"><code>amb(Observable,Observable)</code></a> (there are also versions that take up to nine Observable parameters)</li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#ambWith(rx.Observable)\"><code>ambWith(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>amb ambArray ambWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/amb.png\" style=\"width:100%;\" alt=\"amb\">\n      <figcaption><p>\n       RxJava 2.x implements this operator as <code>amb</code>. It takes an Iterable of Observables as\n       its parameter. You can also use <code>ambArray</code> to pass an array of Observables.\n       There is also an instance version of the operator, <code>ambWith</code>, so that, for example, instead\n       of writing <code>Observable.ambArray([o1,o2])</code> you could also write <code>o1.ambWith(o2)</code> for the\n       same effect.\n      </p><p>\n       This operator does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html#amb(java.lang.Iterable)\"><code>amb(Iterable)</code></a></li>\n       <li>Javadoc: <a href=\"Join the `vpn-lla@netflix.com` Google group, which you can find here: [http://go.netflix.com/vpn-lla](http://go.netflix.com/vpn-lla).\"><code>ambArray(Iterable)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html#ambWith(io.reactivex.ObservableSource)\"><code>ambWith(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>amb</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/amb.png\" style=\"width:100%;\" alt=\"amb\">\n      <figcaption><p>\n       RxJS implements this operator as <code>amb</code>. It takes a variable number of parameters,\n       which may be either Observables or Promises (or combinations of the two).\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n/* Using Observable sequences */\nvar source = Rx.Observable.amb(\n    Rx.Observable.timer(500).select(function () { return &apos;foo&apos;; }),\n    Rx.Observable.timer(200).select(function () { return &apos;bar&apos;; })\n);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: bar\nCompleted</pre></div>\n      <div class=\"code javascript\"><pre>\n/* Using Promises and Observables */\nvar source = Rx.Observable.amb(\n    RSVP.Promise.resolve(&apos;foo&apos;)\n    Rx.Observable.timer(200).select(function () { return &apos;bar&apos;; })\n);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: foo\nCompleted</pre></div></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>amb ambWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Amb</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>race</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>race</code>.\n    </p>\n    <p>\n    Propagates the observable sequence that reacts first.  Also known as &apos;amb&apos;.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/race/race.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$source = Rx\\Observable::race(\n    [\n        Rx\\Observable::timer(500)-&gt;map(function () {\n            return &apos;foo&apos;;\n        }),\n        Rx\\Observable::timer(200)-&gt;map(function () {\n            return &apos;bar&apos;;\n        })\n    ]\n);\n\n$source-&gt;subscribe($stdoutObserver, $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: bar\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>amb</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>amb</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>amb</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>amb</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Amb"},{"path":"/documentation/operators/take.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">Take</li>\n</ol>\n\n   <h1>Take</h1>\n   <h3>emit only the first <i>n</i> items emitted by an Observable</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"take\"></rx-marbles>\n    <figcaption><p>\n     You can emit only the first <i>n</i> items emitted by an Observable and then complete while ignoring the\n     remainder, by modifying the Observable with the <span class=\"operator\">Take</span> operator.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/first.html\"><span class=\"operator\">First</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skip.html\"><span class=\"operator\">Skip</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skiplast.html\"><span class=\"operator\">SkipLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipuntil.html\"><span class=\"operator\">SkipUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipwhile.html\"><span class=\"operator\">SkipWhile</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takelast.html\"><span class=\"operator\">TakeLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takeuntil.html\"><span class=\"operator\">TakeUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takewhile.html\"><span class=\"operator\">TakeWhile</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html#SkipAndTake\"><cite>Introduction to Rx</cite>: Skip and Take</a></li>\n    <li><a href=\"http://rxmarbles.com/#take\">RxMarbles: <code>take</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>take</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>take</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>limit take</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/take.png\" style=\"width:100%;\" alt=\"take\">\n      <figcaption><p>\n       In RxGroovy, this operator is implemented as <code>take</code>.\n      </p><p>\n       If you use the <code>take(<i>n</i>)</code> operator (or its synonym, <code>limit(<i>n</i>)</code>) on an\n       Observable, and that Observable emits fewer than <i>n</i> items before completing, the new,\n       <code>take</code>-modified Observable will not throw an exception or invoke <code>onError</code>, but\n       will merely emit this same fewer number of items before it completes.\n      </p>\n     <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\nnumbers = Observable.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\nnumbers.take(3).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n1\n2\n3\nSequence complete</pre></div>\n      <p>\n       This variant of <code>take</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(int)\"><code>take(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/take.t.png\" style=\"width:100%;\" alt=\"take\">\n      <figcaption><p>\n       There is also a variant of <code>take</code> that takes a temporal duration rather than a quantity of\n       items. It results in an Observable that emits only those items that are emitted during that initial\n       duration of the source Observable&#x2019;s lifespan. You set this duration by passing in a length of time\n       and the time units this length is denominated in as parameters to <code>take</code>.\n      </p><p>\n       This variant of <code>take</code> by default operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you may also pass in a Scheduler of your choosing as an\n       optional third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit)\"><code>take(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>take(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>limit take</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/take.png\" style=\"width:100%;\" alt=\"take\">\n      <figcaption><p>\n       In RxJava, this operator is implemented as <code>take</code>.\n      </p><p>\n       If you use the <code>take(<i>n</i>)</code> operator (or its synonym, <code>limit(<i>n</i>)</code>) on an\n       Observable, and that Observable emits fewer than <i>n</i> items before completing, the new,\n       <code>take</code>-modified Observable will not throw an exception or invoke <code>onError</code>, but\n       will merely emit this same fewer number of items before it completes.\n      </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable.just(1, 2, 3, 4, 5, 6, 7, 8)\n          .take(4)\n          .subscribe(new Subscriber&lt;Integer&gt;() {\n        @Override\n        public void onNext(Integer item) {\n            System.out.println(&quot;Next: &quot; + item);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            System.err.println(&quot;Error: &quot; + error.getMessage());\n        }\n\n        @Override\n        public void onCompleted() {\n            System.out.println(&quot;Sequence complete.&quot;);\n        }\n    });</pre></div>\n     <div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 3\nNext: 4\nSequence complete.</pre></div>\n      <p>\n       This variant of <code>take</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(int)\"><code>take(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/take.t.png\" style=\"width:100%;\" alt=\"take\">\n      <figcaption><p>\n       There is also a variant of <code>take</code> that takes a temporal duration rather than a quantity of\n       items. It results in an Observable that emits only those items that are emitted during that initial\n       duration of the source Observable&#x2019;s lifespan. You set this duration by passing in a length of time\n       and the time units this length is denominated in as parameters to <code>take</code>.\n      </p><p>\n       This variant of <code>take</code> by default operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you may also pass in a Scheduler of your choosing as an\n       optional third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit)\"><code>take(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#take(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>take(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>take</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>take takeUntilWithTime</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/take.png\" style=\"width:100%;\" alt=\"take\">\n      <figcaption><p>\n       RxJS implements the <code>take</code> operator.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 5)\n    .take(3);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/take.0.png\" style=\"width:100%;\" alt=\"take\">\n      <figcaption><p>\n       For the special case of <code>take(0)</code> you can also pass as a second parameter a\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> that <code>take</code> will use to immediately schedule a call\n       to <code>onCompleted</code>.\n      </p>\n      </figcaption>\n     </figure>\n     <p>\n      <code>take</code> is found in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     <figure>\n      <img src=\"images/takeUntilWithTime.png\" style=\"width:100%;\" alt=\"takeUntilWithTime\">\n      <figcaption><p>\n       RxJS also implements a <code>takeUntilWithTime</code> operator, which is like <code>take</code>\n       except that rather than taking a particular quantity of items, it takes all of the items that are\n       emitted during an initial period of time. You establish this period of by passing in a parameter to\n       <code>takeUntilWithTime</code>, in either of these formats:\n      </p>\n      <dl>\n       <dt>a number</dt>\n        <dd>mirrors items from the source Observable until this many milliseconds have passed since the Observable was subscribed to</dd>\n       <dt>a <code>Date</code></dt>\n        <dd>mirrors items from the source Observable until this absolute time</dd>\n      </dl>\n      <p>\n       You may also, optionally, pass in a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> as a second parameter, and\n       the timer will operate on that Scheduler (<code>takeUntilWithTime</code> uses the <code>timeout</code>\n       Scheduler by default).\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(0, 1000)\n    .takeUntilWithTime(5000);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nNext: 3\nNext: 4\nCompleted</pre></div>\n      <p>\n       <code>takeUntilWithTime</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>take</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Take</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>take takeUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>take</code>.\n    </p>\n    <p>\n    Returns a specified number of contiguous elements from the start of an observable sequence\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/take/take.php\n\n$observable = Rx\\Observable::fromArray([21, 42, 63]);\n$observable\n    -&gt;take(2)\n    -&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 21\nNext value: 42\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>takeUntil</code>.\n    </p>\n    <p>\n    Returns the values from the source observable sequence until the other observable sequence produces a value.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/take/take.php\n\n$observable = Rx\\Observable::fromArray([21, 42, 63]);\n$observable\n    -&gt;take(2)\n    -&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 21\nNext value: 42\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>take take_with_time</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>take</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>take</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>take</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Take"},{"path":"/documentation/operators/and-then-when.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#combining\">Combining</a></li>\n  <li class=\"active\">And/Then/When</li>\n</ol>\n\n   <h1>And/Then/When</h1>\n   <h3>combine sets of items emitted by two or more Observables by means of Pattern and Plan intermediaries</h3>\n   <figure>\n    <img src=\"images/and_then_when.C.png\" style=\"width:100%;\" alt=\"And/Then/When\">\n    <figcaption><p>\n    The combination of the <span class=\"operator\">And</span>, <span class=\"operator\">Then</span>,\n    and <span class=\"operator\">When</span> operators behave much like the\n    <span class=\"operator\">Zip</span> operator, but they do so by means of intermediate data\n    structures. <span class=\"operator\">And</span> accepts two or more Observables and combines the\n    emissions from each, one set at a time, into <code>Pattern</code> objects.\n    <span class=\"operator\">Then</span> operates on such <code>Pattern</code> objects, transforming\n    them in a <code>Plan</code>. <span class=\"operator\">When</span> in turn transforms these various\n    <code>Plan</code> objects into emissions from an Observable.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/zip.html\"><span class=\"operator\">Zip</span></a></li>\n    <li><a href=\"http://www.introtorx.com/content/v1.0.10621.0/12_CombiningSequences.html#AndThenWhen\"><cite>Introduction to Rx</cite>: And-Then-When</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>and then when</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/and_then_when.png\" style=\"width:100%;\" alt=\"and/then/when\">\n      <figcaption><p>\n       In RxGroovy, these are not part of the core ReactiveX implementation, but are found as\n       <code>and</code>, <code>then</code>, and <code>when</code> in the\n       <code>rxjava-joins</code> module.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>and then when</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/and_then_when.png\" style=\"width:100%;\" alt=\"and/then/when\">\n      <figcaption><p>\n       These are not part of the core RxJava implementation, but are found as <code>and</code>,\n       <code>then</code>, and <code>when</code> in the <code>rxjava-joins</code> module.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2x <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>and thenDo when</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/and_thenDo_when.png\" style=\"width:100%;\" alt=\"and/thenDo/when\">\n      <figcaption><p>\n       RxJS implements these operators as <code>and</code>, <code>thenDo</code>, and\n       <code>when</code>.\n      </p><p>\n       These are found in the following packages:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.joinpatterns.js</code></li>\n      </ul>\n      <p>\n       They require one of the following packages:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>and then when</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>And Then When</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>and_ then_do when</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"And/Then/When"},{"path":"/documentation/operators/startwith.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#combining\">Combining</a></li>\n  <li class=\"active\">StartWith</li>\n</ol>\n\n   <h1>StartWith</h1>\n   <h3>emit a specified sequence of items before beginning to emit the items from the source Observable</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"startWith\"></rx-marbles>\n    <figcaption><p>\n     If you want an Observable to emit a specific sequence of items before it begins emitting the\n     items normally expected from it, apply the <span class=\"operator\">StartWith</span> operator to it.\n    </p></figcaption>\n   </figure>\n   <p>\n    (If, on the other hand, you want to append a sequence of items to the end of those normally\n    emitted by an Observable, you want the\n    <a href=\"http://reactivex.io/documentation/operators/concat.html\"><span class=\"operator\">Concat</span></a> operator.)\n   </p>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/concat.html\"><span class=\"operator\">Concat</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/12_CombiningSequences.html#StartWith\"><cite>Introduction to Rx</cite>: StartWith</a></li>\n    <li><a href=\"http://rxmarbles.com/#startWith\">RxMarbles: <code>startWith</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>cons</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/cons.png\" style=\"width:100%;\" alt=\"cons\">\n      <figcaption><p>\n       RxClojure implements this operator as <code>cons</code>. It takes an item and an Observable\n       as parameters, and prepends the item to the items emitted by the Observable as its own\n       Observable sequence.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>start_with</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/start_with.png\" style=\"width:100%;\" alt=\"start_with\">\n      <figcaption><p>\n       RxCpp implements this operator as <code>start_with</code>. It takes an Observable and one\n       or more items as parameters, and prepends these items, in the order they are given in the\n       parameter list, to the items emitted by the Observable as its own Observable sequence.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>startWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxGroovy implements this operator as <code>startWith</code>.\n     </p>\n     <figure>\n      <img src=\"images/startWith.png\" style=\"width:100%;\" alt=\"startWith\">\n      <figcaption><p>\n       You can pass the values you want to prepend to the Observable sequence to\n       <code>startWith</code> either in a single Iterable or as a series of one to nine function\n       parameters.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\ndef myObservable = Observable.from([1, 2, 3]);\n\nmyObservable.startWith(-3, -2, -1, 0).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n-3\n-2\n-1\n0\n1\n2\n3</pre></div>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(java.lang.Iterable)\"><code>startWith(Iterable)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(T)\"><code>startWith(T)</code></a> (there are also versions that take up to nine individual items)</li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/startWith.o.png\" style=\"width:100%;\" alt=\"startWith\">\n      <figcaption><p>\n       You can also pass <code>startWith</code> an Observable, and it will prepend the emissions\n       from that Observable to those of the source Observable to make its own set of emissions. This\n       is a sort of inverted <span class=\"operator\">Concat</span> operation.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(rx.Observable)\"><code>startWith(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>startWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJava implements this operator as <code>startWith</code>.\n     </p>\n     <figure>\n      <img src=\"images/startWith.png\" style=\"width:100%;\" alt=\"startWith\">\n      <figcaption><p>\n       You can pass the values you want to prepend to the Observable sequence to\n       <code>startWith</code> either in a single Iterable or as a series of one to nine function\n       parameters.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(java.lang.Iterable)\"><code>startWith(Iterable)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(T)\"><code>startWith(T)</code></a> (there are also versions that take up to nine individual items)</li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/startWith.o.png\" style=\"width:100%;\" alt=\"startWith\">\n      <figcaption><p>\n       You can also pass <code>startWith</code> an Observable, and it will prepend the emissions\n       from that Observable to those of the source Observable to make its own set of emissions.\n       This is a sort of inverted <span class=\"operator\">Concat</span> operation.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#startWith(rx.Observable)\"><code>startWith(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>startWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n       <span style=\"color:#f00\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>startWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/startWith.png\" style=\"width:100%;\" alt=\"startWith\">\n      <figcaption><p>\n       RxJS implements this operator as <code>startWith</code>. It accepts a variable number of\n       function parameters and treats each one as an item that it will prepend to the resulting\n       Observable sequence in the order they are given in the parameter list.\n      </p></figcaption>\n     </figure>\n     <p>\n      <code>startWith</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>startWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxKotlin implements this operator as <code>startWith</code>.\n     </p>\n     <figure>\n      <img src=\"images/startWith.png\" style=\"width:100%;\" alt=\"startWith\">\n      <figcaption><p>\n       You can pass the values you want to prepend to the Observable sequence to\n       <code>startWith</code> either in a single Iterable or as a series of one to nine function\n       parameters.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/startWith.o.png\" style=\"width:100%;\" alt=\"startWith\">\n      <figcaption><p>\n       You can also pass <code>startWith</code> an Observable, and it will prepend the emissions\n       from that Observable to those of the source Observable to make its own set of emissions. This\n       is a sort of inverted <span class=\"operator\">Concat</span> operation.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNet\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNet\" aria-expanded=\"true\" aria-controls=\"collapseRxNet\">\n              RxNet <code>StartWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNet\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNet\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/startWith.C.png\" style=\"width:100%;\" alt=\"StartWith\">\n      <figcaption><p>\n       Rx.NET implements this operator as <code>StartWith</code>. It accepts an array of items\n       which it prepends to the resulting Observable sequence in the order they appear in the array\n       before it emits the items from the source Observable.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>startWith startWithArray</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>startWith</code>.\n    </p>\n    <p>\n    Prepends a value to an observable sequence with an argument of a signal value to prepend.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/startWith/startWith.php\n\n$source = \\Rx\\Observable::just(2)\n    -&gt;startWith(1);\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 2\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>startWithArray</code>.\n    </p>\n    <p>\n    Prepends a sequence of values to an observable sequence with an argument of an array of values to prepend.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/startWith/startWithArray.php\n\n$source = \\Rx\\Observable::just(4)\n    -&gt;startWithArray([1, 2, 3]);\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 2\nNext value: 3\nNext value: 4\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>start_with</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/start_with.png\" style=\"width:100%;\" alt=\"start_with\">\n      <figcaption><p>\n       RxPY implements this operator as <code>start_with</code>. It accepts an array of items which\n       it prepends to the resulting Observable sequence in the order they appear in the array before\n       it emits the items from the source Observable.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>start_with</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/start_with.png\" style=\"width:100%;\" alt=\"start_with\">\n      <figcaption><p>\n       Rx.rb implements this operator as <code>start_with</code>. It accepts an array of items which\n       it prepends to the resulting Observable sequence in the order they appear in the array before\n       it emits the items from the source Observable.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>+:</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/pluscolon.png\" style=\"width:100%;\" alt=\"plus colon\">\n      <figcaption><p>\n       RxScala implements this operator with <code>+:</code> It takes an item and an Observable\n       as parameters, and prepends the item to the items emitted by the Observable as its own\n       Observable sequence.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>startWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"StartWith"},{"path":"/documentation/operators/skiplast.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">SkipLast</li>\n</ol>\n\n   <h1>SkipLast</h1>\n   <h3>suppress the final <i>n</i> items emitted by an Observable</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"skipLast\"></rx-marbles>\n    <figcaption><p>\n     You can ignore the final <i>n</i> items emitted by an Observable and attend only to those items that come\n     before them, by modifying the Observable with the <span class=\"operator\">SkipLast</span> operator.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/last.html\"><span class=\"operator\">Last</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skip.html\"><span class=\"operator\">Skip</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipuntil.html\"><span class=\"operator\">SkipUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipwhile.html\"><span class=\"operator\">SkipWhile</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/take.html\"><span class=\"operator\">Take</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takelast.html\"><span class=\"operator\">TakeLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takeuntil.html\"><span class=\"operator\">TakeUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takewhile.html\"><span class=\"operator\">TakeWhile</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html#SkipLastTakeLast\"><cite>Introduction to Rx</cite>: SkipLast and TakeLast</a></li>\n    <li><a href=\"http://rxmarbles.com/#skipLast\">RxMarbles: <code>skipLast</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>skipLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skipLast.png\" style=\"width:100%;\" alt=\"skipLast\">\n      <figcaption><p>\n       You can ignore the final <i>n</i> items emitted by an Observable and attend only to those items that\n       precede them, by modifying the Observable with the <code>skipLast(<i>n</i>)</code> operator. Note that\n       the mechanism by which this is implemented will delay the emission of any item from the source Observable\n       until <i>n</i> additional items have been emitted by that Observable.\n      </p><p>\n       This variant of <code>skipLast</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(int)\"><code>skipLast(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/skipLast.t.png\" style=\"width:100%;\" alt=\"skipLast\">\n      <figcaption><p>\n       There is also a variant of <code>skipLast</code> that takes a temporal duration rather than a quantity of\n       items. It drops those items that are emitted during that final duration of the source\n       Observable&#x2019;s lifespan. You set this duration by passing in a length of time and the time units\n       this length is denominated in as parameters to <code>skipLast</code>.\n      </p><p>\n       Note that the mechanism by which this is implemented will delay the emission of any item from the source\n       Observable until the given duration passes since its emission.\n      </p><p>\n       This variant of <code>skipLast</code> by default operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you may also pass in a Scheduler of your choosing as an\n       optional third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit)\"><code>skipLast(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>skipLast(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>skipLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skipLast.png\" style=\"width:100%;\" alt=\"skipLast\">\n      <figcaption><p>\n       You can ignore the final <i>n</i> items emitted by an Observable and attend only to those items that\n       precede them, by modifying the Observable with the <code>skipLast(<i>n</i>)</code> operator. Note that\n       the mechanism by which this is implemented will delay the emission of any item from the source Observable\n       until <i>n</i> additional items have been emitted by that Observable.\n      </p><p>\n       This variant of <code>skipLast</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(int)\"><code>skipLast(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/skipLast.t.png\" style=\"width:100%;\" alt=\"skipLast\">\n      <figcaption><p>\n       There is also a variant of <code>skipLast</code> that takes a temporal duration rather than a quantity of\n       items. It drops those items that are emitted during that final duration of the source\n       Observable&#x2019;s lifespan. You set this duration by passing in a length of time and the time units\n       this length is denominated in as parameters to <code>skipLast</code>.\n      </p><p>\n       Note that the mechanism by which this is implemented will delay the emission of any item from the source\n       Observable until the given duration passes since its emission.\n      </p><p>\n       This variant of <code>skipLast</code> by default operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you may also pass in a Scheduler of your choosing as an\n       optional third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit)\"><code>skipLast(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>skipLast(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>skipLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>skipLast skipLastWithTime</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skipLast.png\" style=\"width:100%;\" alt=\"skipLast\">\n      <figcaption><p>\n       You can ignore the final <i>n</i> items emitted by an Observable and attend only to those items that\n       precede them, by modifying the Observable with the <code>skipLast(<i>n</i>)</code> operator. Note that\n       the mechanism by which this is implemented will delay the emission of any item from the source Observable\n       until <i>n</i> additional items have been emitted by that Observable.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 5)\n    .skipLast(3);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nCompleted</pre></div>\n      <p>\n       <code>skipLast</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/skipLastWithTime.png\" style=\"width:100%;\" alt=\"skipLastWithTime\">\n      <figcaption><p>\n       The <code>skipLastWithTime</code> operator takes a temporal duration rather than a quantity of\n       items. It drops those items that are emitted during that final duration of the source\n       Observable&#x2019;s lifespan. You set this duration by passing in a number of milliseconds as a parameter\n       to <code>skipLastWithTime</code>.\n      </p><p>\n       Note that the mechanism by which this is implemented will delay the emission of any item from the source\n       Observable until the given duration passes since its emission.\n      </p><p>\n       <code>skipLastWithTime</code> by default operates on the <code>timeout</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you may also pass in a Scheduler of your choosing as an\n       optional second parameter.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(0, 1000)\n    .take(10)\n    .skipLastWithTime(5000);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nNext: 3\nNext: 4\nCompleted</pre></div>\n      <p>\n       <code>skipLastWithTime</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>skipLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>SkipLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>skipLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>skipLast</code>.\n    </p>\n    <p>\n    Bypasses a specified number of elements at the end of an observable sequence.  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/skip/skipLast.php\n\n$observable = Rx\\Observable::range(0, 5)\n    -&gt;skipLast(3);\n\n$observable-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0\nNext value: 1\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>skip_last skip_last_with_time</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>skip_last</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>dropRight</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"SkipLast"},{"path":"/documentation/operators/timeinterval.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#utility\">Utility</a></li>\n  <li class=\"active\">TimeInterval</li>\n</ol>\n\n   <h1>TimeInterval</h1>\n   <h3>convert an Observable that emits items into one that emits indications of the amount of time elapsed between those emissions</h3>\n   <figure>\n    <img src=\"images/timeInterval.c.png\" style=\"width:100%;\" alt=\"TimeInterval\">\n    <figcaption><p>\n     The <span class=\"operator\">TimeInterval</span> operator intercepts the items from the source Observable\n     and emits in their place objects that indicate the amount of time that elapsed between pairs of emissions.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/timestamp.html\"><span class=\"operator\">Timestamp</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/08_Transformation.html#TimeStampAndTimeInterval\"><cite>Introduction to Rx</cite>: Timestamp and TimeInterval</a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc31\"><cite>101 Rx Samples</cite>: Interval &#x2014; With TimeInterval()</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>timeInterval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/timeInterval.png\" style=\"width:100%;\" alt=\"timeInterval\">\n      <figcaption><p>\n       The <cite>timeInterval</cite> operator converts a source Observable into an Observable that emits\n       indications of the amount of time lapsed between consecutive emissions of the source Observable. The\n       first emission from this new Observable indicates the amount of time lapsed between the time when the\n       observer subscribed to the Observable and the time when the source Observable emitted its first item.\n       There is no corresponding emission marking the amount of time lapsed between the last emission of the\n       source Observable and the subsequent call to <code>onCompleted</code>.\n      </p><p>\n       <code>timeInterval</code> by default operates on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but also has a variant that allows you to specify the\n       Scheduler by passing it in as a parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeInterval()\"><code>timeInterval()</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeInterval(rx.Scheduler)\"><code>timeInterval(Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>timeInterval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/timeInterval.png\" style=\"width:100%;\" alt=\"timeInterval\">\n      <figcaption><p>\n       The <cite>timeInterval</cite> operator converts a source Observable into an Observable that emits\n       indications of the amount of time lapsed between consecutive emissions of the source Observable. The\n       first emission from this new Observable indicates the amount of time lapsed between the time when the\n       observer subscribed to the Observable and the time when the source Observable emitted its first item.\n       There is no corresponding emission marking the amount of time lapsed between the last emission of the\n       source Observable and the subsequent call to <code>onCompleted</code>.\n      </p><p>\n       <code>timeInterval</code> by default operates on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but also has a variant that allows you to specify the\n       Scheduler by passing it in as a parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeInterval()\"><code>timeInterval()</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeInterval(rx.Scheduler)\"><code>timeInterval(Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>timeInterval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>timeInterval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/timeInterval.png\" style=\"width:100%;\" alt=\"timeInterval\">\n      <figcaption><p>\n       The <code>timeInterval</code> operator converts a source Observable into an Observable that emits\n       indications of the amount of time lapsed between consecutive emissions of the source Observable. The\n       first emission from this new Observable indicates the amount of time lapsed between the time when the\n       observer subscribed to the Observable and the time when the source Observable emitted its first item.\n       There is no corresponding emission marking the amount of time lapsed between the last emission of the\n       source Observable and the subsequent call to <code>onCompleted</code>.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(0, 1000)\n    .timeInterval()\n    .map(function (x) { return x.value + &apos;:&apos; + x.interval; })\n    .take(5);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0:0\nNext: 1:1000\nNext: 2:1000\nNext: 3:1000\nNext: 4:1000\nCompleted</pre></div>\n      <p>\n       <code>timeInterval</code> by default operates on the <code>timeout</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but also has a variant that allows you to specify the\n       Scheduler by passing it in as a parameter.\n      </p><p>\n       <code>timeInterval</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>timeInterval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>TimeInterval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>time_interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>timeInterval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"TimeInterval"},{"path":"/documentation/operators/skip.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">Skip</li>\n</ol>\n\n   <h1>Skip</h1>\n   <h3>suppress the first <i>n</i> items emitted by an Observable</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"skip\"></rx-marbles>\n    <figcaption><p>\n     You can ignore the first <i>n</i> items emitted by an Observable and attend only to those items that come\n     after, by modifying the Observable with the <span class=\"operator\">Skip</span> operator.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/last.html\"><span class=\"operator\">Last</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skiplast.html\"><span class=\"operator\">SkipLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipuntil.html\"><span class=\"operator\">SkipUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipwhile.html\"><span class=\"operator\">SkipWhile</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/take.html\"><span class=\"operator\">Take</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takelast.html\"><span class=\"operator\">TakeLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takeuntil.html\"><span class=\"operator\">TakeUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takewhile.html\"><span class=\"operator\">TakeWhile</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html#SkipAndTake\"><cite>Introduction to Rx</cite>: Skip and Take</a></li>\n    <li><a href=\"http://rxmarbles.com/#skip\">RxMarbles: <code>skip</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>drop</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>skip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>skip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skip.png\" style=\"width:100%;\" alt=\"skip\">\n      <figcaption><p>\n       In RxGroovy, this operator is implemented as <code>skip</code>.\n      </p>\n     <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\nnumbers = Observable.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\nnumbers.skip(3).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n4\n5\n6\n7\n8\nSequence complete</pre></div>\n      <p>\n       This variant of <code>skip</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(int)\"><code>skip(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/skip.t.png\" style=\"width:100%;\" alt=\"skip\">\n      <figcaption><p>\n       There is also a variant of <code>skip</code> that takes a temporal duration rather than a quantity of\n       items. It drops those items that are emitted during that initial duration of the source\n       Observable&#x2019;s lifespan. You set this duration by passing in a length of time and the time units\n       this length is denominated in as parameters to <code>skip</code>.\n      </p><p>\n       This variant of <code>skip</code> by default operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you may also pass in a Scheduler of your choosing as an\n       optional third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit)\"><code>skip(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>skip(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>skip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skip.png\" style=\"width:100%;\" alt=\"skip\">\n      <figcaption><p>\n       In RxJava, this operator is implemented as <code>skip</code>.\n      </p><p>\n       This variant of <code>skip</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(int)\"><code>skip(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/skip.t.png\" style=\"width:100%;\" alt=\"skip\">\n      <figcaption><p>\n       There is also a variant of <code>skip</code> that takes a temporal duration rather than a quantity of\n       items. It drops those items that are emitted during that initial duration of the source\n       Observable&#x2019;s lifespan. You set this duration by passing in a length of time and the time units\n       this length is denominated in as parameters to <code>skip</code>.\n      </p><p>\n       This variant of <code>skip</code> by default operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you may also pass in a Scheduler of your choosing as an\n       optional third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit)\"><code>skip(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skip(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>skip(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>skip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>skip skipUntilWithTime</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skip.png\" style=\"width:100%;\" alt=\"skip\">\n      <figcaption><p>\n       RxJS implements the <code>skip</code> operator.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 5)\n    .skip(3);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 3\nNext: 4\nCompleted</pre></div>\n      <p>\n       <code>skip</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/skipUntilWithTime.png\" style=\"width:100%;\" alt=\"skipUntilWithTime\">\n      <figcaption><p>\n       RxJS also implements a <code>skipUntilWithTime</code> operator that does not skip a particular quantity\n       of items from the source Observable, but skips items based on chronology. You set this skip period by\n       passing in a parameter to <code>skipUntilWithTime</code>, in either of these formats:\n      </p>\n      <dl>\n       <dt>a number</dt>\n        <dd>skips items from the source Observable until this many milliseconds have passed since the Observable was subscribed to</dd>\n       <dt>a <code>Date</code></dt>\n        <dd>skips items from the source Observable until this absolute time</dd>\n      </dl>\n      <p>\n       You may also, optionally, pass in a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> as a second parameter, and\n       the timer will operate on that Scheduler (<code>skipUntilWithTime</code> uses the <code>timeout</code>\n       Scheduler by default).\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(0, 1000)\n    .skipUntilWithTime(5000);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 6\nNext: 7\nNext: 8\nCompleted</pre></div>\n      <p>\n       <code>skipUntilWithTime</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>skip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Skip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>skip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>skip</code>.\n    </p>\n    <p>\n    Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/skip/skip.php\n\nuse Rx\\Observable\\ArrayObservable;\n\n$observable = Rx\\Observable::fromArray([1, 1, 2, 3, 5, 8, 13]);\n$observable\n    -&gt;skip(3)\n    -&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 3\nNext value: 5\nNext value: 8\nNext value: 13\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>skip skip_with_time</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>skip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>drop</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>skip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Skip"},{"path":"/documentation/operators/combinelatest.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#combining\">Combining</a></li>\n  <li class=\"active\">CombineLatest</li>\n</ol>\n\n   <h1>CombineLatest</h1>\n   <h3>when an item is emitted by either of two Observables, combine the latest item emitted by each Observable via a specified function and emit items based on the results of this function</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"combineLatest\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">CombineLatest</span> operator behaves in a similar way to\n     <span class=\"operator\">Zip</span>, but while <span class=\"operator\">Zip</span> emits items only\n     when <em>each</em> of the zipped source Observables have emitted a previously unzipped item,\n     <span class=\"operator\">CombineLatest</span> emits an item whenever <em>any</em> of the source\n     Observables emits an item (so long as each of the source Observables has emitted at least one\n     item). When any of the source Observables emits an item,\n     <span class=\"operator\">CombineLatest</span> combines the most recently emitted items from each\n     of the other source Observables, using a function you provide, and emits the return value from\n     that function.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/zip.html\"><span class=\"operator\">Zip</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/12_CombiningSequences.html#CombineLatest\"><cite>Introduction to Rx</cite>: CombineLatest</a></li>\n    <li><a href=\"http://rxmarbles.com/#combineLatest\">RxMarbles: <code>combineLatest</code></a></li>\n    <li><a href=\"http://rxmarbles.com/#withLatestFrom\">RxMarbles: <code>withLatestFrom</code></a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc3\"><cite>101 Rx Samples</cite>: CombineLatest &#x2014; Parallel Execution</a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc50\"><cite>101 Rx Samples</cite>: CombineLatest</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>combine_latest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>combineLatest withLatestFrom</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/combineLatest.png\" style=\"width:100%;\" alt=\"combineLatest\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>combineLatest</code>. It may take between two and\n       nine Observables (as well as the combining function) as parameters, or a single\n       <code>List</code> of Observables (as well as the combining function). It does not by default\n       operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#combineLatest(java.util.List,%20rx.functions.FuncN)\"><code>combineLatest(List,FuncN)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#combineLatest(rx.Observable,%20rx.Observable,%20rx.functions.Func2)\"><code>combineLatest(Observable,Observable,Func2)</code></a> (there are also versions that take up to nine Observables)</li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/withLatestFrom.png\" style=\"width:100%;\" alt=\"withLatestFrom\">\n      <figcaption><p>\n       Under development, but not part of the 1.0 release, is the <code>withLatestFrom</code> operator. It is\n       similar to <code>combineLatest</code>, but only emits items when the single source Observable emits an\n       item (not when <em>any</em> of the Observables that are passed to the operator do, as\n       <code>combineLatest</code> does).\n      </p>\n     </figcaption></figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>combineLatest withLatestFrom</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/combineLatest.png\" style=\"width:100%;\" alt=\"combineLatest\">\n      <figcaption><p>\n       RxJava implements this operator as <code>combineLatest</code>. It may take between two and\n       nine Observables (as well as the combining function) as parameters, or a single\n       <code>List</code> of Observables (as well as the combining function). It does not by default\n       operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#combineLatest(java.util.List,%20rx.functions.FuncN)\"><code>combineLatest(List,FuncN)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#combineLatest(rx.Observable,%20rx.Observable,%20rx.functions.Func2)\"><code>combineLatest(Observable,Observable,Func2)</code></a> (there are also versions that take up to nine Observables)</li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/withLatestFrom.png\" style=\"width:100%;\" alt=\"withLatestFrom\">\n      <figcaption><p>\n       Under development, but not part of the 1.0 release, is the <code>withLatestFrom</code> operator. It is\n       similar to <code>combineLatest</code>, but only emits items when the single source Observable emits an\n       item (not when <em>any</em> of the Observables that are passed to the operator do, as\n       <code>combineLatest</code> does).\n      </p>\n     </figcaption></figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>combineLatest combineLatestDelayError withLatestFrom</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n      <span style=\"color:#ff0000\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>combineLatest withLatestFrom</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/combineLatest.png\" style=\"width:100%;\" alt=\"combineLatest\">\n      <figcaption><p>\n       RxJS implements this operator as <code>combineLatest</code>. It may take a variable number\n       of individual Observables (as well as the combining function) as parameters, or a single\n       <code>Array</code> of Observables (as well as the combining function).\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n/* Have staggering intervals */\nvar source1 = Rx.Observable.interval(100)\n    .map(function (i) { return &apos;First: &apos; + i; });\n\nvar source2 = Rx.Observable.interval(150)\n    .map(function (i) { return &apos;Second: &apos; + i; });\n\n// Combine latest of source1 and source2 whenever either gives a value\nvar source = source1.combineLatest(\n        source2,\n        function (s1, s2) { return s1 + &apos;, &apos; + s2; }\n    ).take(4);\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x.toString());\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n      <div class=\"output\"><pre>\nNext: First: 0, Second: 0\nNext: First: 1, Second: 0\nNext: First: 1, Second: 1\nNext: First: 2, Second: 1\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/withLatestFrom.png\" style=\"width:100%;\" alt=\"withLatestFrom\">\n      <figcaption><p>\n       RxJS also has a <code>withLatestFrom</code> operator. It is similar to <code>combineLatest</code>, but\n       only emits items when the single source Observable emits an item (not when <em>any</em> of the\n       Observables that are passed to the operator do, as <code>combineLatest</code> does).\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n/* Have staggering intervals */\nvar source1 = Rx.Observable.interval(140)\n    .map(function (i) { return &apos;First: &apos; + i; });\n\nvar source2 = Rx.Observable.interval(50)\n    .map(function (i) { return &apos;Second: &apos; + i; });\n\n// When source1 emits a value, combine it with the latest emission from source2.\nvar source = source1.withLatestFrom(\n    source2,\n    function (s1, s2) { return s1 + &apos;, &apos; + s2; }\n).take(4);\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x.toString());\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n      <div class=\"output\"><pre>\nNext: First: 0, Second: 1\nNext: First: 1, Second: 4\nNext: First: 2, Second: 7\nNext: First: 3, Second: 10\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <p>\n      These two operators are both available in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>combineLatest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>CombineLatest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>combineLatest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>combineLatest</code>.\n    </p>\n    <p>\n    Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element. Observables need to be an array. If the result selector is omitted, a list with the elements will be yielded.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/combineLatest/combineLatest.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n/* Have staggering intervals */\n$source1 = \\Rx\\Observable::interval(100);\n$source2 = \\Rx\\Observable::interval(120);\n\n$source = $source1-&gt;combineLatest([$source2], function ($value1, $value2) {\n    return &quot;First: {$value1}, Second: {$value2}&quot;;\n})-&gt;take(4);\n\n$subscription = $source-&gt;subscribe($stdoutObserver, $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: First: 0, Second: 0\nNext value: First: 1, Second: 0\nNext value: First: 1, Second: 1\nNext value: First: 2, Second: 1\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>combine_latest with_latest_from</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>combine_latest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>combineLatest combineLatestWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>combineLatest withLatestFrom</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"CombineLatest"},{"path":"/documentation/operators/contains.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#conditional\">Conditional and Boolean</a></li>\n  <li class=\"active\">Contains</li>\n</ol>\n\n   <h1>Contains</h1>\n   <h3>determine whether an Observable emits a particular item or not</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"contains\"></rx-marbles>\n    <figcaption><p>\n     Pass the <span class=\"operator\">Contains</span> operator a particular item, and the Observable it returns\n     will emit <code>true</code> if that item is emitted by the source Observable, or <code>false</code> if the\n     source Observable terminates without emitting that item.\n    </p></figcaption>\n   </figure>\n   <p>\n    A related operator, <span class=\"operator\">IsEmpty</span> returns an Observable that emits <code>true</code>\n    if and only if the source Observable completes without emitting any items. It emits <code>false</code> if\n    the source Observable emits an item.\n   </p>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/all.html\"><span class=\"operator\">All</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/06_Inspection.html#Contains\"><cite>Introduction to Rx</cite>: Contains</a></li>\n    <li><a href=\"http://rxmarbles.com/#contains\">RxMarbles: <code>contains</code></a></li>\n    <li><a href=\"http://rxmarbles.com/#some\">RxMarbles: <code>some</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>some</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>contains exists isEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/contains.png\" style=\"width:100%;\" alt=\"contains\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>contains</code>. It does not by default operate on any\n       particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#contains(java.lang.Object)\"><code>contains(Object)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/exists.png\" style=\"width:100%;\" alt=\"exists\">\n      <figcaption><p>\n       RxGroovy also implements the <code>exists</code> operator. It is similar to <code>contains</code> but\n       tests items emitted by the source Observable against a predicate function you supply, rather than testing\n       them for identity with a particular object. The Observable returned from <code>exists</code> will return\n       <code>true</code> if the source Observable emits an item that satisfies your predicate function, and\n       <code>false</code> if it completes without emitting such an item.\n      </p><p>\n       It does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#exists(rx.functions.Func1)\"><code>exists(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/isEmpty.png\" style=\"width:100%;\" alt=\"isEmpty\">\n      <figcaption><p>\n       RxGroovy also implements the <code>isEmpty</code> operator. The Observable returned from\n       <code>isEmpty</code> will return <code>false</code> if the source Observable emits an item, and\n       <code>true</code> if it completes without emitting an item.\n      </p><p>\n       It does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#isEmpty()\"><code>isEmpty()</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>contains exists isEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/contains.png\" style=\"width:100%;\" alt=\"contains\">\n      <figcaption><p>\n       RxJava implements this operator as <code>contains</code>. It does not by default operate on any\n       particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#contains(java.lang.Object)\"><code>contains(Object)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/exists.png\" style=\"width:100%;\" alt=\"exists\">\n      <figcaption><p>\n       RxJava also implements the <code>exists</code> operator. It is similar to <code>contains</code> but\n       tests items emitted by the source Observable against a predicate function you supply, rather than testing\n       them for identity with a particular object. The Observable returned from <code>exists</code> will return\n       <code>true</code> if the source Observable emits an item that satisfies your predicate function, and\n       <code>false</code> if it completes without emitting such an item.\n      </p><p>\n       It does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#exists(rx.functions.Func1)\"><code>exists(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/isEmpty.png\" style=\"width:100%;\" alt=\"isEmpty\">\n      <figcaption><p>\n       RxJava also implements the <code>isEmpty</code> operator. The Observable returned from\n       <code>isEmpty</code> will return <code>false</code> if the source Observable emits an item, and\n       <code>true</code> if it completes without emitting an item.\n      </p><p>\n       It does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#isEmpty()\"><code>isEmpty()</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>any contains isEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>contains findIndex indexOf isEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/contains.png\" style=\"width:100%;\" alt=\"contains\">\n      <figcaption><p>\n       The <code>contains</code> operator in RxJS takes an optional second parameter: a zero-based index\n       into the source Observable&#x2019;s sequence at which to start searching for the item.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n/* Without an index */\nvar source = Rx.Observable.of(42)\n  .contains(42);\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: true\nCompleted</pre></div>\n      <div class=\"code javascript\"><pre>\n/* With an index */\nvar source = Rx.Observable.of(1,2,3)\n  .contains(2, 1);\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: true\nCompleted</pre></div>\n      <p>\n       <code>contains</code> is found in the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.aggregates.js</code></li>\n      </ul>\n      <p>\n       It requires one of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/indexOf.png\" style=\"width:100%;\" alt=\"indexOf\">\n      <figcaption><p>\n       The <code>indexOf</code> operator in RxJS is similar to <code>contains</code> but rather than\n       returning an Observable that emits <code>true</code> or <code>false</code> it returns an Observable\n       that emits the index of the item in the source Observable sequence, or <code>&#x2212;1</code> if no such\n       item was emitted.\n      </p><p>\n       The <code>indexOf</code> operator takes an optional second parameter: a zero-based index into the source\n       Observable&#x2019;s sequence at which to start searching for the item. The index value that the resulting\n       Observable emits will be relative to this start point, not to the beginning of the sequence.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n/* Without an index */\nvar source = Rx.Observable.of(42)\n  .indexOf(42);\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0 \nCompleted</pre></div>\n      <div class=\"code javascript\"><pre>\n/* With an index */\nvar source = Rx.Observable.of(1,2,3)\n  .indexOf(2, 1);\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0 \nCompleted</pre></div>\n      <p>\n       <code>indexOf</code> is found in the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.aggregates.js</code></li>\n      </ul>\n      <p>\n       It requires one of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/findIndex.png\" style=\"width:100%;\" alt=\"findIndex\">\n      <figcaption><p>\n       The <code>findIndex</code> operator in RxJS takes as its parameter a predicate function. It returns\n       an Observable that emits either a single number &#x2014; the zero-based index of the first item in the\n       source Observable sequence that matches the predicate &#x2014; or <code>&#x2212;1</code> if no such item\n       matches.\n      </p><p>\n       The predicate function takes three parameters:\n      </p><ul>\n       <li>the item emitted by the source Observable</li>\n       <li>the zero-based index of that item</li>\n       <li>the source Observable itself</li>\n      </ul><p>\n       You can also pass an object to <code>findIndex</code> as an optional second parameter, and that object\n       will be available to the predicate function as &#x201C;<code>this</code>&#x201D;.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n/* Found an element */\nvar array = [1,2,3,4];\n\nvar source = Rx.Observable.fromArray(array)\n    .findIndex(function (x, i, obs) {\n        return x === 1;\n    });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nCompleted</pre></div>\n      <div class=\"code javascript\"><pre>\n/* Not found */\nvar array = [1,2,3,4];\n\nvar source = Rx.Observable.fromArray(array)\n    .findIndex(function (x, i, obs) {\n        return x === 5;\n    });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: -1\nCompleted</pre></div>\n      <p>\n       <code>findIndex</code> is found in the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.aggregates.js</code></li>\n      </ul>\n      <p>\n       It requires one of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/isEmpty.png\" style=\"width:100%;\" alt=\"isEmpty\">\n      <figcaption><p>\n       RxJS also implements the <code>isEmpty</code> operator. The Observable returned from <code>isEmpty</code>\n       will return <code>false</code> if the source Observable emits an item, and <code>true</code> if it\n       completes without emitting an item.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n/* Not empty */\nvar source = Rx.Observable.range(0, 5)\n    .isEmpty()\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: false\nCompleted</pre></div>\n      <div class=\"code javascript\"><pre>\n/* Empty */\nvar source = Rx.Observable.empty()\n    .isEmpty()\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: true\nCompleted</pre></div>\n      <p>\n       <code>isEmpty</code> is found in the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.aggregates.js</code></li>\n      </ul>\n      <p>\n       It requires one of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>contains exists</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Any Contains</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>contains find find_index is_empty some</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>any? contains? none?</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>contains exists isEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Contains"},{"path":"/documentation/operators/defer.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#creating\">Creating</a></li>\n  <li class=\"active\">Defer</li>\n</ol>\n\n<h1>Defer</h1>\n<h3>do not create the Observable until the observer subscribes, and create a fresh Observable for each observer</h3>\n\n<figure>\n <img src=\"images/defer.c.png\" style=\"width:100%;\" alt=\"Defer\">\n <figcaption><p>\n  The <span class=\"operator\">Defer</span> operator waits until an observer subscribes to it, and\n  then it generates an Observable, typically with an Observable factory function. It does this\n  afresh for each subscriber, so although each subscriber may think it is subscribing to the same\n  Observable, in fact each subscriber gets its own individual sequence.\n </p><p>\n  In some circumstances, waiting until the last minute (that is, until subscription time) to generate\n  the Observable can ensure that this Observable contains the freshest data.\n </p></figcaption>\n</figure>\n<h4>See Also:</h4>\n<ul>\n <li><a href=\"http://blog.danlew.net/2015/07/23/deferring-observable-code-until-subscription-in-rxjava/\">Deferring Observable code until subscription in RxJava</a> by Dan Lew</li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>defer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>defer ifThen switchCase</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/defer.png\" style=\"width:100%;\" alt=\"defer\">\n     <figcaption><p>\n      RxGroovy implements this operator as <code>defer</code>. This operator takes as its sole\n      parameter an Observable factory function of your choosing. This function takes no parameters\n      and returns an Observable.\n     </p><p>\n      <code>defer</code> does not by default operate on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#defer(rx.functions.Func0)\"><code>defer()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/switchCase.png\" style=\"width:100%;\" alt=\"switchCase\">\n     <figcaption><p>\n      There is a somewhat similar operator in the optional <code>rxjava-computation-expressions</code>\n      package (it is not part of the standard RxGroovy set of operators). The <code>switchCase</code> operator\n      conditionally creates and returns one of a set of possible Observables.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/ifThen.png\" style=\"width:100%;\" alt=\"ifThen\">\n     <figcaption><p>\n      An even simpler operator in the optional <code>rxjava-computation-expressions</code> package (also not\n      part of the standard RxGroovy set of operators) is <code>ifThen</code>. This operator checks a condition\n      and then either mirrors the source Observable or an empty Observable depending on the result.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>defer ifThen switchCase</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/defer.png\" style=\"width:100%;\" alt=\"defer\">\n     <figcaption><p>\n      RxJava implements this operator as <code>defer</code>. This operator takes as its sole\n      parameter an Observable factory function of your choosing. This function takes no parameters\n      and returns an Observable.\n     </p><p>\n      <code>defer</code> does not by default operate on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#defer(rx.functions.Func0)\"><code>defer()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/switchCase.png\" style=\"width:100%;\" alt=\"switchCase\">\n     <figcaption><p>\n      There is a somewhat similar operator in the optional <code>rxjava-computation-expressions</code>\n      package (it is not part of the standard RxJava set of operators). The <code>switchCase</code> operator\n      conditionally creates and returns one of a set of possible Observables.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/ifThen.png\" style=\"width:100%;\" alt=\"ifThen\">\n     <figcaption><p>\n      An even simpler operator in the optional <code>rxjava-computation-expressions</code> package (also not\n      part of the standard RxGroovy set of operators) is <code>ifThen</code>. This operator checks a condition\n      and then either mirrors the source Observable or an empty Observable depending on the result.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>defer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>case defer if switchCase</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/defer.png\" style=\"width:100%;\" alt=\"defer\">\n     <figcaption><p>\n      RxJS implements this operator as <code>defer</code>. This operator takes as its sole parameter\n      an Observable factory function of your choosing. This function takes no parameters and returns\n      an Observable or a Promise.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\n/* Using an observable sequence */\nvar source = Rx.Observable.defer(function () {\n    return Rx.Observable.return(42);\n});\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); } );</pre></div>\n     <div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.defer(function () {\n    return RSVP.Promise.resolve(42);\n});\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); } );</pre></div>\n     <div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div>\n     <p>\n      <code>defer</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/if.png\" style=\"width:100%;\" alt=\"if\">\n     <figcaption><p>\n      RxJS also implements the <code>if</code> operator. It takes as parameters a function that returns a\n      boolean, an Observable to mirror if that function returns a true value, and optionally a second\n      Observable to mirror if that function returns a false value (if you omit this parameter, <code>if</code>\n      will mirror an empty Observable in such a case).\n     </p><h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar shouldRun = false;\n\nvar source = Rx.Observable.if(\n    function () { return shouldRun; },\n    Rx.Observable.return(42),\n    Rx.Observable.return(56)\n);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 56\nCompleted</pre></div>\n     <p>\n      <code>if</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.experimental.js</code> (requires <code>rx.js</code>, <code>rx.compat.js</code>, <code>rx.lite.js</code>, or <code>rx.lite.compat.js</code>)</li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/case.png\" style=\"width:100%;\" alt=\"case\">\n     <figcaption><p>\n      RxJS implements a somewhat similar operator called <code>case</code> (or\n      &#x201C;<code>switchCase</code>&#x201D;). This operator conditionally creates and returns one of a set of\n      possible Observables. It takes the following parameters:\n     </p>\n     <ol>\n      <li>a function that returns the key that determines which Observable to emit</li>\n      <li>an object that associates those keys with particular Observables</li>\n      <li>(optional) a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> or an Observable:<dl>\n        <dt>Scheduler</dt>\n         <dd>the Scheduler you want this operator to use</dd>\n        <dt>Observable</dt>\n         <dd>the default Observable to emit if the key does not associate with any Observables</dd>\n       </dl></li>\n     </ol>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar sources = {\n    &apos;foo&apos;: Rx.Observable.return(42),\n    &apos;bar&apos;: Rx.Observable.return(56)\n};\n\nvar defaultSource = Rx.Observable.empty();\n\nvar source = Rx.Observable.case(\n    function () {\n        return &apos;foo&apos;;\n    },\n    sources,\n    defaultSource);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); } );</pre></div>\n     <div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div>\n     <p>\n      <code>case</code>/<code>switchCase</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.experimental.js</code> (requires <code>rx.js</code>, <code>rx.compat.js</code>, <code>rx.lite.js</code>, or <code>rx.lite.compat.js</code>)</li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>defer switchCase</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Defer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>defer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>defer</code>.\n    </p>\n    <p>\n    Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/defer/defer.php\n\n\n$source = \\Rx\\Observable::defer(function () {\n    return \\Rx\\Observable::just(42);\n});\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>case defer if_then switch_case</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>defer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>defer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>defer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Defer"},{"path":"/documentation/operators/skipuntil.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#conditional\">Conditional and Boolean</a></li>\n  <li class=\"active\">SkipUntil</li>\n</ol>\n\n   <h1>SkipUntil</h1>\n   <h3>discard items emitted by an Observable until a second Observable emits an item</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"skipUntil\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">SkipUntil</span> subscribes to the source Observable, but ignores its emissions\n     until such time as a second Observable emits an item, at which point\n     <span class=\"operator\">SkipUntil</span> begins to mirror the source Observable.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/skip.html\"><span class=\"operator\">Skip</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skiplast.html\"><span class=\"operator\">SkipLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipwhile.html\"><span class=\"operator\">SkipWhile</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/take.html\"><span class=\"operator\">Take</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takelast.html\"><span class=\"operator\">TakeLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takeuntil.html\"><span class=\"operator\">TakeUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takewhile.html\"><span class=\"operator\">TakeWhile</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html#SkipUntilTakeUntil\"><cite>Introduction to Rx</cite>: SkipUntil and TakeUntil</a></li>\n    <li><a href=\"http://rxmarbles.com/#skipUntil\">RxMarbles: <code>skipUntil</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>skip_until</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>skipUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skipUntil.png\" style=\"width:100%;\" alt=\"skipUntil\">\n      <figcaption><p>\n       In RxGroovy, this operator is implemented as <code>skipUntil</code>.\n      </p><p>\n       <code>skipUntil</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipUntil(rx.Observable)\"><code>skipUntil(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>skipUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skipUntil.png\" style=\"width:100%;\" alt=\"skipUntil\">\n      <figcaption><p>\n       In RxJava, this operator is implemented as <code>skipUntil</code>.\n      </p><p>\n       <code>skipUntil</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipUntil(rx.Observable)\"><code>skipUntil(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>skipUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>skipUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skipUntil.png\" style=\"width:100%;\" alt=\"skipUntil\">\n      <figcaption><p>\n       RxJS implements the <code>skipUntil</code> operator. You can pass it either an Observable or a\n       <code>Promise</code> that it will monitor for an item that triggers <code>skipUntil</code> to begin\n       mirroring the source Observable.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(0, 1000)\n    .skipUntil(Rx.Observable.timer(5000));\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 6\nNext: 7\nNext: 8\nCompleted</pre></div>\n      <p>\n       <code>skipUntil</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <p>\n      There is also a <code>skipUntilWithTime</code> operator to which you can pass an absolute time or an\n      initial duration in place of an Observable, but this is described on the\n      <a href=\"http://reactivex.io/documentation/operators/skip.html\"><span class=\"operator\">Skip</span></a> operator page.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>skipUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>SkipUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>skipUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>skipUntil</code>.\n    </p>\n    <p>\n    Returns the values from the source observable sequence only after the other observable sequence produces a value.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/skip/skipUntil.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$observable = Rx\\Observable::interval(1000)\n    -&gt;skipUntil(\\Rx\\Observable::timer(5000))\n    -&gt;take(3);\n\n$observable-&gt;subscribe($stdoutObserver, $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 4\nNext value: 5\nNext value: 6\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>skipUntil skipUntil_with_time</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>skipUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>dropUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>skipUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"SkipUntil"},{"path":"/documentation/operators/subscribe.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#transforming\">Transforming</a></li>\n  <li class=\"active\">Subscribe</li>\n</ol>\n\n<h1>Subscribe</h1>\n<h3>operate upon the emissions and notifications from an Observable</h3>\n\n <p>\n  The <span class=\"operator\">Subscribe</span> operator is the glue that connects an observer to an\n  Observable. In order for an observer to see the items being emitted by an Observable, or to receive\n  error or completed notifications from the Observable, it must first subscribe to that Observable with\n  this operator.\n </p><p>\n  A typical implementaiton of the <span class=\"operator\">Subscribe</span> operator may accept one to three\n  methods (which then constitute the observer), or it may accept an object (sometimes called an\n  <code>Observer</code> or <code>Subscriber</code>) that implements the interface which includes those three\n  methods:\n </p><dl>\n  <dt><code>onNext</code></dt>\n   <dd>An Observable calls this method whenever the Observable emits an item. This method takes as a\n       parameter the item emitted by the Observable.</dd>\n  <dt><code>onError</code></dt>\n   <dd>An Observable calls this method to indicate that it has failed to generate the expected data or has\n       encountered some other error. This stops the Observable and it will not make further calls to\n       <code>onNext</code> or <code>onCompleted</code>. The <code>onError</code> method takes as its parameter\n       an indication of what caused the error (sometimes an object like an Exception or Throwable, other times\n       a simple string, depending on the implementation).</dd>\n  <dt><code>onCompleted</code></dt>\n   <dd>An Observable calls this method after it has called <code>onNext</code> for the final time, if it has not\n       encountered any errors.</dd>\n </dl>\n <p>\n  An Observable is called a &#x201C;cold&#x201D; Observable if it does not begin to emit items until an observer\n  has subscribed to it; an Observable is called a &#x201C;hot&#x201D; Observable if it may begin emitting items\n  at any time, and a subscriber may begin observing the sequence of emitted items at some point after its\n  commencement, missing out on any items emitted previously to the time of the subscription.\n </p>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/do.html\"><span class=\"operator\">Do</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/02_KeyTypes.html#IObserver\"><cite>Introduction to Rx</cite>: IObserver</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>BlockingObservable.doseq subscribe</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>subscribe</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>BlockingObservable.forEach forEach subscribe</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <p>\n     RxGroovy implements several variants of <code>subscribe</code>.\n    </p><p>\n     If you pass it no parameters, it will trigger a subscription to the underlying Observable, but will\n     ignore its emissions and notifications. This will activate a cold Observable.\n    </p><p>\n     You can also pass it between one and three functions; these will be interpreted as follows:\n    </p>\n    <ol>\n     <li><code>onNext</code></li>\n     <li><code>onNext</code> and <code>onError</code></li>\n     <li><code>onNext</code>, <code>onError</code>, and <code>onCompleted</code></li>\n    </ol>\n    <p>\n     Finally, you can pass it an object that implements either of the <code>Observer</code> or\n     <code>Subscriber</code> interfaces. The <code>Observer</code> interface consists of the three\n     previously-described &#x201C;<code>on</code>&#x201D; methods. The <code>Subscriber</code> interface\n     implements these also, and adds a number of additional methods that facilitate reactive pull backpressure\n     and that permit the Subscriber to unsubscribe to an Observable before it completes.\n    </p><p>\n     The call to <code>subscribe</code> returns an object that implements the <code>Subscription</code>\n     interface. This interface includes the <code>unsubscribe</code> method that you can call at any time\n     to sever the subscription that <code>subscribe</code> established between the Observable and the observer\n     (or the methods that stand in for the observer).\n    </p>\n    <ul>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe()\"><code>subscribe()</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1)\"><code>subscribe(Action1)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1,%20rx.functions.Action1)\"><code>subscribe(Action1,Action1)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1,%20rx.functions.Action1,%20rx.functions.Action0)\"><code>subscribe(Action1,Action1,Action0)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.Observer)\"><code>subscribe(Observer)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.Subscriber)\"><code>subscribe(Subscriber)</code></a></li>\n    </ul>\n\n    <p>\n     The <code>forEach</code> operators are simpler versions of <code>subscribe</code>. You can pass them\n     between one and three functions, which will be interpreted as follows:\n    </p>\n    <ol>\n     <li><code>onNext</code></li>\n     <li><code>onNext</code> and <code>onError</code></li>\n     <li><code>onNext</code>, <code>onError</code>, and <code>onCompleted</code></li>\n    </ol>\n    <p>\n     Unlike <code>subscribe</code>, <code>forEach</code> does not return an object with which you can cancel\n     the subscription. Nor do you have the option of passing a parameter that has this capability. So you should\n     only use this operator if you definitely need to operate on all of the emissions and notifications from the\n     Observable.\n    </p>\n    <ul>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1)\"><code>forEach(Action1)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1,%20rx.functions.Action1)\"><code>forEach(Action1,Action1)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1,%20rx.functions.Action1,%20rx.functions.Action0)\"><code>forEach(Action1,Action1,Action0)</code></a></li>\n    </ul>\n\n    <figure>\n     <img src=\"images/B.forEach.png\" style=\"width:100%;\" alt=\"forEach\">\n     <figcaption><p>\n      There is also a <code>BlockingObservable</code> method called <code>forEach</code> that is somewhat\n      similar. In order to use it, you must first convert your source Observable into a\n      <code>BlockingObservable</code> by means of either the <code>BlockingObservable.from</code> method or the\n      <code>Observable.toBlocking</code> operator.\n     </p><p>\n      <code>BlockingObservable.forEach</code> takes a single function as its parameter, and this function\n      behaves much like an <code>onNext</code> function in the subscription to an ordinary Observable. The\n      <code>forEach</code> operator itself blocks until the <code>BlockingObservable</code> completes, and it\n      is by unblocking, rather than by calling a callback function, that it indicates that it is complete. If\n      it encounters an error it will throw a <code>RuntimeException</code> (rather than calling an analogue to\n      the <code>onError</code> callback).\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#forEach(rx.functions.Action1)\">BlockingObservable.forEach(Action1)</a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>BlockingObservable.forEach forEach subscribe</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     RxJava implements several variants of <code>subscribe</code>.\n    </p><p>\n     If you pass it no parameters, it will trigger a subscription to the underlying Observable, but will\n     ignore its emissions and notifications. This will activate a cold Observable.\n    </p><p>\n     You can also pass it between one and three functions; these will be interpreted as follows:\n    </p>\n    <ol>\n     <li><code>onNext</code></li>\n     <li><code>onNext</code> and <code>onError</code></li>\n     <li><code>onNext</code>, <code>onError</code>, and <code>onCompleted</code></li>\n    </ol>\n    <p>\n     Finally, you can pass it an object that implements either of the <code>Observer</code> or\n     <code>Subscriber</code> interfaces. The <code>Observer</code> interface consists of the three\n     previously-described &#x201C;<code>on</code>&#x201D; methods. The <code>Subscriber</code> interface\n     implements these also, and adds a number of additional methods that facilitate reactive pull backpressure\n     and that permit the Subscriber to unsubscribe to an Observable before it completes.\n    </p><p>\n     The call to <code>subscribe</code> returns an object that implements the <code>Subscription</code>\n     interface. This interface includes the <code>unsubscribe</code> method that you can call at any time\n     to sever the subscription that <code>subscribe</code> established between the Observable and the observer\n     (or the methods that stand in for the observer).\n    </p>\n    <ul>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe()\"><code>subscribe()</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1)\"><code>subscribe(Action1)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1,%20rx.functions.Action1)\"><code>subscribe(Action1,Action1)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.functions.Action1,%20rx.functions.Action1,%20rx.functions.Action0)\"><code>subscribe(Action1,Action1,Action0)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.Observer)\"><code>subscribe(Observer)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribe(rx.Subscriber)\"><code>subscribe(Subscriber)</code></a></li>\n    </ul>\n\n    <p>\n     The <code>forEach</code> operators are simpler versions of <code>subscribe</code>. You can pass them\n     between one and three functions, which will be interpreted as follows:\n    </p>\n    <ol>\n     <li><code>onNext</code></li>\n     <li><code>onNext</code> and <code>onError</code></li>\n     <li><code>onNext</code>, <code>onError</code>, and <code>onCompleted</code></li>\n    </ol>\n    <p>\n     Unlike <code>subscribe</code>, <code>forEach</code> does not return an object with which you can cancel\n     the subscription. Nor do you have the option of passing a parameter that has this capability. So you should\n     only use this operator if you definitely need to operate on all of the emissions and notifications from the\n     Observable.\n    </p>\n    <ul>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1)\"><code>forEach(Action1)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1,%20rx.functions.Action1)\"><code>forEach(Action1,Action1)</code></a></li>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#forEach(rx.functions.Action1,%20rx.functions.Action1,%20rx.functions.Action0)\"><code>forEach(Action1,Action1,Action0)</code></a></li>\n    </ul>\n\n    <figure>\n     <img src=\"images/B.forEach.png\" style=\"width:100%;\" alt=\"forEach\">\n     <figcaption><p>\n      There is also a <code>BlockingObservable</code> method called <code>forEach</code> that is somewhat\n      similar. In order to use it, you must first convert your source Observable into a\n      <code>BlockingObservable</code> by means of either the <code>BlockingObservable.from</code> method or the\n      <code>Observable.toBlocking</code> operator.\n     </p><p>\n      <code>BlockingObservable.forEach</code> takes a single function as its parameter, and this function\n      behaves much like an <code>onNext</code> function in the subscription to an ordinary Observable. The\n      <code>forEach</code> operator itself blocks until the <code>BlockingObservable</code> completes, and it\n      is by unblocking, rather than by calling a callback function, that it indicates that it is complete. If\n      it encounters an error it will throw a <code>RuntimeException</code> (rather than calling an analogue to\n      the <code>onError</code> callback).\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#forEach(rx.functions.Action1)\">BlockingObservable.forEach(Action1)</a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>blockingForEach blockingSubscribe forEachWhile safeSubscribe subscribe</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>forEach subscribe subscribeOnCompleted subscribeOnError subscribeOnNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <p>\n     In RxJS, you can subscribe to an Observable in two ways:\n    </p>\n    <ol>\n     <li>subscribe a single function to either the <code>onNext</code>, the <code>onCompleted</code>, or\n         <code>onError</code> notifications from an Observable, with <code>subscribeOnNext</code>,\n         <code>subscribeOnCompleted</code>, or <code>subscribeOnError</code> respectively</li>\n     <li>subscribe by passing zero to three individual functions, or an object that implements those three\n         functions, into either the <code>subscribe</code> or <code>forEach</code> operator (those operators\n         behave identically).</li>\n    </ol>\n    <h4>Sample Code</h4>\n    <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 3)\n\nvar subscription = source.subscribeOnNext(\n  function (x) {\n    console.log(&apos;Next: %s&apos;, x);\n  });</pre></div>\n    <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2</pre></div>\n    <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 3);\n\nvar subscription = source.subscribeOnCompleted(\n  function () {\n    console.log(&apos;Completed&apos;);\n  });</pre></div>\n    <div class=\"output\"><pre>\nCompleted</pre></div>\n    <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.throw(new Error());\n\nvar subscription = source.subscribeOnError(\n  function (err) {\n    console.log(&apos;Error: %s&apos;, err);\n  });</pre></div>\n    <div class=\"output\"><pre>\nError: Error</pre></div>\n    <div class=\"code javascript\"><pre>\nvar observer = Rx.Observer.create(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });\n\nvar source = Rx.Observable.range(0, 3)\n\nvar subscription = source.subscribe(observer);</pre></div>\n    <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nCompleted</pre></div>\n    <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 3)\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });\n</pre></div>\n    <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nCompleted</pre></div>\n    <p>\n     The functions described in this section are all found in each of the following distributions:\n    </p>\n    <ul>\n     <li><code>rx.js</code></li>\n     <li><code>rx.all.js</code></li>\n     <li><code>rx.all.compat.js</code></li>\n     <li><code>rx.compat.js</code></li>\n     <li><code>rx.lite.js</code></li>\n     <li><code>rx.lite.compat.js</code></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>BlockingObservable.forEach forEach subscribe</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>ForEach Subscribe</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>BlockingObservable.for_each subscribe</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>subscribe</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>BlockingObservable.foreach forEach subscribe</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>subscribe</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Subscribe"},{"path":"/documentation/operators/zip.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#combining\">Combining</a></li>\n  <li class=\"active\">Zip</li>\n</ol>\n\n   <h1>Zip</h1>\n   <h3>combine the emissions of multiple Observables together via a specified function and emit single items for each combination based on the results of this function</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"zip\"></rx-marbles>\n    <figcaption><p>\n     The <code>Zip</code> method returns an Observable that applies a function of your choosing to\n     the combination of items emitted, in sequence, by two (or more) other Observables, with the\n     results of this function becoming the items emitted by the returned Observable. It applies this\n     function in strict sequence, so the first item emitted by the new Observable will be the result\n     of the function applied to the first item emitted by Observable #1 and the first item emitted by\n     Observable #2; the second item emitted by the new zip-Observable will be the result of the\n     function applied to the second item emitted by Observable #1 and the second item emitted by\n     Observable #2; and so forth. It will only emit as many items as the number of items emitted by\n     the source Observable that emits the fewest items.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/and-then-when.html\"><span class=\"operator\">And</span>/<span class=\"operator\">Then</span>/<span class=\"operator\">When</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/combinelatest.html\"><span class=\"operator\">CombineLatest</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/12_CombiningSequences.html#Zip\"><cite>Introduction to Rx</cite>: Zip</a></li>\n    <li><a href=\"http://rxmarbles.com/#zip\">RxMarbles: <code>zip</code></a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc49\"><cite>101 Rx Samples</cite>: Zip</a></li>\n   </ul>\n \n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>map mapCat</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>zip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>zip zipWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxGroovy implements this operator as several variants of <code>zip</code> and also as\n      <code>zipWith</code>, an instance function version of the operator.\n     </p>\n     <figure>\n      <img src=\"images/zip.o.png\" style=\"width:100%;\" alt=\"zip\">\n      <figcaption><p>\n       The last argument to <code>zip</code> is a function that accepts an item from each of the\n       Observables being zipped and emits an item to be emitted in response by the Observable\n       returned from <code>zip</code>. You can provide the Observables to be zipped together to\n       <code>zip</code> either as between two and nine individual parameters, or as a single\n       parameter: either an Iterable of Observables or an Observable that emits Observables (as\n       in the illustration above).\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\nodds  = Observable.from([1, 3, 5, 7, 9]);\nevens = Observable.from([2, 4, 6]);\n\nObservable.zip(odds, evens, {o, e -&gt; [o, e]}).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n[1, 2]\n[3, 4]\n[5, 6]\nSequence complete</pre></div>\n      <p>\n       Note that in this example, the resulting Observable completes normally after emitting three\n       items, which is the number of items emitted by the shorter of the two component Observbles\n       (<code>evens</code>, which emits three items).\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(java.lang.Iterable,%20rx.functions.FuncN)\"><code>zip(Iterable&lt;Observable&gt;,FuncN)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(rx.Observable,%20rx.functions.FuncN)\"><code>zip(Observable&lt;Observable&gt;,FuncN)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(rx.Observable,%20rx.Observable,%20rx.functions.Func2)\"><code>zip(Observable,Observable,Func2)</code></a> (there are also versions that take up to nine Observables)</li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/zip.i.png\" style=\"width:100%;\" alt=\"zipWith\">\n      <figcaption><p>\n       The <code>zipWith</code> instance version of this operator always takes two parameters.\n       The first parameter may be either a simple Observable, or an iterable (as in the illustration\n       above).\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#zipWith(rx.Observable,%20rx.functions.Func2)\"><code>zipWith(Observable,Func2)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#zipWith(java.lang.Iterable,%20rx.functions.Func2)\"><code>zipWith(Iterable,Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>zip</code> and <code>zipWith</code> do not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>zip zipWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJava implements this operator as several variants of <code>zip</code> and also as\n      <code>zipWith</code>, an instance function version of the operator.\n     </p>\n     <figure>\n      <img src=\"images/zip.o.png\" style=\"width:100%;\" alt=\"zip\">\n      <figcaption><p>\n       The last argument to <code>zip</code> is a function that accepts an item from each of the\n       Observables being zipped and emits an item to be emitted in response by the Observable\n       returned from <code>zip</code>. You can provide the Observables to be zipped together to\n       <code>zip</code> either as between two and nine individual parameters, or as a single\n       parameter: either an Iterable of Observables or an Observable that emits Observables (as\n       in the illustration above).\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(java.lang.Iterable,%20rx.functions.FuncN)\"><code>zip(Iterable&lt;Observable&gt;,FuncN)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(rx.Observable,%20rx.functions.FuncN)\"><code>zip(Observable&lt;Observable&gt;,FuncN)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#zip(rx.Observable,%20rx.Observable,%20rx.functions.Func2)\"><code>zip(Observable,Observable,Func2)</code></a> (there are also versions that take up to nine Observables)</li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/zip.i.png\" style=\"width:100%;\" alt=\"zipWith\">\n      <figcaption><p>\n       The <code>zipWith</code> instance version of this operator always takes two parameters.\n       The first parameter may be either a simple Observable, or an iterable (as in the illustration\n       above).\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#zipWith(rx.Observable,%20rx.functions.Func2)\"><code>zipWith(Observable,Func2)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#zipWith(java.lang.Iterable,%20rx.functions.Func2)\"><code>zipWith(Iterable,Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>zip</code> and <code>zipWith</code> do not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>zip zipArray zipIterable zipWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>forkJoin zip zipArray</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJS implements this operator as <code>zip</code> and <code>zipArray</code>.\n     </p>\n     <figure>\n      <img src=\"images/zip.png\" style=\"width:100%;\" alt=\"zip\">\n      <figcaption><p>\n       <code>zip</code> accepts a variable number of Observables or Promises as parameters, followed\n       by a function that accepts one item emitted by each of those Observables or resolved by those\n       Promises as input and produces a single item to be emitted by the resulting Observable.\n      </p>\n      <h4>Sample Code</h4>\n       <div class=\"code javascript\"><pre>\n/* Using arguments */\nvar range = Rx.Observable.range(0, 5);\n\nvar source = Observable.zip(\n    range,\n    range.skip(1),\n    range.skip(2),\n    function (s1, s2, s3) {\n        return s1 + &apos;:&apos; + s2 + &apos;:&apos; + s3;\n    }\n);\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n       <div class=\"output\"><pre>\nNext: 0:1:2\nNext: 1:2:3\nNext: 2:3:4\nCompleted</pre></div>\n       <div class=\"code javascript\"><pre>\n/* Using promises and Observables */\nvar range = Rx.Observable.range(0, 5);\n\nvar source = Observable.zip(\n    RSVP.Promise.resolve(0),\n    RSVP.Promise.resolve(1),\n    Rx.Observable.return(2)\n    function (s1, s2, s3) {\n        return s1 + &apos;:&apos; + s2 + &apos;:&apos; + s3;\n    }\n);\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n       <div class=\"output\"><pre>\nNext: 0:1:2\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/zipArray.png\" style=\"width:100%;\" alt=\"zipArray\">\n      <figcaption><p>\n       <code>zipArray</code> accepts a variable number of Observables as parameters and returns an\n       Observable that emits arrays, each one containing the <i>n</i><sup>th</sup> item from each\n       source Observable.\n      </p>\n     <h4>Sample Code</h4>\n       <div class=\"code javascript\"><pre>\nvar range = Rx.Observable.range(0, 5);\n\nvar source = Rx.Observable.zipArray(\n    range,\n    range.skip(1), \n    range.skip(2)\n);\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);   \n    },\n    function () {\n        console.log(&apos;Completed&apos;);   \n    });</pre></div>\n       <div class=\"output\"><pre>\nNext: [0,1,2]\nNext: [1,2,3]\nNext: [2,3,4]\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/forkJoin.png\" style=\"width:100%;\" alt=\"forkJoin\">\n      <figcaption><p>\n       RxJS also implements a similar operator, <code>forkJoin</code>. There are two varieties of this\n       operator. The first collects the last element emitted by each of the source Observables into an array and\n       emits this array as its own sole emitted item. You can either pass a list of Observables to\n       <code>forkJoin</code> as individual parameters or as an array of Observables.\n      </p>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.forkJoin(\n    Rx.Observable.return(42),\n    Rx.Observable.range(0, 10),\n    Rx.Observable.fromArray([1,2,3]),\n    RSVP.Promise.resolve(56)\n);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: [42, 9, 3, 56]\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/forkJoin.p.png\" style=\"width:100%;\" alt=\"forkJoin\">\n      <figcaption><p>\n      </p><p>\n       A second variant of <code>forkJoin</code> exists as a prototype function, and you call it on an instance\n       of one source Observable, passing it another source Observable as a parameter.  As a second parameter,\n       you pass it a function that combines the final item emitted by the two source Observables into the sole\n       item to be emitted by the resulting Observable.\n      </p>\n      <div class=\"code javascript\"><pre>\nvar source1 = Rx.Observable.return(42);\nvar source2 = Rx.Observable.range(0, 3);\n\nvar source = source1.forkJoin(source2, function (s1, s2) {\n    return s1 + s2;\n});\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 44\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <p>\n      <code>forkJoin</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.experimental.js</code> (requires <code>rx.js</code>, <code>rx.compat.js</code>, <code>rx.lite.js</code>, or <code>rx.lite.compat.js</code>)</li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>zip zipWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Zip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>zip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>zip</code>.\n    </p>\n    <p>\n    Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index. If the result selector function is omitted, a list with the elements of the observable sequences at corresponding indexes will be yielded.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/zip/zip.php\n\n//Without a result selector\n$range = \\Rx\\Observable::fromArray(range(0, 4));\n\n$source = $range\n    -&gt;zip([\n        $range-&gt;skip(1),\n        $range-&gt;skip(2)\n    ]);\n\n$observer = $createStdoutObserver();\n\n$subscription = $source\n    -&gt;subscribe(new CallbackObserver(\n        function ($array) use ($observer) {\n            $observer-&gt;onNext(json_encode($array));\n        },\n        [$observer, &quot;onError&quot;],\n        [$observer, &quot;onCompleted&quot;]\n    ));\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: [0,1,2]\nNext value: [1,2,3]\nNext value: [2,3,4]\nComplete!\n    </pre>\n</div>\n\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/zip/zip-result-selector.php\n\n//With a result selector\n$range = \\Rx\\Observable::fromArray(range(0, 4));\n\n$source = $range\n    -&gt;zip([\n        $range-&gt;skip(1),\n        $range-&gt;skip(2)\n    ], function ($s1, $s2, $s3) {\n        return $s1 . &apos;:&apos; . $s2 . &apos;:&apos; . $s3;\n    });\n\n$observer = $createStdoutObserver();\n\n$subscription = $source-&gt;subscribe($createStdoutObserver());\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0:1:2\nNext value: 1:2:3\nNext value: 2:3:4\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>zip zip_array</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>zip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>zip zipWith zipWithIndex</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>zip</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Zip"},{"path":"/documentation/operators/scan.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#transforming\">Transforming</a></li>\n  <li class=\"active\">Scan</li>\n</ol>\n\n   <h1>Scan</h1>\n   <h3>apply a function to each item emitted by an Observable, sequentially, and emit each successive value</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"scan\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Scan</span> operator applies a function to the first item emitted\n     by the source Observable and then emits the result of that function as its own first emission.\n     It also feeds the result of the function back into the function along with the second item\n     emitted by the source Observable in order to generate its second emission. It continues to\n     feed back its own subsequent emissions along with the subsequent emissions from the source\n     Observable in order to create the rest of its sequence.\n    </p><p>\n     This sort of operator is sometimes called an &#x201C;accumulator&#x201D; in other contexts.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/reduce.html\"><span class=\"operator\">Reduce</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/07_Aggregation.html#Scan\"><cite>Introduction to Rx</cite>: Scan</a></li>\n    <li><a href=\"http://rxmarbles.com/#scan\">RxMarbles: <code>scan</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>reductions</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>scan</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/scan.png\" style=\"width:100%;\" alt=\"scan\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>scan</code>. The following code, for example,\n       takes an Observable that emits a consecutive sequence of <i>n</i> integers starting with\n       <code>1</code> and converts it, via <code>scan</code>, into an Observable that emits the\n       first <i>n</i> <a href=\"http://en.wikipedia.org/wiki/Triangular_number\">triangular\n       numbers</a>:\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nnumbers = Observable.from([1, 2, 3, 4, 5]);\n\nnumbers.scan({ a, b -&gt; a+b }).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n1\n3\n6\n10\n15\nSequence complete</pre></div>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#scan(rx.functions.Func2)\"><code>scan(Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/scanSeed.png\" style=\"width:100%;\" alt=\"scan\">\n      <figcaption><p>\n       There is also a variant of <code>scan</code> to which you can pass a seed value to pass\n       to the accumulator function the first time it is called (for the first emission from the\n       source Observable) in place of the result from the missing prior call to the accumulator.\n       Note that if you use this version, <code>scan</code> will emit this seed value as its own\n       initial emission. Note also that passing a seed of <code>null</code> is <em>not</em> the\n       same as passing no seed at all. A <code>null</code> seed is a valid variety of seed.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#scan(R,%20rx.functions.Func2)\"><code>scan(R,Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      This operator does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>scan</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/scan.png\" style=\"width:100%;\" alt=\"scan\">\n      <figcaption><p>\n       RxJava implements this operator as <code>scan</code>.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code java\"><pre>\nObservable.just(1, 2, 3, 4, 5)\n    .scan(new Func2&lt;Integer, Integer, Integer&gt;() {\n        @Override\n        public Integer call(Integer sum, Integer item) {\n            return sum + item;\n        }\n    }).subscribe(new Subscriber&lt;Integer&gt;() {\n        @Override\n        public void onNext(Integer item) {\n            System.out.println(&quot;Next: &quot; + item);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            System.err.println(&quot;Error: &quot; + error.getMessage());\n        }\n\n        @Override\n        public void onCompleted() {\n            System.out.println(&quot;Sequence complete.&quot;);\n        }\n    });</pre></div>\n      <div class=\"output\"><pre>\nNext: 1\nNext: 3\nNext: 6\nNext: 10\nNext: 15\nSequence complete.</pre></div>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#scan(rx.functions.Func2)\"><code>scan(Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/scanSeed.png\" style=\"width:100%;\" alt=\"scan\">\n      <figcaption><p>\n       There is also a variant of <code>scan</code> to which you can pass a seed value to pass\n       to the accumulator function the first time it is called (for the first emission from the\n       source Observable) in place of the result from the missing prior call to the accumulator.\n       Note that if you use this version, <code>scan</code> will emit this seed value as its own\n       initial emission. Note also that passing a seed of <code>null</code> is <em>not</em> the\n       same as passing no seed at all. A <code>null</code> seed is a valid variety of seed.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#scan(R,%20rx.functions.Func2)\"><code>scan(R,Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      This operator does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>scan</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>expand scan</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/scan.png\" style=\"width:100%;\" alt=\"scan\">\n      <figcaption><p>\n       RxJS implements the <code>scan</code> operator.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(1, 3)\n    .scan(\n        function (acc, x) {\n            return acc + x;\n        });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 1\nNext: 3\nNext: 6\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/scanSeed.js.png\" style=\"width:100%;\" alt=\"scan\">\n      <figcaption><p>\n       You can optionally pass <code>scan</code> a seed value as an additional parameter.\n       <code>scan</code> will pass this seed value to the accumulator function the first time it is\n       called (for the first emission from the source Observable) in place of the result from the\n       missing prior call to the accumulator.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(1, 3)\n    .scan( function (acc, x) {\n            return acc * x;\n           }, 1 );\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 6\nCompleted</pre></div></figcaption>\n     </figure>\n     <p><code>scan</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     <figure>\n      <img src=\"images/expand.png\" style=\"width:100%;\" alt=\"expand\">\n      <figcaption><p>\n       RxJS also implements the <code>expand</code> operator, which is somewhat similar. Rather than applying\n       the function to the previous return value of the function combined with the next item emitted from the\n       source Observable, such that the number of items it emits is equal to the number emitted by the source\n       Observable, <code>expand</code> simply feeds the return value from the function back into the function\n       without regard to future emissions from the Observable, such that it will just continue to create new\n       values at its own pace.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.return(42)\n    .expand(function (x) { return Rx.Observable.return(42 + x); })\n    .take(5);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 42\nNext: 84\nNext: 126\nNext: 168\nNext: 210\nCompleted</pre></div>\n      <p><code>expand</code> is found in each of the following distributions:</p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.experimental.js</code></li>\n      </ul>\n      <p><code>expand</code> requires one of the following distributions:</p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>scan</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Scan</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>scan</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>scan</code>.\n    </p>\n    <p>\n    Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/scan/scan.php\n\n//Without a seed\n$source = Rx\\Observable::range(1, 3);\n\n$subscription = $source\n    -&gt;scan(function ($acc, $x) {\n        return $acc + $x;\n    })\n    -&gt;subscribe($createStdoutObserver());\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 3\nNext value: 6\nComplete!\n    </pre>\n</div>\n\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/scan/scan-with-seed.php\n\n//With a seed\n$source = Rx\\Observable::range(1, 3);\n\n$subscription = $source\n    -&gt;scan(function ($acc, $x) {\n        return $acc * $x;\n    }, 1)\n    -&gt;subscribe($createStdoutObserver());\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 2\nNext value: 6\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>scan</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>scan</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>scan</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>scan</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Scan"},{"path":"/documentation/operators/join.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#combining\">Combining</a></li>\n  <li class=\"active\">Join</li>\n</ol>\n\n<h1>Join</h1>\n<h3>combine items emitted by two Observables whenever an item from one Observable is emitted during a time window defined according to an item emitted by the other Observable</h3>\n\n<figure>\n <img src=\"images/join.c.png\" style=\"width:100%;\" alt=\"Join\">\n <figcaption><p>\n  The <code>Join</code> operator combines the items emitted by two Observables, and selects which items to\n  combine based on duration-windows that you define on a per-item basis. You implement these windows as\n  Observables whose lifespans begin with each item emitted by either Observable. When such a window-defining\n  Observable either emits an item or completes, the window for the item it is associated with closes. So long as\n  an item&#x2019;s window is open, it will combine with any item emitted by the other Observable. You define the\n  function by which the items combine.\n </p></figcaption>\n</figure>\n\n<figure>\n <img src=\"images/groupJoin.c.png\" style=\"width:100%;\" alt=\"GroupJoin\">\n <figcaption><p>\n  Most ReactiveX implementations that have a <code>Join</code> operator also have a <code>GroupJoin</code>\n  operator that is similar, except that the function you define to combine items emitted by the two Observables\n  pairs individual items emitted by the source Observable not with an item from the second Observable, but with\n  an Observable that emits items from the second Observable that fall in the same window.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/combinelatest.html\"><span class=\"operator\">CombineLatest</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/zip.html\"><span class=\"operator\">Zip</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/17_SequencesOfCoincidence.html#Join\"><cite>Introduction to Rx</cite>: Join</a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/17_SequencesOfCoincidence.html#GroupJoin\"><cite>Introduction to Rx</cite>: GroupJoin</a></li>\n <li><a href=\"http://rxwiki.wikidot.com/101samples#toc39\"><cite>101 Rx Samples</cite>: GroupJoin &#x2014; Joins two streams by matching by one of their attributes</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>join groupJoin</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/join_.png\" style=\"width:100%;\" alt=\"join\">\n     <figcaption><p>\n      The <code>join</code> operator takes four parameters:\n     </p>\n     <ol>\n      <li>the second Observable to combine with the source Observable</li>\n      <li>a function that accepts an item from the source Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the second Observable</li>\n      <li>a function that accepts an item from the second Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the first Observable</li>\n      <li>a function that accepts an item from the first Observable and an item from the second Observable and returns an item to be emitted by the Observable returned from <code>join</code></li>\n     </ol>\n     <p>\n      <code>join</code> does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#join(rx.Observable,%20rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func2)\"><code>Join(Observable,Func1,Func1,Func2)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/groupJoin.png\" style=\"width:100%;\" alt=\"join\">\n     <figcaption><p>\n      The <code>groupJoin</code> operator takes four parameters:\n     </p>\n     <ol>\n      <li>the second Observable to combine with the source Observable</li>\n      <li>a function that accepts an item from the source Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the second Observable</li>\n      <li>a function that accepts an item from the second Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the first Observable</li>\n      <li>a function that accepts an item from the first Observable and an Observable that emits items from the second Observable and returns an item to be emitted by the Observable returned from <code>groupJoin</code></li>\n     </ol>\n     <p>\n      <code>groupJoin</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupJoin(rx.Observable,%20rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func2)\"><code>groupJoin(Observable,Func1,Func1,Func2)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/St.join.png\" style=\"width:100%;\" alt=\"join\">\n     <figcaption><p>\n      Note that there is also a <code>join</code> operator in the optional <code>StringObservable</code> class.\n      It converts an Observable that emits a sequence of strings into an Observable that emits a single string\n      that concatenates them all, separating them by a specified string delimiter.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>join groupJoin</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/join_.png\" style=\"width:100%;\" alt=\"join\">\n     <figcaption><p>\n      The <code>join</code> operator takes four parameters:\n     </p>\n     <ol>\n      <li>the second Observable to combine with the source Observable</li>\n      <li>a function that accepts an item from the source Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the second Observable</li>\n      <li>a function that accepts an item from the second Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the first Observable</li>\n      <li>a function that accepts an item from the first Observable and an item from the second Observable and returns an item to be emitted by the Observable returned from <code>join</code></li>\n     </ol>\n     <p>\n      <code>join</code> does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#join(rx.Observable,%20rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func2)\"><code>Join(Observable,Func1,Func1,Func2)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/groupJoin.png\" style=\"width:100%;\" alt=\"join\">\n     <figcaption><p>\n      The <code>groupJoin</code> operator takes four parameters:\n     </p>\n     <ol>\n      <li>the second Observable to combine with the source Observable</li>\n      <li>a function that accepts an item from the source Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the second Observable</li>\n      <li>a function that accepts an item from the second Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the first Observable</li>\n      <li>a function that accepts an item from the first Observable and an Observable that emits items from the second Observable and returns an item to be emitted by the Observable returned from <code>groupJoin</code></li>\n     </ol>\n     <p>\n      <code>groupJoin</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#groupJoin(rx.Observable,%20rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func2)\"><code>groupJoin(Observable,Func1,Func1,Func2)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/St.join.png\" style=\"width:100%;\" alt=\"join\">\n     <figcaption><p>\n      Note that there is also a <code>join</code> operator in the optional <code>StringObservable</code> class.\n      It converts an Observable that emits a sequence of strings into an Observable that emits a single string\n      that concatenates them all, separating them by a specified string delimiter.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>join groupJoin</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>join groupJoin</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/join_.png\" style=\"width:100%;\" alt=\"join\">\n     <figcaption><p>\n      The <code>join</code> operator takes four parameters:\n     </p>\n     <ol>\n      <li>the second Observable to combine with the source Observable</li>\n      <li>a function that accepts an item from the source Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the second Observable</li>\n      <li>a function that accepts an item from the second Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the first Observable</li>\n      <li>a function that accepts an item from the first Observable and an item from the second Observable and returns an item to be emitted by the Observable returned from <code>join</code></li>\n     </ol>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar xs = Rx.Observable.interval(100)\n    .map(function (x) { return &apos;first&apos; + x; });\n\nvar ys = Rx.Observable.interval(100)\n    .map(function (x) { return &apos;second&apos; + x; });\n\nvar source = xs\n    .join(\n        ys,\n        function () { return Rx.Observable.timer(0); },\n        function () { return Rx.Observable.timer(0); },\n        function (x, y) { return x + y; }\n    )\n    .take(5);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: first0second0\nNext: first1second1\nNext: first2second2\nNext: first3second3\nNext: first4second4\nCompleted</pre></div>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/groupJoin.png\" style=\"width:100%;\" alt=\"join\">\n     <figcaption><p>\n      The <code>groupJoin</code> operator takes four parameters:\n     </p>\n     <ol>\n      <li>the second Observable to combine with the source Observable</li>\n      <li>a function that accepts an item from the source Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the second Observable</li>\n      <li>a function that accepts an item from the second Observable and returns an Observable whose lifespan governs the duration during which that item will combine with items from the first Observable</li>\n      <li>a function that accepts an item from the first Observable and an Observable that emits items from the second Observable and returns an item to be emitted by the Observable returned from <code>groupJoin</code></li>\n     </ol>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nar xs = Rx.Observable.interval(100)\n    .map(function (x) { return &apos;first&apos; + x; });\n\nvar ys = Rx.Observable.interval(100)\n    .map(function (x) { return &apos;second&apos; + x; });\n\nvar source = xs.groupJoin(\n    ys,\n    function () { return Rx.Observable.timer(0); },\n    function () { return Rx.Observable.timer(0); },\n    function (x, yy) {\n        return yy.select(function (y) {\n            return x + y;\n        })\n    }).mergeAll().take(5);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: first0second0\nNext: first1second1\nNext: first2second2\nNext: first3second3\nNext: first4second4\nCompleted</pre></div>\n     </figcaption>\n    </figure>\n    <p>\n     <code>join</code> and <code>groupJoin</code> are found in each of the following distributions:\n    </p>\n    <ul>\n     <li><code>rx.all.js</code></li>\n     <li><code>rx.all.compat.js</code></li>\n     <li><code>rx.coincidence.js</code></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>join groupJoin</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Join GroupJoin</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>join group_join</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>join groupJoin</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Join"},{"path":"/documentation/operators/ignoreelements.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">IgnoreElements</li>\n</ol>\n\n   <h1>IgnoreElements</h1>\n   <h3>do not emit any items from an Observable but mirror its termination notification</h3>\n   <figure>\n    <img src=\"images/ignoreElements.c.png\" style=\"width:100%;\" alt=\"IgnoreElements\">\n    <figcaption><p>\n     The <span class=\"operator\">IgnoreElements</span> operator suppresses all of the items emitted by the\n     source Observable, but allows its termination notification (either <code>onError</code> or\n     <code>onCompleted</code>) to pass through unchanged.\n    </p><p>\n     If you do not care about the items being emitted by an Observable, but you do want to be notified when it\n     completes or when it terminates with an error, you can apply the <code>ignoreElements</code> operator to\n     the Observable, which will ensure that it will never call its observers&#x2019; <code>onNext</code>\n     handlers.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html#IgnoreElements\"><cite>Introduction to Rx</cite>: IgnoreElements</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>ignoreElements</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/ignoreElements.png\" style=\"width:100%;\" alt=\"ignoreElements\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>ignoreElements</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#ignoreElements()\"><code>ignoreElements()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>ignoreElements</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>ignoreElements</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/ignoreElements.png\" style=\"width:100%;\" alt=\"ignoreElements\">\n      <figcaption><p>\n       RxJava implements this operator as <code>ignoreElements</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#ignoreElements()\"><code>ignoreElements()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>ignoreElements</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>ignoreElements</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>ignoreElements</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/ignoreElements.png\" style=\"width:100%;\" alt=\"ignoreElements\">\n      <figcaption><p>\n       RxJS implements this operator as <code>ignoreElements</code>.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 10)\n    .ignoreElements();\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nCompleted</pre></div>\n      <p>\n       <code>ignoreElements</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>ignoreElements</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>IgnoreElements</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>ignore_elements</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>ignore_elements</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"IgnoreElements"},{"path":"/documentation/operators/do.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#utility\">Utility</a></li>\n  <li class=\"active\">Do</li>\n</ol>\n\n<h1>Do</h1>\n<h3>register an action to take upon a variety of Observable lifecycle events</h3>\n\n<figure>\n <img src=\"images/do.c.png\" style=\"width:100%;\" alt=\"Do\">\n <figcaption><p>\n  You can register callbacks that ReactiveX will call when certain events take place on an Observable, where\n  those callbacks will be called independently from the normal set of notifications associated with an\n  Observable cascade. There are a variety of operators that various ReactiveX implementations have designed to\n  allow for this.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/subscribe.html\"><span class=\"operator\">Subscribe</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/09_SideEffects.html#Do\"><cite>Introduction to Rx</cite>: Do</a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/11_AdvancedErrorHandling.html#Finally\"><cite>Introduction to Rx</cite>: Finally</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>do finally</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>finally</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>doOnCompleted doOnEach doOnError doOnNext doOnRequest doOnSubscribe doOnTerminate doOnUnsubscribe finallyDo</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <p>\n     RxGroovy has several <span class=\"operator\">Do</span> variants.\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/doOnEach.png\" style=\"width:100%;\" alt=\"doOnEach\">\n     <figcaption><p>\n      The <code>doOnEach</code> operator allows you to establish a callback that the resulting Observable will\n      call each time it emits an item. You can pass this callback either in the form of an <code>Action</code>\n      that takes an <code>onNext</code> variety of <code>Notification</code> as its sole parameter, or you can\n      pass in an Observer whose <code>onNext</code> method will be called as if it had subscribed to the\n      Observable.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnEach(rx.functions.Action1)\"><code>doOnEach(Action1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnEach(rx.Observer)\"><code>doOnEach(Observer)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnNext.png\" style=\"width:100%;\" alt=\"doOnNext\">\n     <figcaption><p>\n      The <code>doOnNext</code> operator is much like <code>doOnEach(Action1)</code> except that the\n      <code>Action</code> that you pass it as a parameter does not accept a <code>Notification</code> but\n      instead simply accepts the emitted item.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnNext(rx.functions.Action1)\"><code>doOnNext(Action1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <figcaption><p>\n      The <code>doOnRequest</code> operator (new in RxGroovy 1.1) registers an <code>Action</code> which will be\n      called whenever an observer requests additional items from the resulting Observable. That\n      <code>Action</code> receives as its parameter the number of items that the observer is requesting.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnRequest(rx.functions.Action1)\"><code>doOnRequest(Action1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnSubscribe.png\" style=\"width:100%;\" alt=\"doOnSubscribe\">\n     <figcaption><p>\n      The <code>doOnSubscribe</code> operator registers an <code>Action</code> which will be called whenever\n      an observer subscribes to the resulting Observable.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnSubscribe(rx.functions.Action0)\"><code>doOnSubscribe(Action0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnUnsubscribe.png\" style=\"width:100%;\" alt=\"doOnUnsubscribe\">\n     <figcaption><p>\n      The <code>doOnUnsubscribe</code> operator registers an <code>Action</code> which will be called whenever\n      an observer unsubscribes from the resulting Observable.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnUnsubscribe(rx.functions.Action0)\"><code>doOnUnsubscribe(Action0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnCompleted.png\" style=\"width:100%;\" alt=\"doOnCompleted\">\n     <figcaption><p>\n      The <code>doOnCompleted</code> operator registers an <code>Action</code> which will be called if the\n      resulting Observable terminates normally, calling <code>onCompleted</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnCompleted(rx.functions.Action0)\"><code>doOnCompleted(Action0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnError.png\" style=\"width:100%;\" alt=\"doOnError\">\n     <figcaption><p>\n      The <code>doOnError</code> operator registers an <code>Action</code> which will be called if the\n      resulting Observable terminates abnormally, calling <code>onError</code>. This <code>Action</code> will\n      be passed the <code>Throwable</code> representing the error.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnError(rx.functions.Action1)\"><code>doOnError(Action1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnTerminate.png\" style=\"width:100%;\" alt=\"doOnTerminate\">\n     <figcaption><p>\n      The <code>doOnTerminate</code> operator registers an <code>Action</code> which will be called just\n      <em>before</em> the resulting Observable terminates, whether normally or with an error.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnTerminate(rx.functions.Action0)\"><code>doOnTerminate(Action0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/finallyDo.png\" style=\"width:100%;\" alt=\"finallyDo\">\n     <figcaption><p>\n      The <code>finallyDo</code> operator registers an <code>Action</code> which will be called just\n      <em>after</em> the resulting Observable terminates, whether normally or with an error.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\ndef numbers = Observable.from([1, 2, 3, 4, 5]);\n\nnumbers.finallyDo({ println(&apos;Finally&apos;); }).subscribe(\n   { println(it); },                          // onNext\n   { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n   { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n1\n2\n3\n4\n5\nSequence complete\nFinally</pre></div>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#finallyDo(rx.functions.Action0)\"><code>finallyDo(Action0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>doOnCompleted doOnEach doOnError doOnNext doOnRequest doOnSubscribe doOnTerminate doOnUnsubscribe finallyDo doAfterTerminate</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     RxJava has several <span class=\"operator\">Do</span> variants.\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/doOnEach.png\" style=\"width:100%;\" alt=\"doOnEach\">\n     <figcaption><p>\n      The <code>doOnEach</code> operator allows you to establish a callback that the resulting Observable will\n      call each time it emits an item. You can pass this callback either in the form of an <code>Action</code>\n      that takes an <code>onNext</code> variety of <code>Notification</code> as its sole parameter, or you can\n      pass in an Observer whose <code>onNext</code> method will be called as if it had subscribed to the\n      Observable.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnEach(rx.functions.Action1)\"><code>doOnEach(Action1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnEach(rx.Observer)\"><code>doOnEach(Observer)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnNext.png\" style=\"width:100%;\" alt=\"doOnNext\">\n     <figcaption><p>\n      The <code>doOnNext</code> operator is much like <code>doOnEach(Action1)</code> except that the\n      <code>Action</code> that you pass it as a parameter does not accept a <code>Notification</code> but\n      instead simply accepts the emitted item.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable.just(1, 2, 3)\n          .doOnNext(new Action1&lt;Integer&gt;() {\n          @Override\n          public void call(Integer item) {\n            if( item &gt; 1 ) {\n              throw new RuntimeException( &quot;Item exceeds maximum value&quot; );\n            }\n          }\n        }).subscribe(new Subscriber&lt;Integer&gt;() {\n        @Override\n        public void onNext(Integer item) {\n            System.out.println(&quot;Next: &quot; + item);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            System.err.println(&quot;Error: &quot; + error.getMessage());\n        }\n\n        @Override\n        public void onCompleted() {\n            System.out.println(&quot;Sequence complete.&quot;);\n        }\n    });</pre></div>\n     <div class=\"output\"><pre>\nNext: 1\nError: Item exceeds maximum value</pre></div>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnNext(rx.functions.Action1)\"><code>doOnNext(Action1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <figcaption><p>\n      The <code>doOnRequest</code> operator (new in RxJava 1.1) registers an <code>Action</code> which will be\n      called whenever an observer requests additional items from the resulting Observable. That\n      <code>Action</code> receives as its parameter the number of items that the observer is requesting.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnRequest(rx.functions.Action1)\"><code>doOnRequest(Action1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnSubscribe.png\" style=\"width:100%;\" alt=\"doOnSubscribe\">\n     <figcaption><p>\n      The <code>doOnSubscribe</code> operator registers an <code>Action</code> which will be called whenever\n      an observer subscribes to the resulting Observable.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnSubscribe(rx.functions.Action0)\"><code>doOnSubscribe(Action0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnUnsubscribe.png\" style=\"width:100%;\" alt=\"doOnUnsubscribe\">\n     <figcaption><p>\n      The <code>doOnUnsubscribe</code> operator registers an <code>Action</code> which will be called whenever\n      an observer unsubscribes from the resulting Observable.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnUnsubscribe(rx.functions.Action0)\"><code>doOnUnsubscribe(Action0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnCompleted.png\" style=\"width:100%;\" alt=\"doOnCompleted\">\n     <figcaption><p>\n      The <code>doOnCompleted</code> operator registers an <code>Action</code> which will be called if the\n      resulting Observable terminates normally, calling <code>onCompleted</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnCompleted(rx.functions.Action0)\"><code>doOnCompleted(Action0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnError.png\" style=\"width:100%;\" alt=\"doOnError\">\n     <figcaption><p>\n      The <code>doOnError</code> operator registers an <code>Action</code> which will be called if the\n      resulting Observable terminates abnormally, calling <code>onError</code>. This <code>Action</code> will\n      be passed the <code>Throwable</code> representing the error.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnError(rx.functions.Action1)\"><code>doOnError(Action1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnTerminate.png\" style=\"width:100%;\" alt=\"doOnTerminate\">\n     <figcaption><p>\n      The <code>doOnTerminate</code> operator registers an <code>Action</code> which will be called just\n      <em>before</em> the resulting Observable terminates, whether normally or with an error.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnTerminate(rx.functions.Action0)\"><code>doOnTerminate(Action0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/finallyDo.png\" style=\"width:100%;\" alt=\"finallyDo\">\n     <figcaption><p>\n      <code>finallyDo</code> is deprecated since RxJava 1.1.1, in favor of \n      <code>doAfterTerminate</code> with the same behavior.\n      </p><p>\n      The <code>finallyDo</code> operator registers an <code>Action</code> which will be called just\n      <em>after</em> the resulting Observable terminates, whether normally or with an error.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#finallyDo(rx.functions.Action0)\"><code>finallyDo(Action0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doAfterTerminate.png\" style=\"width:100%;\" alt=\"doAfterTerminate\">\n     <figcaption><p>\n      The <code>doAfterTerminate</code> operator registers an <code>Action</code> which will be called just\n      <em>after</em> the resulting Observable terminates, whether normally or with an error.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#doAfterTerminate(rx.functions.Action0)\"><code>doAfterTerminate(Action0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>doAfterTerminate doOnComplete doOnDispose doOnEach doOnError doOnLifecycle doOnNext doOnSubscribe doOnTerminate onTerminateDetach</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>do doOnCompleted doOnError doOnNext finally tap tapOnCompleted tapOnError tapOnNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/do.png\" style=\"width:100%;\" alt=\"do\">\n     <figcaption><p>\n      RxJS implements the basic <span class=\"operator\">Do</span> operator as <code>do</code> or <code>tap</code>\n      (two names for the same operator). You have two choices for how to use this operator:\n     </p>\n     <ol>\n      <li>You can pass it an Observer, in which case <code>do</code>/<code>tap</code> will call that\n          Observer&#x2019;s methods as though that Observer had subscribed to the resulting Observable.</li>\n      <li>You can pass in a set of 1&#x2013;3 individual functions (<code>onNext</code>, <code>onError</code>,\n          and <code>onCompleted</code>) that <code>do</code>/<code>tap</code> will call along with the\n          similarly-named functions of any of its observers.</li>\n     </ol>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\n/* Using an observer */\nvar observer = Rx.Observer.create(\n  function (x) { console.log(&apos;Do Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Do Error: %s&apos;, err); },\n  function () { console.log(&apos;Do Completed&apos;); }\n);\n\nvar source = Rx.Observable.range(0, 3)\n    .do(observer);\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nDo Next: 0\nNext: 0\nDo Next: 1\nNext: 1\nDo Next: 2\nNext: 2\nDo Completed\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\n/* Using a function */\nvar source = Rx.Observable.range(0, 3)\n  .do(\n    function (x)   { console.log(&apos;Do Next:&apos;, x); },\n    function (err) { console.log(&apos;Do Error:&apos;, err); },\n    function ()    { console.log(&apos;Do Completed&apos;); }\n  );\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nDo Next: 0\nNext: 0\nDo Next: 1\nNext: 1\nDo Next: 2\nNext: 2\nDo Completed\nCompleted</pre></div>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnNext.png\" style=\"width:100%;\" alt=\"doOnNext\">\n     <figcaption><p>\n      RxJS also implements <code>doOnNext</code> or <code>tapOnNext</code> (two names for the same operator).\n      It is a specialized form of <span class=\"operator\">Do</span> that responds only to the\n      <code>onNext</code> case, by calling a callback function you provide as a parameter. You may also\n      optionally pass a second parameter that will be the &#x201C;<code>this</code>&#x201D; object from the\n      point of view of your callback function when it executes.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 3)\n  .doOnNext(\n    function () { this.log(&apos;Do Next: %s&apos;, x); },\n    console\n  );\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nDo Next: 0\nNext: 0\nDo Next: 1\nNext: 1\nDo Next: 2\nNext: 2\nCompleted</pre></div>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnError.png\" style=\"width:100%;\" alt=\"doOnError\">\n     <figcaption><p>\n      RxJS also implements <code>doOnError</code> or <code>tapOnError</code> (two names for the same operator).\n      It is a specialized form of <span class=\"operator\">Do</span> that responds only to the\n      <code>onError</code> case, by calling a callback function you provide as a parameter. You may also\n      optionally pass a second parameter that will be the &#x201C;<code>this</code>&#x201D; object from the\n      point of view of your callback function when it executes.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.throw(new Error());\n  .doOnError(\n    function (err) { this.log(&apos;Do Error: %s&apos;, err); },\n    console\n  );\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nDo Error: Error\nError: Error</pre></div>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/doOnCompleted.png\" style=\"width:100%;\" alt=\"doOnCompleted\">\n     <figcaption><p>\n      RxJS also implements <code>doOnCompleted</code> or <code>tapOnCompleted</code> (two names for the same\n      operator). It is a specialized form of <span class=\"operator\">Do</span> that responds only to the\n      <code>onCompleted</code> case, by calling a callback function you provide as a parameter. You may also\n      optionally pass a second parameter that will be the &#x201C;<code>this</code>&#x201D; object from the\n      point of view of your callback function when it executes.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 3)\n  .doOnCompleted(\n    function () { this.log(&apos;Do Completed&apos;); },\n    console\n  );\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nDo Completed\nCompleted</pre></div>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/finally.png\" style=\"width:100%;\" alt=\"finally\">\n     <figcaption><p>\n      RxJS also implements a <code>finally</code> operator. It takes a function that will be called after the\n      resulting Observable terminates, whether normally (<code>onCompleted</code>) or abnormally\n      (<code>onError</code>).\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.throw(new Error())\n    .finally(function () {\n        console.log(&apos;Finally&apos;);\n    });\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: &apos; + x); },\n  function (err) { console.log(&apos;Error: &apos; + err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nError: Error\nFinally</pre></div>\n     </figcaption>\n    </figure>\n    <p>\n     <code>do</code>/<code>tap</code>, <code>doOnNext</code>/<code>tapOnNext</code>,\n     <code>doOnError</code>/<code>tapOnError</code>, <code>doOnCompleted</code>/<code>tapOnCompleted</code>, and\n     <code>finally</code> are found in each of the following distributions:\n    </p>\n    <ul>\n     <li><code>rx.js</code></li>\n     <li><code>rx.all.js</code></li>\n     <li><code>rx.all.compat.js</code></li>\n     <li><code>rx.compat.js</code></li>\n     <li><code>rx.lite.js</code></li>\n     <li><code>rx.lite.compat.js</code></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>doOnCompleted doOnEach doOnError doOnNext doOnSubscribe doOnTerminate doOnUnsubscribe finallyDo</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Do Finally</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>doOnEach doOnNext doOnError doOnCompleted</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>doOnEach</code>.\n    </p>\n    <p>\n    Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence. This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/do/doOnEach.php\n\n$source = \\Rx\\Observable::range(0, 3)\n    -&gt;doOnEach(new \\Rx\\Observer\\CallbackObserver(\n        function ($x) {\n            echo &apos;Do Next:&apos;, $x, PHP_EOL;\n        },\n        function (Exception $err) {\n            echo &apos;Do Error:&apos;, $err-&gt;getMessage(), PHP_EOL;\n        },\n        function () {\n            echo &apos;Do Completed&apos;, PHP_EOL;\n        }\n    ));\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nDo Next:0\nNext value: 0\nDo Next:1\nNext value: 1\nDo Next:2\nNext value: 2\nDo Completed\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>doOnNext</code>.\n    </p>\n    <p>\n    \n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/do/doOnNext.php\n\n$source = \\Rx\\Observable::range(0, 3)\n    -&gt;doOnNext(function ($x) {\n        echo &apos;Do Next:&apos;, $x, PHP_EOL;\n    });\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nDo Next:0\nNext value: 0\nDo Next:1\nNext value: 1\nDo Next:2\nNext value: 2\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>doOnError</code>.\n    </p>\n    <p>\n    \n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/do/doOnError.php\n\n$source = \\Rx\\Observable::error(new Exception(&apos;Oops&apos;))\n    -&gt;doOnError(function (Exception $err) {\n        echo &apos;Do Error:&apos;, $err-&gt;getMessage(), PHP_EOL;\n    });\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nDo Error:Oops\nException: Oops\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>doOnCompleted</code>.\n    </p>\n    <p>\n    \n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/do/doOnCompleted.php\n\n$source = \\Rx\\Observable::emptyObservable()\n    -&gt;doOnCompleted(function () {\n        echo &apos;Do Completed&apos;, PHP_EOL;\n    });\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nDo Completed\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>do_action finally_action tap</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>ensures tap</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>doOnCompleted doOnEach doOnError doOnNext doOnRequest doOnSubscribe doOnTerminate doOnUnsubscribe finallyDo</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>doOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Do"},{"path":"/documentation/operators/connect.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#connectable\">Connectable</a></li>\n  <li class=\"active\">Connect</li>\n</ol>\n\n<h1>Connect</h1>\n<h3>instruct a connectable Observable to begin emitting items to its subscribers</h3>\n\n<figure>\n <img src=\"images/publishConnect.c.png\" style=\"width:100%;\" alt=\"Connect\">\n <figcaption><p>\n  A <dfn>connectable Observable</dfn> resembles an ordinary Observable, except that it does not begin\n  emitting items when it is subscribed to, but only when the <span class=\"operator\">Connect</span>\n  operator is applied to it. In this way you can wait for all intended observers to subscribe to the\n  Observable before the Observable begins emitting items.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/publish.html\"><span class=\"operator\">Publish</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/refcount.html\"><span class=\"operator\">RefCount</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/replay.html\"><span class=\"operator\">Replay</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/14_HotAndColdObservables.html#PublishAndConnect\"><cite>Introduction to Rx</cite>: Publish &amp; Connect</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>connect connect_forever</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>connect</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/publishConnect.png\" style=\"width:100%;\" alt=\"connect\">\n     <figcaption><p>\n      In RxGroovy, the <code>connect</code> operator is a method of the\n      <code>ConnectableObservable</code> interface. You can use the <code>publish</code> operator to\n      convert an ordinary Observable into a <code>ConnectableObservable</code>.\n     </p><p>\n      Call a <code>ConnectableObservable</code>&#x2019;s <code>connect</code> method to instruct it\n      to begin emitting the items from its underlying Observable to its Subscribers.\n     </p><p>\n      The <code>connect</code> method returns a <code>Subscription</code>. You can call that\n      <code>Subscription</code> object&#x2019;s <code>unsubscribe</code> method to instruct the\n      Observable to stop emitting items to its Subscribers.\n     </p><p>\n      You can also use the <code>connect</code> method to instruct an Observable to begin emitting\n      items (or, to begin generating items that would be emitted) even before any Subscriber has\n      subscribed to it. In this way you can turn a cold Observable into a hot one.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#connect()\"><code>connect()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#connect(rx.functions.Action1)\"><code>connect(Action1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>connect</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/publishConnect.png\" style=\"width:100%;\" alt=\"connect\">\n     <figcaption><p>\n      In RxJava, the <code>connect</code> operator is a method of the\n      <code>ConnectableObservable</code> interface. You can use the <code>publish</code> operator to\n      convert an ordinary Observable into a <code>ConnectableObservable</code>.\n     </p><p>\n      Call a <code>ConnectableObservable</code>&#x2019;s <code>connect</code> method to instruct it\n      to begin emitting the items from its underlying Observable to its Subscribers.\n     </p><p>\n      The <code>connect</code> method returns a <code>Subscription</code>. You can call that\n      <code>Subscription</code> object&#x2019;s <code>unsubscribe</code> method to instruct the\n      Observable to stop emitting items to its Subscribers.\n     </p><p>\n      You can also use the <code>connect</code> method to instruct an Observable to begin emitting\n      items (or, to begin generating items that would be emitted) even before any Subscriber has\n      subscribed to it. In this way you can turn a cold Observable into a hot one.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#connect()\"><code>connect()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/ConnectableObservable.html#connect(rx.functions.Action1)\"><code>connect(Action1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>connect</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>connect</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/publishConnect.png\" style=\"width:100%;\" alt=\"connect\">\n     <figcaption><p>\n      In RxJS, the <code>connect</code> operator is a method of the\n      <code>ConnectableObservable</code> prototype. You can use the <code>publish</code> operator to\n      convert an ordinary Observable into a <code>ConnectableObservable</code>.\n     </p><p>\n      Call a <code>ConnectableObservable</code>&#x2019;s <code>connect</code> method to instruct it\n      to begin emitting the items from its underlying Observable to its Subscribers.\n     </p><p>\n      The <code>connect</code> method returns a <code>Disposable</code>. You can call that\n      <code>Disposable</code> object&#x2019;s <code>dispose</code> method to instruct the Observable\n      to stop emitting items to its Subscribers.\n     </p><p>\n      You can also use the <code>connect</code> method to instruct an Observable to begin emitting\n      items (or, to begin generating items that would be emitted) even before any Subscriber has\n      subscribed to it. In this way you can turn a cold Observable into a hot one.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar interval = Rx.Observable.interval(1000);\n\nvar source = interval\n    .take(2)\n    .do(function (x) { console.log(&apos;Side effect&apos;); });\n\nvar published = source.publish();\n\npublished.subscribe(createObserver(&apos;SourceA&apos;));\npublished.subscribe(createObserver(&apos;SourceB&apos;));\n\n// Connect the source\nvar connection = published.connect();\n\nfunction createObserver(tag) {\n    return Rx.Observer.create(\n        function (x) { console.log(&apos;Next: &apos; + tag + x); },\n        function (err) { console.log(&apos;Error: &apos; + err); },\n        function () { console.log(&apos;Completed&apos;); });\n}</pre></div><div class=\"output\"><pre>\nSide effect\nNext: SourceA0\nNext: SourceB0\nSide effect\nNext: SourceA1\nNext: SourceB1\nCompleted\nCompleted</pre></div>\n     <p>\n      <code>connect</code> is found in the following packages:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.all.binding.js</code></li>\n     </ul>\n     <p>\n      <code>connect</code> requires one of the following packages:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>connect</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Connect</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>connect</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>connect</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Connect"},{"path":"/documentation/operators/timeout.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#utility\">Utility</a></li>\n  <li class=\"active\">Timeout</li>\n</ol>\n\n   <h1>Timeout</h1>\n   <h3>mirror the source Observable, but issue an error notification if a particular period of time elapses without any emitted items</h3>\n\n   <figure>\n    <img src=\"images/timeout.c.png\" style=\"width:100%;\" alt=\"Timeout\">\n    <figcaption><p>\n     The <span class=\"operator\">Timeout</span> operator allows you to abort an Observable with an\n     <code>onError</code> termination if that Observable fails to emit any items during a specified span of\n     time.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/debounce.html\"><span class=\"operator\">Debounce</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/13_TimeShiftedSequences.html#Timeout\"><cite>Introduction to Rx</cite>: Timeout</a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc33\"><cite>101 Rx Samples</cite>: Timeout &#x2014; Simple</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>timeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxGroovy implements this operator as <code>timeout</code>, but in several variants.\n     </p>\n     <figure>\n      <img src=\"images/timeout.1.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       The first variant accepts parameters that define a duration of time (a quantity of time, and a\n       <code>TimeUnit</code> that this quantity is denominated in). Each time the source Observable emits an\n       item, <code>timeout</code> starts a timer, and if that timer exceeds the duration before the source\n       Observable emits another item, <code>timeout</code> terminates its Observable with an error\n       (<code>TimeoutException</code>).\n      </p><p>\n       By default this variant of <code>timeout</code> operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can choose a different Scheduler by passing it in as\n       an optional third parameter to <code>timeout</code>\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit)\"><code>timeout(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>timeout()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeout.2.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       A second variant of <code>timeout</code> differs from the first in that instead of issuing an error\n       notification in case of a timeout condition, it instead immediately switches to a backup Observable that\n       you specify.\n      </p><p>\n       By default this variant of <code>timeout</code> operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can choose a different Scheduler by passing it in as\n       an optional third parameter to <code>timeout</code>\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Observable)\"><code>timeout(long,TimeUnit,Observable)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Observable,%20rx.Scheduler)\"><code>timeout(long,TimeUnit,Observable,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeout3.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       A third variant of <code>timeout</code> does not use a constant timeout duration, but sets its timeout\n       duration on a per-item basis by passing each item from the source Observable into a function that returns\n       an Observable and then monitoring those Observables. If any such Observable completes before the source\n       Observable emits another item, this is considered a timeout condition, and triggers an\n       <code>onError</code> notification (&#x201C;<code>TimeoutException</code>&#x201D;) from the Observable\n       <code>timeout</code> returns.\n      </p><p>\n       This variant of <code>timeout</code> by default runs on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func1)\"><code>timeout(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeout4.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       There is also a variant of <code>timeout</code> that both uses a per-item Observable to set the timeout\n       duration and switches to a backup Observable in case of a timeout.\n      </p><p>\n       This variant of <code>timeout</code> by default runs on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func1,%20rx.Observable)\"><code>timeout(Func1,Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeout5.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       The variant of <code>timeout</code> that uses a per-item Observable to set the timeout has a variant\n       that allows you to pass in a function that returns an Observable that acts as a timeout timer for the\n       very first item emitted by the source Observable (in the absence of this, there would be no timeout for\n       the first item).\n      </p><p>\n       This variant of <code>timeout</code> by default runs on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func0,%20rx.functions.Func1)\"><code>timeout(Func0,Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeout6.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       And that variant also has a cousin that will switch to a specified backup Observable rather than emitting\n       an error upon hitting a timeout condition.\n      </p><p>\n       This variant of <code>timeout</code> by default runs on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func0,%20rx.functions.Func1,%20rx.Observable)\"><code>timeout(Func0,Func1,Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>timeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJava implements this operator as <code>timeout</code>, but in several variants.\n     </p>\n     <figure>\n      <img src=\"images/timeout.1.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       The first variant accepts parameters that define a duration of time (a quantity of time, and a\n       <code>TimeUnit</code> that this quantity is denominated in). Each time the source Observable emits an\n       item, <code>timeout</code> starts a timer, and if that timer exceeds the duration before the source\n       Observable emits another item, <code>timeout</code> terminates its Observable with an error\n       (<code>TimeoutException</code>).\n      </p><p>\n       By default this variant of <code>timeout</code> operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can choose a different Scheduler by passing it in as\n       an optional third parameter to <code>timeout</code>\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit)\"><code>timeout(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>timeout()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeout.2.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       A second variant of <code>timeout</code> differs from the first in that instead of issuing an error\n       notification in case of a timeout condition, it instead immediately switches to a backup Observable that\n       you specify.\n      </p><p>\n       By default this variant of <code>timeout</code> operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can choose a different Scheduler by passing it in as\n       an optional third parameter to <code>timeout</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Observable)\"><code>timeout(long,TimeUnit,Observable)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(long,%20java.util.concurrent.TimeUnit,%20rx.Observable,%20rx.Scheduler)\"><code>timeout(long,TimeUnit,Observable,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeout3.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       A third variant of <code>timeout</code> does not use a constant timeout duration, but sets its timeout\n       duration on a per-item basis by passing each item from the source Observable into a function that returns\n       an Observable and then monitoring those Observables. If any such Observable completes before the source\n       Observable emits another item, this is considered a timeout condition, and triggers an\n       <code>onError</code> notification (&#x201C;<code>TimeoutException</code>&#x201D;) from the Observable\n       <code>timeout</code> returns.\n      </p><p>\n       This variant of <code>timeout</code> by default runs on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func1)\"><code>timeout(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeout4.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       There is also a variant of <code>timeout</code> that both uses a per-item Observable to set the timeout\n       duration and switches to a backup Observable in case of a timeout.\n      </p><p>\n       This variant of <code>timeout</code> by default runs on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func1,%20rx.Observable)\"><code>timeout(Func1,Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeout5.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       The variant of <code>timeout</code> that uses a per-item Observable to set the timeout has a variant\n       that allows you to pass in a function that returns an Observable that acts as a timeout timer for the\n       very first item emitted by the source Observable (in the absence of this, there would be no timeout for\n       the first item).\n      </p><p>\n       This variant of <code>timeout</code> by default runs on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func0,%20rx.functions.Func1)\"><code>timeout(Func0,Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeout6.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       And that variant also has a cousin that will switch to a specified backup Observable rather than emitting\n       an error upon hitting a timeout condition.\n      </p><p>\n       This variant of <code>timeout</code> by default runs on the <code>immediate</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timeout(rx.functions.Func0,%20rx.functions.Func1,%20rx.Observable)\"><code>timeout(Func0,Func1,Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>timeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>timeout timeoutWithSelector</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJS implements this operator as <code>timeout</code> and <code>timeoutWithSelector</code>:\n     </p>\n     <figure>\n      <img src=\"images/timeout.1.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       One variant of <code>timeout</code> accepts a duration of time (in milliseconds). Each time the source\n       Observable emits an item, <code>timeout</code> starts a timer, and if that timer exceeds the duration\n       before the source Observable emits another item, <code>timeout</code> terminates its Observable with an\n       error (&#x201C;<code>Timeout</code>&#x201D; or a string of your choice that you pass as an optional\n       second parameter).\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable\n    .return(42)\n    .delay(5000)\n    .timeout(200, &apos;Timeout has occurred.&apos;);\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nError: Timeout has occurred.</pre></div></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeout.2.png\" style=\"width:100%;\" alt=\"timeout\">\n      <figcaption><p>\n       Another variant allows you to instruct <code>timeout</code> to switch to a backup Observable that you\n       specify, rather than terminating with an error, if the timeout condition is triggered. To use this\n       variant, pass the backup Observable (or <code>Promise</code>) as the second parameter to\n       <code>timeout</code>.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable\n  .return(42)\n  .delay(5000)\n  .timeout(200, Promise.resolve(42));\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeoutWithSelector3.png\" style=\"width:100%;\" alt=\"timeoutWithSelector\">\n      <figcaption><p>\n       <code>timeoutWithSelector</code> does not use a constant timeout duration, but sets its timeout duration\n       on a per-item basis by passing each item from the source Observable into a function that returns\n       an Observable and then monitoring those Observables. If any such Observable completes before the source\n       Observable emits another item, this is considered a timeout condition, and triggers an\n       <code>onError</code> notification (&#x201C;<code>Error: Timeout</code>&#x201D;) from the Observable\n       <code>timeoutWithSelector</code> returns.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar array = [\n    200,\n    300,\n    350,\n    400\n];\n\nvar source = Rx.Observable\n    .for(array, function (x) {\n        return Rx.Observable.timer(x);\n    })\n    .map(function (x, i) { return i; })\n    .timeoutWithSelector(function (x) {\n        return Rx.Observable.timer(400);\n    });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nError: Error: Timeout</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeoutWithSelector4.png\" style=\"width:100%;\" alt=\"timeoutWithSelector\">\n      <figcaption><p>\n       There is also a variant of <code>timeoutWithSelector</code> that both uses a per-item Observable to set\n       the timeout duration and switches to a backup Observable in case of a timeout.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar array = [\n    200,\n    300,\n    350,\n    400\n];\n\nvar source = Rx.Observable\n    .for(array, function (x) {\n        return Rx.Observable.timer(x);\n    })\n    .map(function (x, i) { return i; })\n    .timeoutWithSelector(function (x) {\n        return Rx.Observable.timer(400);\n    }, Rx.Observable.return(42));\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nNext: 42\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeoutWithSelector5.png\" style=\"width:100%;\" alt=\"timeoutWithSelector\">\n      <figcaption><p>\n       The variant of <code>timeoutWithSelector</code> that uses a per-item Observable to set the timeout has a\n       variant that allows you to pass in an Observable that acts as a timeout timer for the very first item\n       emitted by the source Observable (in the absence of this, there would be no timeout for the first item;\n       that is to say, the default Observable that governs this first timeout period is\n       <code>Rx.Observable.never()</code>).\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar array = [\n    200,\n    300,\n    350,\n    400\n];\n\nvar source = Rx.Observable\n    .for(array, function (x) {\n        return Rx.Observable.timer(x);\n    })\n    .map(function (x, i) { return i; })\n    .timeoutWithSelector(Rx.Observable.timer(250), function (x) {\n        return Rx.Observable.timer(400);\n    });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nError: Error: Timeout</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/timeoutWithSelector6.png\" style=\"width:100%;\" alt=\"timeoutWithSelector\">\n      <figcaption><p>\n       And that variant also has a cousin that will switch to a specified backup Observable rather than emitting\n       an error upon hitting a timeout condition.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar array = [\n    200,\n    300,\n    350,\n    400\n];\n\nvar source = Rx.Observable\n    .for(array, function (x) {\n        return Rx.Observable.timer(x);\n    })\n    .map(function (x, i) { return i; })\n    .timeoutWithSelector(Rx.Observable.timer(250), function (x) {\n        return Rx.Observable.timer(400);\n    }, Rx.Observable.return(42));\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nNext: 42\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <p>\n      <code>timeout</code> and <code>timeoutWithSelector</code> are found in each of the following\n      distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.time.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     <p>\n      They require one of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>timeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Timeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>timeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>timeout</code>.\n    </p>\n    <p>\n    \n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/timeout/timeout.php\n\n$loop = new \\React\\EventLoop\\StreamSelectLoop();\n\n$scheduler  = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\nRx\\Observable::interval(1000)\n    -&gt;timeout(500)\n    -&gt;subscribe($createStdoutObserver(&quot;One second - &quot;), $scheduler);\n\nRx\\Observable::interval(100)\n    -&gt;take(3)\n    -&gt;timeout(500)\n    -&gt;subscribe($createStdoutObserver(&quot;100 ms     - &quot;), $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\n100 ms     - Next value: 0\n100 ms     - Next value: 1\n100 ms     - Next value: 2\n100 ms     - Complete!\nOne second - Exception: timeout\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>timeout timeout_with_selector</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>timeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>timeout</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Timeout"},{"path":"/documentation/operators/switch.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#combining\">Combining</a></li>\n  <li class=\"active\">Switch</li>\n</ol>\n\n<h1>Switch</h1>\n<h3>convert an Observable that emits Observables into a single Observable that emits the items emitted by the most-recently-emitted of those Observables</h3>\n\n<figure>\n <img src=\"images/switch.c.png\" style=\"width:100%;\" alt=\"Switch\">\n <figcaption><p>\n  <span class=\"operator\">Switch</span> subscribes to an Observable that emits Observables. Each time it observes\n  one of these emitted Observables, the Observable returned by <span class=\"operator\">Switch</span> unsubscribes\n  from the previously-emitted Observable begins emitting items from the latest Observable. Note that it will\n  unsubscribe from the previously-emitted Observable when a new Observable is emitted from the source\n  Observable, not when the new Observable emits an item. This means that items emitted by the previous\n  Observable between the time the subsequent Observable is emitted and the time that subsequent Observable\n  itself begins emitting items will be dropped (as with the yellow circle in the diagram above).\n </p></figcaption>\n</figure>\n\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/amb.html\"><span class=\"operator\">Amb</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/concat.html\"><span class=\"operator\">Concat</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/flatmap.html\"><span class=\"operator\">FlatMap</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/12_CombiningSequences.html#Switch\"><cite>Introduction to Rx</cite>: Switch</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>switch_on_next</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>switchOnNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/switchDo.png\" style=\"width:100%;\" alt=\"switch\">\n     <figcaption><p>\n      RxGroovy implements this operator as <code>switchOnNext</code>. It does not by default operate on any\n      particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#switchOnNext(rx.Observable)\"><code>switchOnNext(Observable)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>switchOnNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/switchDo.png\" style=\"width:100%;\" alt=\"switch\">\n     <figcaption><p>\n      RxJava implements this operator as <code>switchOnNext</code>. It does not by default operate on any\n      particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#switchOnNext(rx.Observable)\"><code>switchOnNext(Observable)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>switchOnNext switchOnNextDelayError</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>switch</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/switch.png\" style=\"width:100%;\" alt=\"switch\">\n     <figcaption><p>\n      RxJS implements this operator as <code>switch</code>\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 3)\n    .select(function (x) { return Rx.Observable.range(x, 3); })\n    .switch();\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nNext: 3\nNext: 4\nCompleted</pre></div>\n     <p><code>switch</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>switchOnNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Switch</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>switchLatest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>switchLatest</code>.\n    </p>\n    <p>\n    Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/switch/switchLatest.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$source = Rx\\Observable::range(0, 3)\n    -&gt;map(function ($x) {\n        return \\Rx\\Observable::range($x, 3);\n    })\n    -&gt;switchLatest();\n\n$subscription = $source-&gt;subscribe($stdoutObserver, $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0\nNext value: 1\nNext value: 2\nNext value: 3\nNext value: 4\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>exclusive select_switch switch_latest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>latest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>switch</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>switchLatest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Switch"},{"path":"/documentation/operators/elementat.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">ElementAt</li>\n</ol>\n\n   <h1>ElementAt</h1>\n   <h3>emit only item <i>n</i> emitted by an Observable</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"elementAt\"></rx-marbles>\n    <figcaption><p>\n     The <code>ElementAt</code> operator pulls an item located at a specified index location in the sequence\n     of items emitted by the source Observable and emits that item as its own sole emission.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/first.html\"><span class=\"operator\">First</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/last.html\"><span class=\"operator\">Last</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/06_Inspection.html#ElementAt\"><cite>Introduction to Rx</cite>: ElementAt and ElementAtUntilChanged</a></li>\n    <li><a href=\"http://rxmarbles.com/#elementAt\">RxMarbles: <code>elementAt</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>nth</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>elementAt elementAtOrDefault</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/elementAt.png\" style=\"width:100%;\" alt=\"elementAt\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>elementAt</code>. Pass <code>elementAt</code> a zero-based\n       index value and it will emit the solitary item from the source Observable&#x2019;s sequence that matches\n       that index value (for example, if you pass the index value 5, <code>elementAt</code> will emit the sixth\n       item emitted by the source Observable).\n      </p><p>\n       If you pass in a negative index value, or if the source Observable emits fewer than <code><i>index\n       value</i>&#xA0;+&#xA0;1</code> items, <code>elementAt</code> will throw an\n       <code>IndexOutOfBoundsException</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAt(int)\"><code>elementAt(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/elementAtOrDefault.png\" style=\"width:100%;\" alt=\"elementAtOrDefault\">\n      <figcaption><p>\n       RxGroovy also implements the <code>elementAtOrDefault</code> operator. It differs from\n       <code>elementAt</code> in that it will not throw an exception if the source Observable emits fewer than\n       <code><i>index value</i>&#xA0;+&#xA0;1</code> items. Instead, it will emit a &#x201C;default&#x201D; item\n       that you specify with an additional parameter to <code>elementAtOrDefault</code>.\n      </p><p>\n       If you pass in a negative index value, <code>elementAt</code> will throw an\n       <code>IndexOutOfBoundsException</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAtOrDefault(int,%20T)\"><code>elementAtOrDefault(int,T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>elementAt</code> and <code>elementAtOrDefault</code> do not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>elementAt elementAtOrDefault</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/elementAt.png\" style=\"width:100%;\" alt=\"elementAt\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>elementAt</code>. Pass <code>elementAt</code> a zero-based\n       index value and it will emit the solitary item from the source Observable&#x2019;s sequence that matches\n       that index value (for example, if you pass the index value 5, <code>elementAt</code> will emit the sixth\n       item emitted by the source Observable).\n      </p><p>\n       If you pass in a negative index value, or if the source Observable emits fewer than <code><i>index\n       value</i>&#xA0;+&#xA0;1</code> items, <code>elementAt</code> will throw an\n       <code>IndexOutOfBoundsException</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAt(int)\"><code>elementAt(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/elementAtOrDefault.png\" style=\"width:100%;\" alt=\"elementAtOrDefault\">\n      <figcaption><p>\n       RxGroovy also implements the <code>elementAtOrDefault</code> operator. It differs from\n       <code>elementAt</code> in that it will not throw an exception if the source Observable emits fewer than\n       <code><i>index value</i>&#xA0;+&#xA0;1</code> items. Instead, it will emit a &#x201C;default&#x201D; item\n       that you specify with an additional parameter to <code>elementAtOrDefault</code>.\n      </p><p>\n       If you pass in a negative index value, <code>elementAt</code> will throw an\n       <code>IndexOutOfBoundsException</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#elementAtOrDefault(int,%20T)\"><code>elementAtOrDefault(int,T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>elementAt</code> and <code>elementAtOrDefault</code> do not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>elementAt</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>elementAt</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/elementAt.png\" style=\"width:100%;\" alt=\"elementAt\">\n      <figcaption><p>\n       RxJS implements this operator as <code>elementAt</code>. Pass <code>elementAt</code> a zero-based\n       index value and it will emit the solitary item from the source Observable&#x2019;s sequence that matches\n       that index value (for example, if you pass the index value 5, <code>elementAt</code> will emit the sixth\n       item emitted by the source Observable).\n      </p><p>\n       If there is no element in the source sequence with the index value you specify, <code>elementAt</code>\n       will issue an <code>onError</code> notification: &#x201C;<code>Argument out of range</code>&#x201D;\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.fromArray([1,2,3,4])\n    .elementAt(1);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 2\nCompleted</pre></div>\n       <p>\n        You may optionally pass in a default value that <code>elementAt</code> will emit if the\n        source Observable emits no values:\n       </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.fromArray([])\n    .element({defaultValue: 23});\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 23\nCompleted</pre></div></figcaption>\n     </figure>\n     <p>\n      <code>elementAt</code> is found in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.aggregates.js</code></li>\n     </ul>\n     <p>\n      They require one of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>elementAt elementAtOrDefault</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>ElementAt ElementAtOrDefault</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>element_at element_at_or_default</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>element_at element_at_or_default</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>elementAt elementAtOrDefault</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>elementAt</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"ElementAt"},{"path":"/documentation/operators/to.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#transforming\">Transforming</a></li>\n  <li class=\"active\">To</li>\n</ol>\n\n<h1>To</h1>\n<h3>convert an Observable into another object or data structure</h3>\n\n<figure>\n <img src=\"images/to.c.png\" style=\"width:100%;\" alt=\"To\">\n <figcaption><p>\n  The various language-specific implementations of ReactiveX have a variety of operators that you can use to\n  convert an Observable, or a sequence of items emitted by an Observable, into another variety of object or\n  data structure. Some of these block until the Observable terminates and then produce an equivalent object\n  or data structure; others return an Observable that emits such an object or data structure.\n </p></figcaption>\n</figure>\n<p>\n In some implementations of ReactiveX, there is also an operator that converts an Observable into a\n &#x201C;Blocking&#x201D; Observable. A Blocking Observable extends the ordinary Observable by providing a set of\n methods, operating on the items emitted by the Observable, that block. Some of the\n <span class=\"operator\">To</span> operators are in this Blocking Obsevable set of extended operations.\n</p>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/10_LeavingTheMonad.html#LeavingTheMonad\"><cite>Introduction to Rx</cite>: Leaving the monad</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>BlockingObservable.blocking interpose BlockingObservable.into BlockingObservable.seq sort sort-by sorted-list-by</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>as_blocking</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>BlockingObservable.from BlockingObservable.getIterator nest toBlocking BlockingObservable.toFuture BlockingObservable.toIterable toList toMap toMultiMap toSortedList</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/B.getIterator.png\" style=\"width:100%;\" alt=\"getIterator\">\n     <figcaption><p>\n      The <code>getIterator</code> operator applies to the <code>BlockingObservable</code> subclass, so in order\n      to use it, you must first convert your source Observable into a <code>BlockingObservable</code> by means\n      of either the <code>BlockingObservable.from</code> method or the <code>Observable.toBlocking</code>\n      operator.\n     </p><p>\n      This operator converts an Observable into an <code>Iterator</code> with which you can iterate over the\n      set of items emitted by the source Observable.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#getIterator()\"><code>BlockingObservable.getIterator()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/B.toFuture.png\" style=\"width:100%;\" alt=\"toFuture\">\n     <figcaption><p>\n      The <code>toFuture</code> operator applies to the <code>BlockingObservable</code> subclass, so in order\n      to use it, you must first convert your source Observable into a <code>BlockingObservable</code> by means\n      of either the <code>BlockingObservable.from</code> method or the <code>Observable.toBlocking</code>\n      operator.\n     </p><p>\n      This operator converts an Observable into an <code>Future</code> that will return the single item emitted\n      by the source Observable. If the source Observable emits more than one item, the <code>Future</code> will\n      receive an <code>IllegalArgumentException</code>; if it completes after emitting no items, the\n      <code>Future</code> will receive a <code>NoSuchElementException</code>.\n     </p><p>\n      If you want to convert an Observable that may emit multiple items into a <code>Future</code>, try\n      something like this: <code>myObservable.toList().toBlocking().toFuture()</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#toFuture()\"><code>BlockingObservable.toFuture()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/B.toIterable.png\" style=\"width:100%;\" alt=\"toIterable\">\n     <figcaption><p>\n      The <code>toIterable</code> operator applies to the <code>BlockingObservable</code> subclass, so in order\n      to use it, you must first convert your source Observable into a <code>BlockingObservable</code> by means\n      of either the <code>BlockingObservable.from</code> method or the <code>Observable.toBlocking</code>\n      operator.\n     </p><p>\n      This operator converts an Observable into an <code>Iterable</code> with which you can iterate over the\n      set of items emitted by the source Observable.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#toIterable()\"><code>BlockingObservable.toIterable()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toList.png\" style=\"width:100%;\" alt=\"toList\">\n     <figcaption><p>\n      Normally, an Observable that emits multiple items will do so by invoking its observer&#x2019;s\n      <code>onNext</code> method for each such item. You can change this behavior, instructing the Observable to\n      compose a list of these multiple items and then to invoke the observer&#x2019;s <code>onNext</code> method only\n      once, passing it the entire list, by applying the <code>toList</code> operator to the Observable.\n     </p><p>\n      For example, the following rather pointless code takes a list of integers, converts it into an Observable,\n      then converts that Observable into one that emits the original list as a single item:\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\nnumbers = Observable.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\nnumbers.toList().subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nSequence complete</pre></div>\n     <p>\n      If the source Observable invokes <code>onCompleted</code> before emitting any items, the Observable\n      returned by <code>toList</code> will emit an empty list before invoking <code>onCompleted</code>. If the\n      source Observable invokes <code>onError</code>, the Observable returned by <code>toList</code> will\n      immediately invoke the <code>onError</code> methods of its observers.\n     </p><p>\n      <code>toList</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toList()\"><code>toList()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toMap.png\" style=\"width:100%;\" alt=\"toMap\">\n     <figcaption><p>\n      The <code>toMap</code> operator collects the items emitted by the source Observable into a map (by\n      default, a <code>HashMap</code>, but you can optionally supply a factory function that generates another\n      <code>Map</code> variety) and then emits that map. You supply a function that generates the key for each\n      emitted item. You may also optionally supply a function that converts an emitted item into the value to be\n      stored in the map (by default, the item itself is this value).\n     </p><p>\n      <code>toMap</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1)\"><code>toMap(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1,%20rx.functions.Func1)\"><code>toMap(Func1,Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)\"><code>toMap(Func1,Func1,Func0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toMultiMap.png\" style=\"width:100%;\" alt=\"toMultiMap\">\n     <figcaption><p>\n      The <code>toMultiMap</code> operator is similar to <code>toMap</code> except that the map it generates is\n      also an <code>ArrayList</code> (by default; or you can pass an optional factory method as a fourth\n      parameter by which you generate the variety of collection you prefer).\n     </p><p>\n      <code>toMultiMap</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1)\"><code>toMultiMap(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1)\"><code>toMultiMap(Func1,Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)\"><code>toMultiMap(Func1,Func1,Func0)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0,%20rx.functions.Func1)\"><code>toMultiMap(Func1,Func1,Func0,Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toSortedList.png\" style=\"width:100%;\" alt=\"toSortedList\">\n     <figcaption><p>\n      The <code>toSortedList</code> operator behaves much like <code>toList</code> except that it sorts the\n      resulting list. By default it sorts the list naturally in ascending order by means of the\n      <code>Comparable</code> interface. If any of the items emitted by the Observable does not support\n      <code>Comparable</code> with respect to the type of every other item emitted by the Observable,\n      <code>toSortedList</code> will throw an exception. However, you can change this default behavior by also\n      passing in to <code>toSortedList</code> a function that takes as its parameters two items and returns a\n      number; <code>toSortedList</code> will then use that function instead of <code>Comparable</code> to sort\n      the items.\n     </p><p>\n      For example, the following code takes a list of unsorted integers, converts it into an Observable, then\n      converts that Observable into one that emits the original list in sorted form as a single item:\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\nnumbers = Observable.from([8, 6, 4, 2, 1, 3, 5, 7, 9]);\n\nnumbers.toSortedList().subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nSequence complete</pre></div>\n     <p>\n      Here is an example that provides its own sorting function: in this case, one that sorts numbers according\n      to how close they are to the number 5.\n     </p>\n     <div class=\"code groovy\"><pre>\nnumbers = Observable.from([8, 6, 4, 2, 1, 3, 5, 7, 9]);\n\nnumbers.toSortedList({ n, m -&gt; Math.abs(5-n) - Math.abs(5-m) }).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n[5, 6, 4, 3, 7, 8, 2, 1, 9]\nSequence complete</pre></div>\n     <p>\n      <code>toSortedList</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toSortedList()\"><code>toSortedList()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toSortedList(rx.functions.Func2)\"><code>toSortedList(Func2)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/nest.png\" style=\"width:100%;\" alt=\"nest\">\n     <figcaption><p>\n      RxGroovy also has a <code>nest</code> operator that has one particular purpose: it converts a source\n      Observable into an Observable that emits that source Observable as its sole item.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>BlockingObservable.from BlockingObservable.getIterator nest toBlocking BlockingObservable.toFuture BlockingObservable.toIterable toList toMap toMultiMap toSortedList</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/B.getIterator.png\" style=\"width:100%;\" alt=\"getIterator\">\n     <figcaption><p>\n      The <code>getIterator</code> operator applies to the <code>BlockingObservable</code> subclass, so in order\n      to use it, you must first convert your source Observable into a <code>BlockingObservable</code> by means\n      of either the <code>BlockingObservable.from</code> method or the <code>Observable.toBlocking</code>\n      operator.\n     </p><p>\n      This operator converts an Observable into an <code>Iterator</code> with which you can iterate over the\n      set of items emitted by the source Observable.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#getIterator()\"><code>BlockingObservable.getIterator()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/B.toFuture.png\" style=\"width:100%;\" alt=\"toFuture\">\n     <figcaption><p>\n      The <code>toFuture</code> operator applies to the <code>BlockingObservable</code> subclass, so in order\n      to use it, you must first convert your source Observable into a <code>BlockingObservable</code> by means\n      of either the <code>BlockingObservable.from</code> method or the <code>Observable.toBlocking</code>\n      operator.\n     </p><p>\n      This operator converts an Observable into an <code>Future</code> that will return the single item emitted\n      by the source Observable. If the source Observable emits more than one item, the <code>Future</code> will\n      receive an <code>IllegalArgumentException</code>; if it completes after emitting no items, the\n      <code>Future</code> will receive a <code>NoSuchElementException</code>.\n     </p><p>\n      If you want to convert an Observable that may emit multiple items into a <code>Future</code>, try\n      something like this: <code>myObservable.toList().toBlocking().toFuture()</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#toFuture()\"><code>BlockingObservable.toFuture()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/B.toIterable.png\" style=\"width:100%;\" alt=\"toIterable\">\n     <figcaption><p>\n      The <code>toIterable</code> operator applies to the <code>BlockingObservable</code> subclass, so in order\n      to use it, you must first convert your source Observable into a <code>BlockingObservable</code> by means\n      of either the <code>BlockingObservable.from</code> method or the <code>Observable.toBlocking</code>\n      operator.\n     </p><p>\n      This operator converts an Observable into an <code>Iterable</code> with which you can iterate over the\n      set of items emitted by the source Observable.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#toIterable()\"><code>BlockingObservable.toIterable()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toList.png\" style=\"width:100%;\" alt=\"toList\">\n     <figcaption><p>\n      Normally, an Observable that emits multiple items will do so by invoking its observer&#x2019;s\n      <code>onNext</code> method for each such item. You can change this behavior, instructing the Observable to\n      compose a list of these multiple items and then to invoke the observer&#x2019;s <code>onNext</code> method only\n      once, passing it the entire list, by applying the <code>toList</code> operator to the Observable.\n     </p><p>\n      If the source Observable invokes <code>onCompleted</code> before emitting any items, the Observable\n      returned by <code>toList</code> will emit an empty list before invoking <code>onCompleted</code>. If the\n      source Observable invokes <code>onError</code>, the Observable returned by <code>toList</code> will\n      immediately invoke the <code>onError</code> methods of its observers.\n     </p><p>\n      <code>toList</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toList()\"><code>toList()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toMap.png\" style=\"width:100%;\" alt=\"toMap\">\n     <figcaption><p>\n      The <code>toMap</code> operator collects the items emitted by the source Observable into a map (by\n      default, a <code>HashMap</code>, but you can optionally supply a factory function that generates another\n      <code>Map</code> variety) and then emits that map. You supply a function that generates the key for each\n      emitted item. You may also optionally supply a function that converts an emitted item into the value to be\n      stored in the map (by default, the item itself is this value).\n     </p><p>\n      <code>toMap</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1)\"><code>toMap(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1,%20rx.functions.Func1)\"><code>toMap(Func1,Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)\"><code>toMap(Func1,Func1,Func0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toMultiMap.png\" style=\"width:100%;\" alt=\"toMultiMap\">\n     <figcaption><p>\n      The <code>toMultiMap</code> operator is similar to <code>toMap</code> except that the map it generates is\n      also an <code>ArrayList</code> (by default; or you can pass an optional factory method as a fourth\n      parameter by which you generate the variety of collection you prefer).\n     </p><p>\n      <code>toMultiMap</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1)\"><code>toMultiMap(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1)\"><code>toMultiMap(Func1,Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)\"><code>toMultiMap(Func1,Func1,Func0)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toMultimap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0,%20rx.functions.Func1)\"><code>toMultiMap(Func1,Func1,Func0,Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toSortedList.png\" style=\"width:100%;\" alt=\"toSortedList\">\n     <figcaption><p>\n      The <code>toSortedList</code> operator behaves much like <code>toList</code> except that it sorts the\n      resulting list. By default it sorts the list naturally in ascending order by means of the\n      <code>Comparable</code> interface. If any of the items emitted by the Observable does not support\n      <code>Comparable</code> with respect to the type of every other item emitted by the Observable,\n      <code>toSortedList</code> will throw an exception. However, you can change this default behavior by also\n      passing in to <code>toSortedList</code> a function that takes as its parameters two items and returns a\n      number; <code>toSortedList</code> will then use that function instead of <code>Comparable</code> to sort\n      the items.\n     </p><p>\n      <code>toSortedList</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toSortedList()\"><code>toSortedList()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toSortedList(rx.functions.Func2)\"><code>toSortedList(Func2)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/nest.png\" style=\"width:100%;\" alt=\"nest\">\n     <figcaption><p>\n      RxJava also has a <code>nest</code> operator that has one particular purpose: it converts a source\n      Observable into an Observable that emits that source Observable as its sole item.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>blockingIterable blockingLatest blockingMostRecent blockingNext sorted to toFuture toList toMap toMultimap toSortedList</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>toArray toMap toSet</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/toArray.png\" style=\"width:100%;\" alt=\"toArray\">\n     <figcaption><p>\n      Normally, an Observable that emits multiple items will do so by invoking its observer&#x2019;s\n      <code>onNext</code> method for each such item. You can change this behavior, instructing the Observable to\n      compose an array of these multiple items and then to invoke the observer&#x2019;s <code>onNext</code> method only\n      once, passing it the entire array, by applying the <code>toArray</code> operator to the Observable.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(0, 1000)\n    .take(5)\n    .toArray();\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: [0,1,2,3,4]\nCompleted</pre></div>\n     <p><code>toArray</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toMap.png\" style=\"width:100%;\" alt=\"toMap\">\n     <figcaption><p>\n      The <code>toMap</code> operator collects the items emitted by the source Observable into a\n      <code>Map</code> and then emits that map. You supply a function that generates the key for each emitted\n      item. You may also optionally supply a function that converts an emitted item into the value to be stored\n      in the map (by default, the item itself is this value).\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(0, 1000)\n    .take(5)\n    .toMap(function (x) { return x * 2; }, function (x) { return x * 4; });\n\nvar subscription = source.subscribe(\n    function (x) {\n        var arr = [];\n        x.forEach(function (value, key) { arr.push(value, key); })\n        console.log(&apos;Next: &apos; + arr);\n    },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: [0,0,2,4,4,8,6,12,8,16]\nCompleted</pre></div>\n     <p><code>toMap</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.aggregates.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/toSet.png\" style=\"width:100%;\" alt=\"toSet\">\n     <figcaption><p>\n      Normally, an Observable that emits multiple items will do so by invoking its observer&#x2019;s\n      <code>onNext</code> method for each such item. You can change this behavior, instructing the Observable to\n      compose a <code>Set</code> of these multiple items and then to invoke the observer&#x2019;s <code>onNext</code>\n      method only once, passing it the entire <code>Set</code>, by applying the <code>toSet</code> operator to\n      the Observable.\n     </p><p>\n      Note that this only works in an ES6 environment or polyfilled.\n     </p>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(0, 1000)\n    .take(5)\n    .toSet();\n\nvar subscription = source.subscribe(\n    function (x) {\n        var arr = [];\n        x.forEach(function (i) { arr.push(i); })\n        console.log(&apos;Next: &apos; + arr);\n    },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: [0,1,2,3,4]\nCompleted</pre></div>\n     <p><code>toSet</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.aggregates.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>BlockingObservable.from BlockingObservable.getIterator toBlocking BlockingObservable.toFuture BlockingObservable.toIterable toList toMap toMultiMap toSortedList</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>GetEnumerator ToArray ToDictionary ToEnumerable ToEvent ToEventPattern ToList ToLookup ToTask</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>toArray</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>toArray</code>.\n    </p>\n    <p>\n    Creates an observable sequence containing a single element which is an array containing all the elements of the source sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/toArray/toArray.php\n\n$source = \\Rx\\Observable::fromArray([1, 2, 3, 4]);\n\n$observer = $createStdoutObserver();\n\n$subscription = $source-&gt;toArray()\n    -&gt;subscribe(new CallbackObserver(\n        function ($array) use ($observer) {\n            $observer-&gt;onNext(json_encode($array));\n        },\n        [$observer, &quot;onError&quot;],\n        [$observer, &quot;onCompleted&quot;]\n    ));\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: [1,2,3,4]\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>BlockingObservable.to_iterable to_array to_blocking to_dict to_future to_iterable to_list to_marbles to_set</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>to_a to_h</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>nest to toArray toBlocking toBuffer BlockingObservable.toFuture toIndexedSeq BlockingObservable.toIterable toIterable toIterator BlockingObservable.toList toList toMap toMultiMap toSet toStream toTraversable toVector</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>toArray</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"To"},{"path":"/documentation/operators/merge.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#combining\">Combining</a></li>\n  <li class=\"active\">Merge</li>\n</ol>\n\n   <h1>Merge</h1>\n   <h3>combine multiple Observables into one by merging their emissions</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"merge\"></rx-marbles>\n    <figcaption><p>\n     You can combine the output of multiple Observables so that they act like a single Observable, by\n     using the <span class=\"operator\">Merge</span> operator.\n    </p><p>\n     Merge may interleave the items emitted by the merged Observables (a similar operator,\n     <a href=\"http://reactivex.io/documentation/operators/concat.html\"><span class=\"operator\">Concat</span></a>, does not interleave items, but\n     emits all of each source Observable&#x2019;s items in turn before beginning to emit items from\n     the next source Observable).\n    </p><p>\n     As shown in the above diagram, an <code>onError</code> notification from any of the source\n     Observables will immediately be passed through to observers and will terminate the merged\n     Observable.\n    </p></figcaption>\n   </figure>\n   <figure>\n    <img src=\"images/mergeDelayError.C.png\" style=\"width:100%;\" alt=\"MergeDelayError\">\n    <figcaption><p>\n     In many ReactiveX implementations there is a second operator,\n     <span class=\"operator\">MergeDelayError</span>, that changes this behavior &#x2014; reserving\n     <code>onError</code> notifications until all of the merged Observables complete and only then\n     passing it along to the observers:\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/concat.html\"><span class=\"operator\">Concat</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/12_CombiningSequences.html#Merge\"><cite>Introduction to Rx</cite>: Merge</a></li>\n    <li><a href=\"http://rxmarbles.com/#merge\">RxMarbles: <code>merge</code></a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc47\"><cite>101 Rx Samples</cite>: Merge</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>interleave interleave* merge merge* merge-delay-error merge-delay-error*</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxClojure there are six operators of concern here:\n     </p>\n     <figure>\n      <img src=\"images/merge.png\" style=\"width:100%;\" alt=\"merge\">\n      <figcaption><p>\n       <code>merge</code> converts two or more Observables into a single Observable that emits all\n       of the items emitted by all of those Observables.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/mergeX.png\" style=\"width:100%;\" alt=\"merge*\">\n      <figcaption><p>\n       <code>merge*</code> converts an Observable that emits Observables into a single Observable\n       that emits all of the items emitted by all of the emitted Observables.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/merge-delay-error.png\" style=\"width:100%;\" alt=\"merge-delay-error\">\n      <figcaption><p>\n       <code>merge-delay-error</code> is like <code>merge</code>, but will emit all items from all\n       of the merged Observables even if one or more of those Observables terminates with an\n       <code>onError</code> notification while emissions are still pending.\n      </p><p>\n       <code>merge-delay-error*</code> is a similarly-modified version of <code>merge*</code>.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/interleaveX.png\" style=\"width:100%;\" alt=\"interleave*\">\n      <figcaption><p>\n       <code>interleave</code> is like <code>merge</code>, but more deliberate about how it\n       interleaves the items from the source Observables: the resulting Observable emits the first\n       item emitted by the first source Observable, then the first item emitted by the second source\n       Observable, and so forth, and having reached the last source Observable, then emits the\n       second item emitted by the first source Observable, the second item emitted by the second\n       source Observable, and so forth, until all of the source Observables terminate.\n      </p><p>\n       <code>interleave*</code> is similar but operates on an Observable of Observables.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>merge</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxCpp implements this operator as <code>merge</code>.\n     </p>\n     <figure>\n      <img src=\"images/merge.png\" style=\"width:100%;\" alt=\"merge\">\n     </figure>\n<!-- I think we need more here, but it's too cryptic/undocumented for me to figure out easily -->\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>merge mergeDelayError mergeWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxGroovy implements this operator as <code>merge</code>, <code>mergeWith</code>, and\n      <code>mergeDelayError</code>.\n     </p>\n     <figure>\n      <img src=\"images/merge.png\" style=\"width:100%;\" alt=\"merge\">\n      <figcaption><p>\n       For example, the following code merges the <code>odds</code> and <code>evens</code> into a\n       single Observable. (The <code>subscribeOn</code> operator makes <code>odds</code> operate\n       on a different thread from <code>evens</code> so that the two Observables may both emit items\n       at the same time, to demonstrate how <span class=\"operator\">Merge</span> may interleave these\n       items.)\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\nodds  = Observable.from([1, 3, 5, 7]).subscribeOn(someScheduler);\nevens = Observable.from([2, 4, 6]);\n\nObservable.merge(odds,evens).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n1\n3\n2\n5\n4\n7\n6\nSequence complete</pre></div>\n      <p>\n       Instead of passing multiple Observables (up to nine) into <code>merge</code>, you could also\n       pass in a <code>List&lt;&gt;</code> (or other Iterable) of Observables, an Array of\n       Observables, or even an Observable that emits Observables, and <code>merge</code> will merge\n       their output into the output of a single Observable:\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(java.lang.Iterable)\"><code>merge(Iterable)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(java.lang.Iterable,%20int)\"><code>merge(Iterable,int)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable%5B%5D)\"><code>merge(Observable[])</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable%5B%5D,%20int)\"><code>merge(Observable[],&#xA0;int)</code> (RxGroovy 1.1)</a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable,%20rx.Observable)\"><code>merge(Observable,&#xA0;Observable)</code></a> (there are also versions that take up to nine Observables)</li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/merge.io.png\" style=\"width:100%;\" alt=\"merge(List)\">\n      <figcaption><p>\n       If you pass in an Observable of Observables, you have the option of also passing in a value\n       indicating to <code>merge</code> the maximum number of those Observables it should attempt to\n       be subscribed to simultaneously. Once it reaches this maximum subscription count, it will\n       refrain from subscribing to any other Observables emitted by the source Observable until such\n       time as one of the already-subscribed-to Observables issues an <code>onCompleted</code>\n       notification.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable)\"><code>merge(Observable&lt;Observable&gt;)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable,%20int)\"><code>merge(Observable&lt;Observable&gt;,int)</code> (RxGroovy 1.1)</a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      The instance version of <code>merge</code> is <code>mergeWith</code>, so, for example, in the\n      code sample above, instead of writing <code>Observable.merge(odds,evens)</code> you could also\n      write <code>odds.mergeWith(evens)</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#mergeWith(rx.Observable)\"><code>mergeWith(Observable)</code></a></li>\n     </ul>\n     <p>\n      If any of the individual Observables passed into <code>merge</code> terminates with an\n      <code>onError</code> notification, the Observable produced by <code>merge</code> itself will\n      immediately terminate with an <code>onError</code> notification. If you would prefer a merge\n      that continues emitting the results of the remaining, error-free Observables before reporting\n      the error, use <code>mergeDelayError</code> instead.\n     </p>\n     <figure>\n      <img src=\"images/mergeDelayError.png\" style=\"width:100%;\" alt=\"mergeDelayError\">\n      <figcaption><p>\n       <code>mergeDelayError</code> behaves much like <code>merge</code>. The exception is when one\n       of the Observables being merged terminates with an <code>onError</code> notification. If this\n       happens with <code>merge</code>, the merged Observable will immediately issue an\n       <code>onError</code> notification and terminate. <code>mergeDelayError</code>, on the other\n       hand, will hold off on reporting the error until it has given any other non-error-producing\n       Observables that it is merging a chance to finish emitting their items, and it will emit\n       those itself, and will only terminate with an <code>onError</code> notification when all of\n       the other merged Observables have finished.\n      </p><p>\n       Because it is possible that more than one of the merged Observables encountered an error,\n       <code>mergeDelayError</code> may pass information about <em>multiple</em> errors in the\n       <code>onError</code> notification (it will never invoke the observer&#x2019;s\n       <code>onError</code> method more than once). For this reason, if you want to know the nature\n       of these errors, you should write your observers&#x2019; <code>onError</code> methods so that\n       they accept a parameter of the class <code>CompositeException</code>.\n      </p><p>\n       <code>mergeDelayError</code> has fewer variants. You cannot pass it an Iterable or Array of\n       Observables, but you can pass it an Observable that emits Observables or between one and\n       nine individual Observables as parameters. There is not an instance method version of\n       <code>mergeDelayError</code> as there is for <code>merge</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#mergeDelayError(rx.Observable)\"><code>mergeDelayError(Observable&lt;Observable&gt;)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#mergeDelayError(rx.Observable,%20rx.Observable)\"><code>mergeDelayError(Observable,Observable)</code></a> (there are also versions that take up to nine Observables)</li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>merge mergeDelayError mergeWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJava implements this operator as <code>merge</code>, <code>mergeWith</code>, and\n      <code>mergeDelayError</code>.\n     </p>\n     <figure>\n      <img src=\"images/merge.png\" style=\"width:100%;\" alt=\"merge\">\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable&lt;Integer&gt; odds = Observable.just(1, 3, 5).subscribeOn(someScheduler);\nObservable&lt;Integer&gt; evens = Observable.just(2, 4, 6);\n\nObservable.merge(odds, evens)\n          .subscribe(new Subscriber&lt;Integer&gt;() {\n        @Override\n        public void onNext(Integer item) {\n            System.out.println(&quot;Next: &quot; + item);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            System.err.println(&quot;Error: &quot; + error.getMessage());\n        }\n\n        @Override\n        public void onCompleted() {\n            System.out.println(&quot;Sequence complete.&quot;);\n        }\n    });</pre></div>\n     <div class=\"output\"><pre>\nNext: 1\nNext: 3\nNext: 5\nNext: 2\nNext: 4\nNext: 6\nSequence complete.</pre></div>\n      <figcaption><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(java.lang.Iterable)\"><code>merge(Iterable)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(java.lang.Iterable,%20int)\"><code>merge(Iterable,int)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable%5B%5D)\"><code>merge(Observable[])</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable%5B%5D,%20int)\"><code>merge(Observable[],&#xA0;int)</code> (RxJava 1.1)</a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable,%20rx.Observable)\"><code>merge(Observable,&#xA0;Observable)</code></a> (there are also versions that take up to nine Observables)</li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      Instead of passing multiple Observables (up to nine) into <code>merge</code>, you could also\n      pass in a <code>List&lt;&gt;</code> (or other Iterable) of Observables, an Array of\n      Observables, or even an Observable that emits Observables, and <code>merge</code> will merge\n      their output into the output of a single Observable:\n     </p>\n     <figure>\n      <img src=\"images/merge.io.png\" style=\"width:100%;\" alt=\"merge(List)\">\n      <figcaption><p>\n       If you pass in an Observable of Observables, you have the option of also passing in a value\n       indicating to <code>merge</code> the maximum number of those Observables it should attempt to\n       be subscribed to simultaneously. Once it reaches this maximum subscription count, it will\n       refrain from subscribing to any other Observables emitted by the source Observable until such\n       time as one of the already-subscribed-to Observables issues an <code>onCompleted</code>\n       notification.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable)\"><code>merge(Observable&lt;Observable&gt;)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#merge(rx.Observable,%20int)\"><code>merge(Observable&lt;Observable&gt;,&#xA0;int)</code> (RxJava 1.1)</a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      The instance version of <code>merge</code> is <code>mergeWith</code>, so, for example, \n      instead of writing <code>Observable.merge(odds,evens)</code> you could also write\n      <code>odds.mergeWith(evens)</code>.\n     </p><p>\n      If any of the individual Observables passed into <code>merge</code> terminates with an\n      <code>onError</code> notification, the Observable produced by <code>merge</code> itself will\n      immediately terminate with an <code>onError</code> notification. If you would prefer a merge\n      that continues emitting the results of the remaining, error-free Observables before reporting\n      the error, use <code>mergeDelayError</code> instead.\n     </p>\n     <figure>\n      <img src=\"images/mergeDelayError.png\" style=\"width:100%;\" alt=\"mergeDelayError\">\n      <figcaption><p>\n       <code>mergeDelayError</code> behaves much like <code>merge</code>. The exception is when one\n       of the Observables being merged terminates with an <code>onError</code> notification. If this\n       happens with <code>merge</code>, the merged Observable will immediately issue an\n       <code>onError</code> notification and terminate. <code>mergeDelayError</code>, on the other\n       hand, will hold off on reporting the error until it has given any other non-error-producing\n       Observables that it is merging a chance to finish emitting their items, and it will emit\n       those itself, and will only terminate with an <code>onError</code> notification when all of\n       the other merged Observables have finished.\n      </p><p>\n       Because it is possible that more than one of the merged Observables encountered an error,\n       <code>mergeDelayError</code> may pass information about <em>multiple</em> errors in the\n       <code>onError</code> notification (it will never invoke the observer&#x2019;s\n       <code>onError</code> method more than once). For this reason, if you want to know the nature\n       of these errors, you should write your observers&#x2019; <code>onError</code> methods so that\n       they accept a parameter of the class <code>CompositeException</code>.\n      </p><p>\n       <code>mergeDelayError</code> has fewer variants. You cannot pass it an Iterable or Array of\n       Observables, but you can pass it an Observable that emits Observables or between one and\n       nine individual Observables as parameters. There is not an instance method version of\n       <code>mergeDelayError</code> as there is for <code>merge</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#mergeDelayError(rx.Observable)\"><code>mergeDelayError(Observable&lt;Observable&gt;)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#mergeDelayError(rx.Observable,%20rx.Observable)\"><code>mergeDelayError(Observable,Observable)</code></a> (there are also versions that take up to nine Observables)</li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>merge mergeArray mergeArrayDelayError mergeDelayError mergeWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n       <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>merge mergeAll mergeDelayError</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/merge.png\" style=\"width:100%;\" alt=\"merge\">\n      <figcaption><p>\n       The first variant of <code>merge</code> is an instance operator that takes a variable number\n       of Observables as parameters, merging each of these Observables with the source (instance)\n       Observables to produce its single output Observable.\n      </p>\n      <p>\n       This first variant of <code>merge</code> is found in the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      <p>\n       The second variant of <code>merge</code> is a prototype (class) operator that accepts two\n       parameters. The second of these is an Observable that emits the Observables you want to merge.\n       The first is a number that indicates the maximum number of these emitted Observables that you\n       want <code>merge</code> to attempt to be subscribed to at any moment. Once it reaches this\n       maximum subscription count, it will refrain from subscribing to any other Observables emitted\n       by the source Observable until such time as one of the already-subscribed-to Observables\n       issues an <code>onCompleted</code> notification.\n      </p><p>\n       This second variant of <code>merge</code> is found in the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/mergeAll.png\" style=\"width:100%;\" alt=\"mergeAll\">\n      <figcaption><p>\n       <code>mergeAll</code> is like this second variant of <code>merge</code> except that it does\n       not allow you to set this maximum subscription count. It only takes the single parameter of\n       an Observable of Observables.\n      </p>\n      <p>\n       <code>mergeAll</code> is found in the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/mergeDelayError.png\" style=\"width:100%;\" alt=\"mergeDelayError\">\n      <figcaption><p>\n       If any of the individual Observables passed into <code>merge</code> or <code>mergeAll</code> terminates\n       with an <code>onError</code> notification, the resulting Observable will immediately terminate with an\n       <code>onError</code> notification. If you would prefer a merge that continues emitting the results of the\n       remaining, error-free Observables before reporting the error, use <code>mergeDelayError</code> instead.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source1 = Rx.Observable.of(1,2,3);\nvar source2 = Rx.Observable.throwError(new Error(&apos;whoops!&apos;));\nvar source3 = Rx.Observable.of(4,5,6);\n\nvar merged = Rx.Observable.mergeDelayError(source1, source2, source3);\n\nvar subscription = merged.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); }\n  function () { console.log(&apos;Completed&apos; } );</pre></div>\n      <div class=\"output\"><pre>\n1\n2\n3\n4\n5\n6\nError: Error: whoops!</pre></div>\n      <p>\n       <code>mergeDelayError</code> is found in the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>merge mergeDelayError mergeWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxKotlin implements this operator as <code>merge</code>, <code>mergeWith</code>, and\n      <code>mergeDelayError</code>.\n     </p>\n     <figure>\n      <img src=\"images/merge.png\" style=\"width:100%;\" alt=\"merge\">\n     </figure>\n     <p>\n      Instead of passing multiple Observables (up to nine) into <code>merge</code>, you could also\n      pass in a <code>List&lt;&gt;</code> (or other Iterable) of Observables, an Array of\n      Observables, or even an Observable that emits Observables, and <code>merge</code> will merge\n      their output into the output of a single Observable:\n     </p>\n     <figure>\n      <img src=\"images/merge.io.png\" style=\"width:100%;\" alt=\"merge(List)\">\n      <figcaption><p>\n       If you pass in an Observable of Observables, you have the option of also passing in a value\n       indicating to <code>merge</code> the maximum number of those Observables it should attempt to\n       be subscribed to simultaneously. Once it reaches this maximum subscription count, it will\n       refrain from subscribing to any other Observables emitted by the source Observable until such\n       time as one of the already-subscribed-to Observables issues an <code>onCompleted</code>\n       notification.\n      </p></figcaption>\n     </figure>\n     <p>\n      The instance version of <code>merge</code> is <code>mergeWith</code>, so, for example,\n      instead of writing <code>Observable.merge(odds,evens)</code> you could also write\n      <code>odds.mergeWith(evens)</code>.\n     </p><p>\n      If any of the individual Observables passed into <code>merge</code> terminates with an\n      <code>onError</code> notification, the Observable produced by <code>merge</code> itself will\n      immediately terminate with an <code>onError</code> notification. If you would prefer a merge\n      that continues emitting the results of the remaining, error-free Observables before reporting\n      the error, use <code>mergeDelayError</code> instead.\n     </p>\n     <figure>\n      <img src=\"images/mergeDelayError.png\" style=\"width:100%;\" alt=\"mergeDelayError\">\n      <figcaption><p>\n       <code>mergeDelayError</code> behaves much like <code>merge</code>. The exception is when one\n       of the Observables being merged terminates with an <code>onError</code> notification. If this\n       happens with <code>merge</code>, the merged Observable will immediately issue an\n       <code>onError</code> notification and terminate. <code>mergeDelayError</code>, on the other\n       hand, will hold off on reporting the error until it has given any other non-error-producing\n       Observables that it is merging a chance to finish emitting their items, and it will emit\n       those itself, and will only terminate with an <code>onError</code> notification when all of\n       the other merged Observables have finished.\n      </p><p>\n       Because it is possible that more than one of the merged Observables encountered an error,\n       <code>mergeDelayError</code> may pass information about <em>multiple</em> errors in the\n       <code>onError</code> notification (it will never invoke the observer&#x2019;s\n       <code>onError</code> method more than once). For this reason, if you want to know the nature\n       of these errors, you should write your observers&#x2019; <code>onError</code> methods so that\n       they accept a parameter of the class <code>CompositeException</code>.\n      </p><p>\n       <code>mergeDelayError</code> has fewer variants. You cannot pass it an Iterable or Array of\n       Observables, but you can pass it an Observable that emits Observables or between one and\n       nine individual Observables as parameters. There is not an instance method version of\n       <code>mergeDelayError</code> as there is for <code>merge</code>.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Merge</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      Rx.NET implements this operator as <code>Merge</code>.\n     </p>\n     <figure>\n      <img src=\"images/merge.C.png\" style=\"width:100%;\" alt=\"Merge\">\n      <figcaption><p>\n       You can pass <code>Merge</code> an Array of Observables, an Enumerable of Observables, an\n       Observable of Observables, or two individual Observables.\n      </p><p>\n       If you pass an Enumerable or Observable of Observables, you have the option of also passing\n       in an integer indicating the maximum number of those Observables it should attempt to be\n       subscribed to simultaneously. Once it reaches this maximum subscription count, it will\n       refrain from subscribing to any other Observables emitted by the source Observable until such\n       time as one of the already-subscribed-to Observables issues an <code>onCompleted</code>\n       notification.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>merge mergeAll</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>merge</code>.\n    </p>\n    <p>\n    Combine an Observable together with another Observable by merging their emissions into a single Observable.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/merge/merge.php\n\n$loop      = React\\EventLoop\\Factory::create();\n$scheduler = new Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$observable       = Rx\\Observable::just(42)-&gt;repeat();\n$otherObservable  = Rx\\Observable::just(21)-&gt;repeat();\n$mergedObservable = $observable\n    -&gt;merge($otherObservable)\n    -&gt;take(10);\n\n$disposable = $mergedObservable-&gt;subscribe($stdoutObserver, $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nNext value: 21\nNext value: 42\nNext value: 21\nNext value: 42\nNext value: 21\nNext value: 42\nNext value: 21\nNext value: 42\nNext value: 21\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>mergeAll</code>.\n    </p>\n    <p>\n    Merges an observable sequence of observables into an observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/merge/merge-all.php\n\n$loop      = React\\EventLoop\\Factory::create();\n$scheduler = new Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$sources = Rx\\Observable::range(0, 3)\n    -&gt;map(function ($x) {\n        return Rx\\Observable::range($x, 3);\n    });\n\n$merged = \\Rx\\Observable::mergeAll($sources);\n\n$disposable = $merged-&gt;subscribe($stdoutObserver, $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0\nNext value: 1\nNext value: 1\nNext value: 2\nNext value: 2\nNext value: 2\nNext value: 3\nNext value: 3\nNext value: 4\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>merge merge_all merge_observable</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxPY implements this operator as <code>merge</code> and \n      <code>merge_all</code>/<code>merge_observable</code>.\n     </p>\n     <figure>\n      <img src=\"images/merge.png\" style=\"width:100%;\" alt=\"merge\">\n      <figcaption><p>\n       You can either pass <code>merge</code> a set of Observables as individual parameters, or as\n       a single parameter containing an array of those Observables.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/merge_all.png\" style=\"width:100%;\" alt=\"merge_all\">\n      <figcaption><p>\n       <code>merge_all</code> and its alias <code>merge_observable</code> take as their single\n       parameter an Observable that emits Observables. They merge the emissions of all of these\n       Observables to create their own Observable.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>merge merge_all merge_concurrent</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      Rx.rb implements this operator as <code>merge</code>, <code>merge_concurrent</code>, and\n      <code>merge_all</code>.\n     </p>\n     <figure>\n      <img src=\"images/merge.png\" style=\"width:100%;\" alt=\"merge\">\n      <figcaption><p>\n       <code>merge</code> merges a second Observable into the one it is operating on to create a\n       new merged Observable.\n      </p></figcaption>\n     </figure>\n     <p>\n      <code>merge_concurrent</code> operates on an Observable that emits Observables, merging the\n      emissions from each of these Observables into its own emissions. You can optionally pass it\n      an integer parameter indicating how many of these emitted Observables\n      <code>merge_concurrent</code> should try to subscribe to concurrently. Once it reaches this\n      maximum subscription count, it will refrain from subscribing to any other Observables emitted\n      by the source Observable until such time as one of the already-subscribed-to Observables\n      issues an <code>onCompleted</code> notification. The default is 1, which makes it equivalent\n      to <code>merge_all</code>.\n     </p>\n     <figure>\n      <img src=\"images/merge_all.png\" style=\"width:100%;\" alt=\"merge_all\">\n      <figcaption><p>\n       <code>merge_all</code> is like <code>merge_concurrent(1)</code>. It subscribes to each\n       emitted Observable one at a time, mirroring its emissions as its own, and waiting to\n       subscribe to the next Observable until the present one terminates with an\n       <code>onCompleted</code> notification. In this respect it is more like a\n       <span class=\"operator\">Concat</span> variant.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>flatten flattenDelayError merge mergeDelayError</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxScala implements this operator as <code>flatten</code>, <code>flattenDelayError</code>,\n      <code>merge</code>, and <code>mergeDelayError</code>.\n     </p>\n     <figure>\n      <img src=\"images/merge.png\" style=\"width:100%;\" alt=\"merge\">\n      <figcaption><p>\n       <code>merge</code> takes a second Observable as a parameter and merges that Observable with\n       the one the <code>merge</code> operator is applied to in order to create a new output\n       Observable.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/mergeDelayError.png\" style=\"width:100%;\" alt=\"mergeDelayError\">\n      <figcaption><p>\n       <code>mergeDelayError</code> is similar to <code>merge</code> except that it will always\n       emit all items from both Observables even if one of the Observables terminates with an\n       <code>onError</code> notification before the other Observable has finished emitting items.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/flatten.png\" style=\"width:100%;\" alt=\"flatten\">\n      <figcaption><p>\n       <code>flatten</code> takes as its parameter an Observable that emits Observables. It merges\n       the items emitted by each of these Observables to create its own single Observable sequence.\n       A variant of this operator allows you to pass in an <code>Int</code> indicating the maximum\n       number of these emitted Observables you want <code>flatten</code> to try to be subscribed to\n       at any time. It it hits this maximum subscription count, it will refrain from subscribing to\n       any other Observables emitted by the source Observable until such time as one of the\n       already-subscribed-to Observables issues an <code>onCompleted</code> notification.\n      </p><p>\n       <code>flattenDelayError</code> is similar to <code>flatten</code> except that it will always\n       emit all items from all of the emitted Observables even if one or more of those Observables\n       terminates with an <code>onError</code> notification before the other Observables have\n       finished emitting items.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>merge</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n       RxSwift implements this operator as <code>merge</code>.\n     </p>\n     <figure>\n       <img src=\"images/merge.png\" style=\"width: 100%\" alt=\"merge\">\n       <figcaption><p>\n         <code>merge</code> takes as its parameter an Observable that emits Observables. It merges\n         the items emitted by each of these Observables to create its own single Observable sequence.\n       </p>\n       <p>\n         A variant of this operator <code>merge(maxConcurrent:)</code> allows you to pass in an\n         <code>Int</code> indicating the maximum number of these emitted Observables you want\n         <code>merge</code> to try to be subscribed to at any time. If it hits this maximum\n         subscription count, it will refrain from subscribing to any other Observables emitted by\n         the source Observable until such time as one of the already-subscribed-to Observables\n         issues an <code>onCompleted</code> notification.\n       </p>\n       <h4>Sample Code</h4>\n       <div class=\"code swift\"><pre>\nlet subject1 = PublishSubject<int>()\nlet subject2 = PublishSubject<int>()\n\nObservable.of(subject1, subject2)\n   .merge()\n   .subscribe {\n       print($0)\n   }\n\nsubject1.on(.Next(10))\nsubject1.on(.Next(11))\nsubject1.on(.Next(12))\nsubject2.on(.Next(20))\nsubject2.on(.Next(21))\nsubject1.on(.Next(14))\nsubject1.on(.Completed)\nsubject2.on(.Next(22))\nsubject2.on(.Completed)</int></int></pre></div>\n       <div class=\"output\"><pre>\nNext(10)\nNext(11)\nNext(12)\nNext(20)\nNext(21)\nNext(14)\nNext(22)\nCompleted</pre></div>\n     </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Merge"},{"path":"/documentation/operators/first.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">First</li>\n</ol>\n\n   <h1>First</h1>\n   <h3>emit only the first item (or the first item that meets some condition) emitted by an Observable</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"first\"></rx-marbles>\n    <figcaption><p>\n    If you are only interested in the first item emitted by an Observable, or the first item that meets some\n    criteria, you can filter the Observable with the <span class=\"operator\">First</span> operator.\n    </p><p>\n    In some implementations, <code>First</code> is not implemented as a filtering operator that returns an\n    Observable, but as a blocking function that returns a particular item at such time as the source Observable\n    emits that item. In those implementations, if you instead want a filtering operator, you may have better\n    luck with <a href=\"http://reactivex.io/documentation/operators/take.html\"><code>Take(1)</code></a> or <a href=\"http://reactivex.io/documentation/operators/elementat\"><code>ElementAt(0)</code></a>.\n    </p><p>\n    In some implementations there is also a <span class=\"operator\">Single</span> operator. It behaves similarly\n    to <span class=\"operator\">First</span> except that it waits until the source Observable terminates in order\n    to guarantee that it only emits a single item (otherwise, rather than emitting that item, it terminates with\n    an error). You can use this to not only take the first item from the source Observable but to also\n    guarantee that there was only one item.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/elementat.html\"><span class=\"operator\">ElementAt</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/last.html\"><span class=\"operator\">Last</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/take.html\"><span class=\"operator\">Take</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/07_Aggregation.html#First\"><cite>Introduction to Rx</cite>: First</a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/07_Aggregation.html#Single\"><cite>Introduction to Rx</cite>: Single</a></li>\n    <li><a href=\"http://blog.danlew.net/2015/06/22/loading-data-from-multiple-sources-with-rxjava/\">Loading data from multiple sources with RxJava</a> by Dan Lew (example using Concat and First)</li>\n    <li><a href=\"http://rxmarbles.com/#find\">RxMarbles: <code>find</code></a></li>\n    <li><a href=\"http://rxmarbles.com/#findIndex\">RxMarbles: <code>findIndex</code></a></li>\n    <li><a href=\"http://rxmarbles.com/#first\">RxMarbles: <code>first</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>first single</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>first</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>first firstOrDefault latest mostRecent next single singleOrDefault takeFirst</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxGroovy, this filtering operator is implemented as <code>first</code>, <code>firstOrDefault</code>,\n      and <code>takeFirst</code>.\n     </p><p>\n      Somewhat confusingly, there are also <code>BlockingObservable</code> operators called <code>first</code>\n      and <code>firstOrDefault</code> that block and then return items, rather than immediately returning\n      Observables.\n     </p><p>\n      There are also several other operators that perform similar functions.\n     </p>\n     <h3>The Filtering Operators</h3>\n     <figure>\n      <img src=\"images/first.png\" style=\"width:100%;\" alt=\"first\">\n      <figcaption><p>\n       To filter an Observable so that only its first emission is emitted, use the\n       <code>first</code> operator with no parameters. \n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#first()\"><code>first()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/firstN.png\" style=\"width:100%;\" alt=\"first\">\n      <figcaption><p>\n       You can also pass a predicate function to <code>first</code>, in which case it will produce an\n       Observable that emits only the first item from the source Observable that the predicate evaluates as\n       <code>true</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#first(rx.functions.Func1)\"><code>first(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/firstOrDefault.png\" style=\"width:100%;\" alt=\"firstOrDefault\">\n      <figcaption><p>\n       The <code>firstOrDefault</code> operator is similar to <code>first</code>, but you pass it a default item\n       that it can emit if the source Observable fails to emit any items\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#firstOrDefault(T)\"><code>firstOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/firstOrDefaultN.png\" style=\"width:100%;\" alt=\"firstOrDefault\">\n      <figcaption><p>\n       <code>firstOrDefault</code> also has a variant to which you can pass a predicate function, so that its\n       Observable will emit the first item from the source Observable that the predicate evaluates as\n       <code>true</code>, or the default item if no items emitted by the source Observable pass the predicate.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#firstOrDefault(T)\"><code>firstOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/first.takefirst.png\" style=\"width:100%;\" alt=\"takeFirst\">\n      <figcaption><p>\n       The <code>takeFirst</code> operator behaves similarly to <code>first</code>, with the exception of how\n       these operators behave wihen the source Observable emits no items that satisfy the predicate. In such a\n       case, <code>first</code> will throw a <code>NoSuchElementException</code> while <code>takeFirst</code>\n       will return an empty Observable (one that calls <code>onCompleted</code> but never calls\n       <code>onNext</code>).\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeFirst(rx.functions.Func1)\"><code>takeFirst(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/single.png\" style=\"width:100%;\" alt=\"single\">\n      <figcaption><p>\n       The <code>single</code> operator is similar to <code>first</code>, but throws a\n       <code>NoSuchElementException</code> if the source Observable does not emit exactly one item before\n       successfully completing.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#single()\"><code>single()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/single.p.png\" style=\"width:100%;\" alt=\"single\">\n      <figcaption><p>\n       <code>single</code> also has a version that accepts a predicate, and emits the sole item emitted by the\n       source Observable that matches that predicate, or notifies of an exception if exactly one such item does\n       not match.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#single(rx.functions.Func1)\"><code>single(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/singleOrDefault.png\" style=\"width:100%;\" alt=\"singleOrDefault\">\n      <figcaption><p>\n       As with <code>firstOrDefault</code> there is also a <code>singleOrDefault</code> that emits a default\n       item if the source Observable is empty, although it will still notify of an error if the source\n       Observable emits more than one item.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#singleOrDefault(T)\"><code>singleOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/singleOrDefault.p.png\" style=\"width:100%;\" alt=\"singleOrDefault\">\n      <figcaption><p>\n       And there is also a verion of <code>singleOrDefault</code> that takes a predicate function and emits\n       the sole item from the source Observable that matches that predicate, if any; the default item if no\n       such items match; and makes an error notification if multiple items match.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#singleOrDefault(rx.functions.Func1,%20T)\"><code>singleOrDefault(Func1,T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>first</code>, <code>firstOrDefault</code>, <code>single</code>, <code>singleOrDefault</code>, and\n      <code>takeFirst</code> do not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <h3>The <code>BlockingObservable</code> Methods</h3>\n     <p>\n      The <code>BlockingObservable</code> methods do not transform an Observable into another, filtered\n      Observable, but rather they break out of the Observable cascade, blocking until the Observable emits\n      the desired item, and then return that item itself.\n     </p><p>\n      To turn an Observable into a <code>BlockingObservable</code> so that you can use these methods, you can\n      use either the <code>Observable.toBlocking</code> or <code>BlockingObservable.from</code> methods.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toBlocking()\"><code>Observable.toBlocking()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#from(rx.Observable)\"><code>BlockingObservable.from(Observable)</code></a></li>\n     </ul>\n     <figure>\n      <img src=\"images/B.first.png\" style=\"width:100%;\" alt=\"first\">\n      <figcaption><p>\n       To retrieve the first emission from a <code>BlockingObservable</code>, use the\n       <code>first</code> method with no parameters. \n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#first()\"><code>BlockingObservable.first()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.first.p.png\" style=\"width:100%;\" alt=\"first\">\n      <figcaption><p>\n       You can also pass a predicate function to the <code>first</code> method to retrieve the first emission\n       from a <code>BlockingObservable</code> that satisfies the predicate.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#first(rx.functions.Func1)\"><code>BlockingObservable.first(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.firstOrDefault.png\" style=\"width:100%;\" alt=\"firstOrDefault\">\n      <figcaption><p>\n       As with the filtering operators, the <code>first</code> method of <code>BlockingObservable</code> will\n       throw a <code>NoSuchElementException</code> if there is no first element in the source\n       <code>BlockingObservable</code>. To return a default item instead in such cases, use the\n       <code>firstOrDefault</code> method.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#firstOrDefault(T)\"><code>BlockingObservable.firstOrDefault()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.firstOrDefault.p.png\" style=\"width:100%;\" alt=\"firstOrDefault\">\n      <figcaption><p>\n       And, as with <code>first</code>, there is a <code>firstOrDefault</code> variant that takes a predicate\n       function as an argument and returns the first item from the source <code>BlockingObservable</code>\n       that satisfies that predicate, or a default item instead if no satisfying item was emitted.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#firstOrDefault(T,%20rx.functions.Func1)\"><code>BlockingObservable.firstOrDefault(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.single.png\" style=\"width:100%;\" alt=\"single\">\n      <figcaption><p>\n       The <code>single</code> operator is similar to <code>first</code>, but throws a\n       <code>NoSuchElementException</code> if the source Observable does not emit exactly one item before\n       successfully completing.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#single()\"><code>single()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.single.p.png\" style=\"width:100%;\" alt=\"single\">\n      <figcaption><p>\n       <code>single</code> also has a version that accepts a predicate, and returns the sole item emitted by the\n       source Observable that matches that predicate, or throws an exception if exactly one such item does\n       not match.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#single(rx.functions.Func1)\"><code>single(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.singleOrDefault.png\" style=\"width:100%;\" alt=\"singleOrDefault\">\n      <figcaption><p>\n       As with <code>firstOrDefault</code> there is also a <code>singleOrDefault</code> that returns a default\n       item if the source Observable is empty, although it will still throw an error if the source\n       Observable emits more than one item.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#singleOrDefault(T)\"><code>singleOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.singleOrDefault.p.png\" style=\"width:100%;\" alt=\"singleOrDefault\">\n      <figcaption><p>\n       And there is also a verion of <code>singleOrDefault</code> that takes a predicate function and returns\n       the sole item from the source Observable that matches that predicate, if any; the default item if no\n       such items match; and throws an error if multiple items match.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#singleOrDefault(rx.functions.Func1,%20T)\"><code>singleOrDefault(Func1,T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.next.png\" style=\"width:100%;\" alt=\"next\">\n      <figcaption><p>\n       The <code>next</code> operator blocks until the <code>BlockingObservable</code> emits another item, and\n       then returns that item. You can call this function repeatedly to get successive items from the\n       <code>BlockingObservable</code>, effectively iterating over its emissions in a blocking fashion.\n      </p><p>\n       The <code>latest</code> operator is similar, but rather than blocking to wait for the next emitted item,\n       it immediately returns the most-recently-emitted item, and only blocks if the Observable has not yet\n       emitted anything.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#next()\"><code>next()</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#latest()\"><code>latest()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.mostRecent.png\" style=\"width:100%;\" alt=\"mostRecent\">\n      <figcaption><p>\n       The <code>mostRecent</code> operator similarly allows you to iterate over the emissions of a\n       <code>BlockingObservable</code>, but its Iterable always immediately returns a value: either a default\n       item you provide (if the <code>BlockingObservable</code> has not yet emitted an item), or the latest\n       item the <code>BlockingObservable</code> has emitted.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#mostRecent(T)\"><code>mostRecent(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>first firstOrDefault latest mostRecent next single singleOrDefault takeFirst</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxJava, this filtering operator is implemented as <code>first</code>, <code>firstOrDefault</code>,\n      and <code>takeFirst</code>.\n     </p><p>\n      Somewhat confusingly, there are also <code>BlockingObservable</code> operators called <code>first</code>\n      and <code>firstOrDefault</code> that block and then return items, rather than immediately returning\n      Observables.\n     </p><p>\n      There are also several other operators that perform similar functions.\n     </p>\n     <h3>The Filtering Operators</h3>\n     <figure>\n      <img src=\"images/first.png\" style=\"width:100%;\" alt=\"first\">\n      <figcaption><p>\n       To filter an Observable so that only its first emission is emitted, use the\n       <code>first</code> operator with no parameters. \n      </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable.just(1, 2, 3)\n          .first()\n          .subscribe(new Subscriber&lt;Integer&gt;() {\n        @Override\n        public void onNext(Integer item) {\n            System.out.println(&quot;Next: &quot; + item);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            System.err.println(&quot;Error: &quot; + error.getMessage());\n        }\n\n        @Override\n        public void onCompleted() {\n            System.out.println(&quot;Sequence complete.&quot;);\n        }\n    });</pre></div>\n     <div class=\"output\"><pre>\nNext: 1\nSequence complete.</pre></div>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#first()\"><code>first()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/firstN.png\" style=\"width:100%;\" alt=\"first\">\n      <figcaption><p>\n       You can also pass a predicate function to <code>first</code>, in which case it will produce an\n       Observable that emits only the first item from the source Observable that the predicate evaluates as\n       <code>true</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#first(rx.functions.Func1)\"><code>first(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/firstOrDefault.png\" style=\"width:100%;\" alt=\"firstOrDefault\">\n      <figcaption><p>\n       The <code>firstOrDefault</code> operator is similar to <code>first</code>, but you pass it a default item\n       that it can emit if the source Observable fails to emit any items\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#firstOrDefault(T)\"><code>firstOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/firstOrDefaultN.png\" style=\"width:100%;\" alt=\"firstOrDefault\">\n      <figcaption><p>\n       <code>firstOrDefault</code> also has a variant to which you can pass a predicate function, so that its\n       Observable will emit the first item from the source Observable that the predicate evaluates as\n       <code>true</code>, or the default item if no items emitted by the source Observable pass the predicate.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#firstOrDefault(T)\"><code>firstOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/first.takefirst.png\" style=\"width:100%;\" alt=\"takeFirst\">\n      <figcaption><p>\n       The <code>takeFirst</code> operator behaves similarly to <code>first</code>, with the exception of how\n       these operators behave wihen the source Observable emits no items that satisfy the predicate. In such a\n       case, <code>first</code> will throw a <code>NoSuchElementException</code> while <code>takeFirst</code>\n       will return an empty Observable (one that calls <code>onCompleted</code> but never calls\n       <code>onNext</code>).\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#takeFirst(rx.functions.Func1)\"><code>takeFirst(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/single.png\" style=\"width:100%;\" alt=\"single\">\n      <figcaption><p>\n       The <code>single</code> operator is similar to <code>first</code>, but throws a\n       <code>NoSuchElementException</code> if the source Observable does not emit exactly one item before\n       successfully completing.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#single()\"><code>single()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/single.p.png\" style=\"width:100%;\" alt=\"single\">\n      <figcaption><p>\n       <code>single</code> also has a version that accepts a predicate, and emits the sole item emitted by the\n       source Observable that matches that predicate, or notifies of an exception if exactly one such item does\n       not match.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#single(rx.functions.Func1)\"><code>single(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/singleOrDefault.png\" style=\"width:100%;\" alt=\"singleOrDefault\">\n      <figcaption><p>\n       As with <code>firstOrDefault</code> there is also a <code>singleOrDefault</code> that emits a default\n       item if the source Observable is empty, although it will still notify of an error if the source\n       Observable emits more than one item.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#singleOrDefault(T)\"><code>singleOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/singleOrDefault.p.png\" style=\"width:100%;\" alt=\"singleOrDefault\">\n      <figcaption><p>\n       And there is also a verion of <code>singleOrDefault</code> that takes a predicate function and emits\n       the sole item from the source Observable that matches that predicate, if any; the default item if no\n       such items match; and makes an error notification if multiple items match.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#singleOrDefault(rx.functions.Func1,%20T)\"><code>singleOrDefault(Func1,T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      <code>first</code>, <code>firstOrDefault</code>, <code>single</code>, <code>singleOrDefault</code>, and\n      <code>takeFirst</code> do not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <h3>The <code>BlockingObservable</code> Methods</h3>\n     <p>\n      The <code>BlockingObservable</code> methods do not transform an Observable into another, filtered\n      Observable, but rather they break out of the Observable cascade, blocking until the Observable emits\n      the desired item, and then return that item itself.\n     </p><p>\n      To turn an Observable into a <code>BlockingObservable</code> so that you can use these methods, you can\n      use either the <code>Observable.toBlocking</code> or <code>BlockingObservable.from</code> methods.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#toBlocking()\"><code>Observable.toBlocking()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#from(rx.Observable)\"><code>BlockingObservable.from(Observable)</code></a></li>\n     </ul>\n     <figure>\n      <img src=\"images/B.first.png\" style=\"width:100%;\" alt=\"first\">\n      <figcaption><p>\n       To retrieve the first emission from a <code>BlockingObservable</code>, use the\n       <code>first</code> method with no parameters. \n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#first()\"><code>BlockingObservable.first()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.first.p.png\" style=\"width:100%;\" alt=\"first\">\n      <figcaption><p>\n       You can also pass a predicate function to the <code>first</code> method to retrieve the first emission\n       from a <code>BlockingObservable</code> that satisfies the predicate.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#first(rx.functions.Func1)\"><code>BlockingObservable.first(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.firstOrDefault.png\" style=\"width:100%;\" alt=\"firstOrDefault\">\n      <figcaption><p>\n       As with the filtering operators, the <code>first</code> method of <code>BlockingObservable</code> will\n       throw a <code>NoSuchElementException</code> if there is no first element in the source\n       <code>BlockingObservable</code>. To return a default item instead in such cases, use the\n       <code>firstOrDefault</code> method.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#firstOrDefault(T)\"><code>BlockingObservable.firstOrDefault()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.firstOrDefault.p.png\" style=\"width:100%;\" alt=\"firstOrDefault\">\n      <figcaption><p>\n       And, as with <code>first</code>, there is a <code>firstOrDefault</code> variant that takes a predicate\n       function as an argument and retrieves the first item from the source <code>BlockingObservable</code>\n       that satisfies that predicate, or a default item instead if no satisfying item was emitted.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#firstOrDefault(T,%20rx.functions.Func1)\"><code>BlockingObservable.firstOrDefault(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.single.png\" style=\"width:100%;\" alt=\"single\">\n      <figcaption><p>\n       The <code>single</code> operator is similar to <code>first</code>, but throws a\n       <code>NoSuchElementException</code> if the source Observable does not emit exactly one item before\n       successfully completing.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#single()\"><code>single()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.single.p.png\" style=\"width:100%;\" alt=\"single\">\n      <figcaption><p>\n       <code>single</code> also has a version that accepts a predicate, and returns the sole item emitted by the\n       source Observable that matches that predicate, or throws an exception if exactly one such item does\n       not match.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#single(rx.functions.Func1)\"><code>single(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.singleOrDefault.png\" style=\"width:100%;\" alt=\"singleOrDefault\">\n      <figcaption><p>\n       As with <code>firstOrDefault</code> there is also a <code>singleOrDefault</code> that returns a default\n       item if the source Observable is empty, although it will still throw an error if the source\n       Observable emits more than one item.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#singleOrDefault(T)\"><code>singleOrDefault(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.singleOrDefault.p.png\" style=\"width:100%;\" alt=\"singleOrDefault\">\n      <figcaption><p>\n       And there is also a verion of <code>singleOrDefault</code> that takes a predicate function and returns\n       the sole item from the source Observable that matches that predicate, if any; the default item if no\n       such items match; and throws an error if multiple items match.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#singleOrDefault(rx.functions.Func1,%20T)\"><code>singleOrDefault(Func1,T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.next.png\" style=\"width:100%;\" alt=\"next\">\n      <figcaption><p>\n       The <code>next</code> operator blocks until the <code>BlockingObservable</code> emits another item, and\n       then returns that item. You can call this function repeatedly to get successive items from the\n       <code>BlockingObservable</code>, effectively iterating over its emissions in a blocking fashion.\n      </p><p>\n       The <code>latest</code> operator is similar, but rather than blocking to wait for the next emitted item,\n       it immediately returns the most-recently-emitted item, and only blocks if the Observable has not yet\n       emitted anything.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#next()\"><code>next()</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#latest()\"><code>latest()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/B.mostRecent.png\" style=\"width:100%;\" alt=\"mostRecent\">\n      <figcaption><p>\n       The <code>mostRecent</code> operator similarly allows you to iterate over the emissions of a\n       <code>BlockingObservable</code>, but its Iterable always immediately returns a value: either a default\n       item you provide (if the <code>BlockingObservable</code> has not yet emitted an item), or the latest\n       item the <code>BlockingObservable</code> has emitted.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/observables/BlockingObservable.html#mostRecent(T)\"><code>mostRecent(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>blockingFirst blockingSingle first firstElement single singleElement takeFirst</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>find findIndex first single</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/firstN.png\" style=\"width:100%;\" alt=\"first\">\n      <figcaption><p>\n       RxJS implements the <code>first</code> operator. It optionally takes a predicate function as a parameter,\n       in which case, rather than emitting the first item from the source Observable, the resulting Observable\n       will emit the first item from the source Observable that satisfies the predicate.\n      </p><p>\n       The predicate function itself takes three arguments:\n      </p>\n      <ol>\n       <li>the item from the source Observable to be, or not be, filtered</li>\n       <li>the zero-based index of this item in the source Observable&#x2019;s sequence</li>\n       <li>the source Observable object</li>\n      </ol>\n      <p>\n       An optional third parameter (named <code>defaultValue</code>) allows you to choose an item\n       that <code>first</code> will emit if the source Observable does not emit any items (or if\n       it does not emit the <i>n</i><sup>th</sup> item that it expected.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 10)\n    .first(function (x, idx, obs) { return x % 2 === 1; });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 1\nCompleted</pre></div>\n      <p>\n       If the source Observable emits no items (or no items that match the predicate), <code>first</code>\n       will terminate with a &#x201C;<code>Sequence contains no elements.</code>&#x201D; <code>onError</code>\n       notification.\n      </p>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/single.p.png\" style=\"width:100%;\" alt=\"single\">\n      <figcaption><p>\n       The <code>single</code> operator is similar, except that it only emits its item once the source\n       Observable successfully completes after emitting one item (or one item that matches the predicate). If it\n       emits either no such items or more than one such item, <code>single</code> will terminate with an\n       <code>onError</code> notitifcation (&#x201C;<code>Sequence contains no elements.</code>&#x201D;).\n      </p>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/find.png\" style=\"width:100%;\" alt=\"find\">\n      <figcaption><p>\n       The <code>find</code> operator is much like <code>first</code> except that the predicate argument is\n       mandatory, and it behaves differently if no item from the source Observable matches the predicate.\n       While <code>first</code> will send an <code>onError</code> notification in such a case, <code>find</code>\n       will instead emit an <code>undefined</code> item.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar array = [1,2,3,4];\n\nvar source = Rx.Observable.fromArray(array)\n    .find(function (x, i, obs) {\n        return x === 5;\n    });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: undefined\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/findIndex.png\" style=\"width:100%;\" alt=\"findIndex\">\n      <figcaption><p>\n      </p><p>\n       The <code>findIndex</code> operator is similar to <code>find</code>, except that instead of emitting\n       the item that matches the predicate (or <code>undefined</code>), it emits the zero-based index of that\n       item in the source Observable&#x2019;s sequence (or <code>-1</code>).\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar array = [1,2,3,4];\n\nvar source = Rx.Observable.fromArray(array)\n    .findIndex(function (x, i, obs) {\n        return x === 5;\n    });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: -1\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <p>\n      <code>find</code>, <code>findIndex</code>, and <code>first</code> are found\n      in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.aggregates.js</code></li>\n     </ul>\n     <p>\n      They each require one of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>first firstOrDefault mostRecent single singleOrDefault takeFirst</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>First FirstOrDefault Latest Next Single SingleOrDefault</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>first first_or_default single single_or_default</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>first first_or_default single single_or_default</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>first firstOrElse head headOption headOrElse latest next single singleOption singleOrElse</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>single</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"First"},{"path":"/documentation/operators/interval.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#creating\">Creating</a></li>\n  <li class=\"active\">Interval</li>\n</ol>\n\n<h1>Interval</h1>\n<h3>create an Observable that emits a sequence of integers spaced by a given time interval</h3>\n\n<figure>\n <img src=\"images/interval.c.png\" style=\"width:100%;\" alt=\"Interval\">\n <figcaption><p>\n  The <span class=\"operator\">Interval</span> operator returns an Observable that emits an infinite sequence of\n  ascending integers, with a constant interval of time of your choosing between emissions.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/range.html\"><span class=\"operator\">Range</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/repeat.html\"><span class=\"operator\">Repeat</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/timer.html\"><span class=\"operator\">Timer</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/04_CreatingObservableSequences.html#ObservableInterval\"><cite>Introduction to Rx</cite>: Interval</a></li>\n <li><a href=\"http://rxwiki.wikidot.com/101samples#toc15\"><cite>101 Rx Samples</cite>: Observing the Passing of Time</a></li>\n <li><a href=\"http://rxwiki.wikidot.com/101samples#toc28\"><cite>101 Rx Samples</cite>: Interval &#x2014; Simple</a></li>\n <li><a href=\"http://blog.freeside.co/2015/01/29/simple-background-polling-with-rxjava/\"><cite>ad-hockery</cite>: Simple Background Polling with RxJava</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/interval.png\" style=\"width:100%;\" alt=\"interval\">\n     <figcaption><p>\n      RxGroovy implements this operator as <code>interval</code>. It accepts as its parameters a\n      span of time to wait between emissions and the <code>TimeUnit</code> in which this\n      span is measured.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit)\"><code>interval(long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit%20rx.Scheduler)\"><code>interval(long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/timer.p.png\" style=\"width:100%;\" alt=\"timer\">\n     <figcaption><p>\n      There is also a version of <code>interval</code> that returns an Observable that emits a single\n      zero after a specified delay, and then emits incrementally increasing numbers periodically\n      thereafter on a specified periodicity. This version of <code>interval</code> was called\n      <a href=\"http://reactivex.io/documentation/operators/timer.html\"><code>timer</code></a> in RxGroovy 1.0.0, but that method has since been\n      deprecated in favor of the one named <code>interval</code> with the same behavior.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit)\"><code>interval(long,long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>interval(long,long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <p>\n     <code>interval</code> operates by default on the <code>computation</code>\n     <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>. There are also variants that allow you to set the Scheduler by\n     passing one in as a parameter.\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/interval.png\" style=\"width:100%;\" alt=\"interval\">\n     <figcaption><p>\n      RxJava implements this operator as <code>interval</code>. It accepts as its parameters a\n      span of time to wait between emissions and the <code>TimeUnit</code> in which this\n      span is measured.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit)\"><code>interval(long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20java.util.concurrent.TimeUnit%20rx.Scheduler)\"><code>interval(long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/timer.p.png\" style=\"width:100%;\" alt=\"timer\">\n     <figcaption><p>\n      There is also a version of <code>interval</code> that returns an Observable that emits a single\n      zero after a specified delay, and then emits incrementally increasing numbers periodically\n      thereafter on a specified periodicity. This version of <code>interval</code> was called\n      <a href=\"http://reactivex.io/documentation/operators/timer.html\"><code>timer</code></a> in RxJava 1.0.0, but that method has since been\n      deprecated in favor of the one named <code>interval</code> with the same behavior.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit)\"><code>interval(long,long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#interval(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>interval(long,long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <p>\n     <code>interval</code> operates by default on the <code>computation</code>\n     <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>. There are also variants that allow you to set the Scheduler by\n     passing one in as a parameter.\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/interval.png\" style=\"width:100%;\" alt=\"interval\">\n     <figcaption><p>\n      RxJS implements this operator as <code>interval</code>. It accepts as its parameter the number\n      of milliseconds to wait between emissions.\n     </p><p>\n      <code>interval</code> operates by default on the <code>timeout</code>\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, or you can optionally pass in a different Scheduler as a second\n      parameter, and <code>interval</code> will operate on that Scheduler instead.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable\n    .interval(500 /* ms */)\n    .timeInterval()\n    .take(3);\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div><div class=\"output\"><pre>\nNext: {value: 0, interval: 500}\nNext: {value: 1, interval: 500}\nNext: {value: 2, interval: 500}\nCompleted</pre></div>\n     <p>\n      <code>interval</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n      <li><code>rx.timejs</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>interval</code>.\n    </p>\n    <p>\n    Returns an Observable that emits an infinite sequence of ascending integers starting at 0, with a constant interval of time of your choosing between emissions.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/interval/interval.php\n\n$loop = new \\React\\EventLoop\\StreamSelectLoop();\n\n$scheduler  = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$disposable = \\Rx\\Observable::interval(1000, $scheduler)\n    -&gt;take(5)\n    -&gt;subscribe($createStdoutObserver());\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0\nNext value: 1\nNext value: 2\nNext value: 3\nNext value: 4\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>interval</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Interval"},{"path":"/documentation/operators/observeon.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#utility\">Utility</a></li>\n  <li class=\"active\">ObserveOn</li>\n</ol>\n\n<h1>ObserveOn</h1>\n<h3>specify the Scheduler on which an observer will observe this Observable</h3>\n\n<figure>\n <img src=\"images/observeOn.c.png\" style=\"width:100%;\" alt=\"ObserveOn\">\n <figcaption><p>\n  Many implementations of ReactiveX use <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">&#x201C;<code>Scheduler</code>s&#x201D;</a>\n  to govern an Observable&#x2019;s transitions between threads in a multi-threaded environment. You can instruct\n  an Observable to send its notifications to observers on a particular Scheduler by means of the\n  <span class=\"operator\">ObserveOn</span> operator.\n </p></figcaption>\n</figure>\n<figure>\n <img src=\"images/observeOn.e.png\" style=\"width:100%;\" alt=\"ObserveOn\">\n <figcaption><p>\n  Note that <span class=\"operator\">ObserveOn</span> will forward an <code>onError</code> termination\n  notification immediately if it receives one, and will not wait for a slow-consuming observer to receive any\n  not-yet-emitted items that it is aware of first. This may mean that the <code>onError</code> notification\n  jumps ahead of (and swallows) items emitted by the source Observable, as in the diagram above.\n </p></figcaption>\n</figure>\n<figure>\n <img src=\"images/schedulers.png\" style=\"width:100%;\" alt=\"ObserveOn and SubscribeOn\">\n <figcaption><p>\n  The <a href=\"http://reactivex.io/documentation/operators/subscribeon.html\"><span class=\"operator\">SubscribeOn</span></a> operator is similar, but it\n  instructs the Observable to <em>itself</em> operate on the specified Scheduler, as well as notifying its\n  observers on that Scheduler.\n </p><p>\n  By default, an Observable and the chain of operators that you apply to it will do its work, and will notify\n  its observers, on the same thread on which its <code>Subscribe</code> method is called. The\n  <span class=\"operator\">SubscribeOn</span> operator changes this behavior by specifying a different Scheduler\n  on which the Observable should operate. The <span class=\"operator\">ObserveOn</span> operator specifies a\n  different Scheduler that the Observable will use to send notifications to its observers.\n </p><p>\n  As shown in this illustration, the <span class=\"operator\">SubscribeOn</span> operator designates which thread\n  the Observable will begin operating on, no matter at what point in the chain of operators that operator is\n  called.  <span class=\"operator\">ObserveOn</span>, on the other hand, affects the thread that the Observable\n  will use <em>below</em> where that operator appears.  For this reason, you may call \n  <span class=\"operator\">ObserveOn</span> multiple times at various points during the chain of Observable\n  operators in order to change on which threads certain of those operators operate.\n </p></figcaption>\n</figure>\n\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/subscribeon.html\"><span class=\"operator\">SubscribeOn</span></a></li>\n <li><a href=\"http://channel9.msdn.com/Series/Rx-Workshop/Rx-Workshop-Schedulers\"><cite>Rx Workshop: Schedulers</cite></a></li>\n <li><a href=\"http://www.grahamlea.com/2014/07/rxjava-threading-examples/\"><cite>RxJava Threading Examples</cite> by Graham Lea</a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/15_SchedulingAndThreading.html#SubscribeOnObserveOn\"><cite>Introduction to Rx</cite>: SubscribeOn and ObserveOn</a></li>\n <li><a href=\"http://tomstechnicalblog.blogspot.hu/2016/02/rxjava-understanding-observeon-and.html\">RxJava: Understanding observeOn() and subscribeOn()</a> by Thomas Nield</li>\n <li><a href=\"http://akarnokd.blogspot.hu/2016/03/subscribeon-and-observeon.html\">Advanced Reactive Java: SubscribeOn and ObserveOn</a> by D&#xE1;vid Karnok</li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>observe_on</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>observeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/observeOn.png\" style=\"width:100%;\" alt=\"observeOn\">\n     <figcaption><p>\n      To specify on which Scheduler the Observable should invoke its observers&#x2019; <code>onNext</code>,\n      <code>onCompleted</code>, and <code>onError</code> methods, use the <code>observeOn</code> operator,\n      passing it the appropriate <code>Scheduler</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#observeOn(rx.Scheduler)\"><code>observeOn(Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>observeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/observeOn.png\" style=\"width:100%;\" alt=\"observeOn\">\n     <figcaption><p>\n      To specify on which Scheduler the Observable should invoke its observers&#x2019; <code>onNext</code>,\n      <code>onCompleted</code>, and <code>onError</code> methods, use the <code>observeOn</code> operator,\n      passing it the appropriate <code>Scheduler</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#observeOn(rx.Scheduler)\"><code>observeOn(Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>observeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>observeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/observeOn.png\" style=\"width:100%;\" alt=\"observeOn\">\n     <figcaption><p>\n      To specify on which Scheduler the Observable should invoke its observers&#x2019; <code>onNext</code>,\n      <code>onCompleted</code>, and <code>onError</code> methods, use the <code>observeOn</code> operator,\n      passing it the appropriate <code>Scheduler</code>.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\n/* Change from immediate scheduler to timeout */\nvar source = Rx.Observable.return(42, Rx.Scheduler.immediate)\n    .observeOn(Rx.Scheduler.timeout);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div>\n     <p>\n      <code>observeOn</code> is found in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>observeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>ObserveOn ObserveOnDispatcher</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>observe_on</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>observe_on</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>observeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>observeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"ObserveOn"},{"path":"/documentation/operators/using.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#utility\">Utility</a></li>\n  <li class=\"active\">Using</li>\n</ol>\n\n   <h1>Using</h1>\n   <h3>create a disposable resource that has the same lifespan as the Observable</h3>\n   <figure>\n    <img src=\"images/using.c.png\" style=\"width:100%;\" alt=\"Using\">\n    <figcaption><p>\n     The <span class=\"operator\">Using</span> operator is a way you can instruct an Observable to create a\n     resource that exists only during the lifespan of the Observable and is disposed of when the Observable\n     terminates.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/11_AdvancedErrorHandling.html#Using\"><cite>Introduction to Rx</cite>: Using</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>scope</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>using</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/using.png\" style=\"width:100%;\" alt=\"using\">\n      <figcaption><p>\n       You pass the <code>using</code> operator three parameters:\n      </p><ol>\n       <li>a factory function that creates a disposable resource</li>\n       <li>a factory function that creates an Observable</li>\n       <li>a function that disposes of the resource</li>\n      </ol><p>\n       When an observer subscribes to the Observable returned from <code>using</code>, <code>using</code> will\n       use the Observable factory function to create the Observable the observer will observe, while at the same\n       time using the resource factory function to create whichever resource you have designed it to make. When\n       the observer unsubscribes from the Observable, or when the Observable terminates (normally or with an\n       error), <code>using</code> will call the third function to dispose of the resource it created.\n      </p><p>\n       <code>using</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#using(rx.functions.Func0,%20rx.functions.Func1,%20rx.functions.Action1)\"><code>using(Func0,Func1,Action1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>using</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/using.png\" style=\"width:100%;\" alt=\"using\">\n      <figcaption><p>\n       You pass the <code>using</code> operator three parameters:\n      </p><ol>\n       <li>a factory function that creates a disposable resource</li>\n       <li>a factory function that creates an Observable</li>\n       <li>a function that disposes of the resource</li>\n      </ol><p>\n       When an observer subscribes to the Observable returned from <code>using</code>, <code>using</code> will\n       use the Observable factory function to create the Observable the observer will observe, while at the same\n       time using the resource factory function to create whichever resource you have designed it to make. When\n       the observer unsubscribes from the Observable, or when the Observable terminates (normally or with an\n       error), <code>using</code> will call the third function to dispose of the resource it created.\n      </p><p>\n       <code>using</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#using(rx.functions.Func0,%20rx.functions.Func1,%20rx.functions.Action1)\"><code>using(Func0,Func1,Action1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>using</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>using</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/using.js.png\" style=\"width:100%;\" alt=\"using\">\n      <figcaption><p>\n       You pass the <code>using</code> operator two parameters:\n      </p><ol>\n       <li>a factory function that creates a disposable resource</li>\n       <li>a factory function that creates an Observable</li>\n      </ol><p>\n       When an observer subscribes to the Observable returned from <code>using</code>, <code>using</code> will\n       use the Observable factory function to create the Observable the observer will observe, while at the same\n       time using the resource factory function to create whichever resource you have designed it to make. To\n       dispose of the resource, call the <code>dispose</code> method of the subscription that was returned from\n       the <code>subscribe</code> call you used to subscribe an observer to the Observable that you modified\n       with <code>using</code>.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n/* Using an AsyncSubject as a resource which supports the .dispose method */\nfunction DisposableResource(value) {\n  this.value = value;\n  this.disposed = false;\n}\n\nDisposableResource.prototype.getValue = function () {\n  if (this.disposed) {\n    throw new Error(&apos;Object is disposed&apos;);\n  }\n  return this.value;\n};\n\nDisposableResource.prototype.dispose = function () {\n  if (!this.disposed) {\n    this.disposed = true;\n    this.value = null;\n  }\n  console.log(&apos;Disposed&apos;);\n};\n\nvar source = Rx.Observable.using(\n  function () { return new DisposableResource(42); },\n  function (resource) {\n    var subject = new Rx.AsyncSubject();\n    subject.onNext(resource.getValue());\n    subject.onCompleted();\n    return subject;\n  }\n);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div>\n      <div class=\"code javascript\"><pre>\nsubscription.dispose();</pre></div>\n      <div class=\"output\"><pre>\nDisposed</pre></div>\n      <p>\n       <code>using</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>using</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Using</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>using</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>using</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>using</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>using</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Using"},{"path":"/documentation/operators/filter.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">Filter</li>\n</ol>\n\n   <h1>Filter</h1>\n   <h3>emit only those items from an Observable that pass a predicate test</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"filter\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Filter</span> operator filters an Observable by only allowing items through\n     that pass a test that you specify in the form of a predicate function.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html#Where\"><cite>Introduction to Rx</cite>: Where</a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/08_Transformation.html#CastAndOfType\"><cite>Introduction to Rx</cite>: Cast and OfType</a></li>\n    <li><a href=\"http://rxmarbles.com/#filter\">RxMarbles: <code>filter</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>filter</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>filter</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>filter ofType</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/filter.png\" style=\"width:100%;\" alt=\"filter\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>filter</code>. You can filter an Observable, discarding any\n       items that do not meet some test, by passing a filtering function into the <code>filter</code> operator.\n       For example, the following code filters a list of integers, emitting only those that are even (that is,\n       where the remainder from dividing the number by two is zero):\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\nnumbers = Observable.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\nnumbers.filter({ 0 == (it % 2) }).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n2\n4\n6\n8\nSequence complete</pre></div>\n      <p>\n       <code>filter</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#filter(rx.functions.Func1)\"><code>filter(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/ofClass.png\" style=\"width:100%;\" alt=\"ofType\">\n      <figcaption><p>\n       There is also a specialized form of the <span class=\"operator\">Filter</span> operator in RxGroovy that\n       filters an Observable so that it only emits items of a particular class.\n      </p><p>\n       <code>ofType</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#ofType(java.lang.Class)\"><code>ofType(Class)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>filter ofType</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/filter.png\" style=\"width:100%;\" alt=\"filter\">\n      <figcaption><p>\n       RxJava implements this operator as <code>filter</code>.\n      </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable.just(1, 2, 3, 4, 5)\n          .filter(new Func1&lt;Integer, Boolean&gt;() {\n              @Override\n              public Boolean call(Integer item) {\n                return( item &lt; 4 );\n              }\n          }).subscribe(new Subscriber&lt;Integer&gt;() {\n        @Override\n        public void onNext(Integer item) {\n            System.out.println(&quot;Next: &quot; + item);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            System.err.println(&quot;Error: &quot; + error.getMessage());\n        }\n\n        @Override\n        public void onCompleted() {\n            System.out.println(&quot;Sequence complete.&quot;);\n        }\n    });</pre></div>\n     <div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 3\nSequence complete.</pre></div>\n      <p>\n       <code>filter</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#filter(rx.functions.Func1)\"><code>filter(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/ofClass.png\" style=\"width:100%;\" alt=\"ofType\">\n      <figcaption><p>\n       There is also a specialized form of the <span class=\"operator\">Filter</span> operator in RxJava that\n       filters an Observable so that it only emits items of a particular class.\n      </p><p>\n       <code>ofType</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#ofType(java.lang.Class)\"><code>ofType(Class)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>filter ofType</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>filter where</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/filter.png\" style=\"width:100%;\" alt=\"filter\">\n      <figcaption><p>\n       RxJS implements this operator under two names, but with identical behavior: <code>filter</code> and\n       <code>where</code>. This operator takes two parameters: the predicate function, and an optional object\n       that will represent that function&#x2019;s &#x201C;<code>this</code>&#x201D; context when it executes.\n      </p><p>\n       The predicate function itself takes three arguments:\n      </p>\n      <ol>\n       <li>the item from the source Observable to be, or not be, filtered</li>\n       <li>the zero-based index of this item in the source Observable&#x2019;s sequence</li>\n       <li>the source Observable object</li>\n      </ol>\n      <p>\n       Write the predicate function so that it returns <code>true</code> for those items you want to pass\n       through the filter to the next observer, and <code>false</code> for those items you want the filter to\n       block and suppress.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 5)\n  .filter(function (x, idx, obs) {\n    return x % 2 === 0;\n  });\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 2\nNext: 4\nCompleted</pre></div></figcaption>\n     </figure>\n     <p>\n      <code>filter</code> and <code>where</code> are found in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>filter ofType</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>OfType Where</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>filter where</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>filter</code>.\n    </p>\n    <p>\n    Emit only those items from an Observable that pass a predicate test.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/filter/filter.php\n\n$observable = Rx\\Observable::fromArray([21, 42, 84]);\n$observable\n    -&gt;filter(function ($elem) {\n        return $elem &gt;= 42;\n    })\n    -&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nNext value: 84\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>where</code>.\n    </p>\n    <p>\n    Alias for filter\n    </p>\n\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>filter slice where</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>select select_with_index</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>collect filter filterNot BlockingObservable.withFilter withFilter</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>filter</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Filter"},{"path":"/documentation/operators/sample.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#filtering\">Filtering</a></li>\n  <li class=\"active\">Sample</li>\n</ol>\n\n   <h1>Sample</h1>\n   <h3>emit the most recent items emitted by an Observable within periodic time intervals</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"sample\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Sample</span> operator periodically looks at an Observable and emits whichever\n     item it has most recently emitted since the previous sampling.\n    </p><p>\n     In some implementations, there is also a <span class=\"operator\">ThrottleFirst</span> operator that is\n     similar, but emits not the most-recently emitted item in the sample period, but the <em>first</em> item\n     that was emitted during that period.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/backpressure.html\">Backpressure-related Operators</a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/debounce.html\"><span class=\"operator\">Debounce</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/window.html\"><span class=\"operator\">Window</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/13_TimeShiftedSequences.html#Sample\"><cite>Introduction to Rx</cite>: Sample</a></li>\n    <li><a href=\"http://rxmarbles.com/#sample\">RxMarbles: <code>sample</code></a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc29\"><cite>101 Rx Samples</cite>: Sample &#x2014; Simple</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>sample throttleFirst throttleLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxGroovy implements this operator as <code>sample</code> and <code>throttleLast</code>.\n     </p><p>\n      Note that if the source Observable has emitted no items since the last time it was sampled, the\n      Observable that results from this operator will emit no item for that sampling period.\n     </p>\n     <figure>\n      <img src=\"images/sample.png\" style=\"width:100%;\" alt=\"sample\">\n      <figcaption><p>\n       One variant of <code>sample</code> (or its alias, <code>throttleLast</code>) samples at a periodic time\n       interval that you choose by passing in a <code>TimeUnit</code> and a quantity of such units as parameters\n       to <code>sample</code>.\n      </p><p>\n       The following code constructs an Observable that emits the numbers between one and a million, and then\n       samples that Observable every ten milliseconds to see what number it is emitting at that moment.\n      </p>\n     <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\ndef numbers = Observable.range( 1, 1000000 );\n\nnumbers.sample(10, java.util.concurrent.TimeUnit.MILLISECONDS).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n339707\n547810\n891282\nSequence complete</pre></div>\n      <p>\n       This variant of <code>sample</code> operates by default on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can optionally pass in a Scheduler of your choosing as\n       a third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit)\"><code>sample(long,TimeUnit)</code></a> and <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleLast(long,%20java.util.concurrent.TimeUnit)\"><code>throttleLast(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>sample(long,TimeUnit,Scheduler)</code></a> and <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>throttleLast(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/sample.o.png\" style=\"width:100%;\" alt=\"sample\">\n      <figcaption><p>\n       There ia also a variant of <code>sample</code> (that does not have a <code>throttleLast</code> alias)\n       that samples the source Observable each time a second Observable emits an item (or when it terminates).\n       You pass in that second Observable as the parameter to <code>sample</code>.\n      </p><p>\n       This variant of <code>sample</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(rx.Observable)\"><code>sample(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/throttleFirst.png\" style=\"width:100%;\" alt=\"throttleFirst\">\n      <figcaption><p>\n       There is also a <code>throttleFirst</code> operator, which differs from\n       <code>throttleLast</code>/<code>sample</code> in that it emits the <em>first</em> item emitted by the\n       source Observable in each sampling period rather than the <em>most recently emitted</em> item.\n      </p>\n     <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\nScheduler s = new TestScheduler();\nPublishSubject&lt;Integer&gt; o = PublishSubject.create();\no.throttleFirst(500, TimeUnit.MILLISECONDS, s).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);\n// send events with simulated time increments\ns.advanceTimeTo(0, TimeUnit.MILLISECONDS);\no.onNext(1); // deliver\no.onNext(2); // skip\ns.advanceTimeTo(501, TimeUnit.MILLISECONDS);\no.onNext(3); // deliver\ns.advanceTimeTo(600, TimeUnit.MILLISECONDS);\no.onNext(4); // skip\ns.advanceTimeTo(700, TimeUnit.MILLISECONDS);\no.onNext(5); // skip\no.onNext(6); // skip\ns.advanceTimeTo(1001, TimeUnit.MILLISECONDS);\no.onNext(7); // deliver\ns.advanceTimeTo(1501, TimeUnit.MILLISECONDS);\no.onCompleted();</pre></div>\n      <div class=\"output\"><pre>\n1\n3\n7\nSequence complete</pre></div>\n      <p>\n       <code>throttleFirst</code> operates by default on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can optionally pass in a Scheduler of your choosing as\n       a third parameter.\n      </p>\n      <ul>\n       <li><a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleFirst(long,%20java.util.concurrent.TimeUnit)\"><code>throttleFirst(long,TimeUnit)</code></a></li>\n       <li><a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleFirst(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>throttleFirst(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>sample throttleFirst throttleLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJava implements this operator as <code>sample</code> and <code>throttleLast</code>.\n     </p><p>\n      Note that if the source Observable has emitted no items since the last time it was sampled, the\n      Observable that results from this operator will emit no item for that sampling period.\n     </p>\n     <figure>\n      <img src=\"images/sample.png\" style=\"width:100%;\" alt=\"sample\">\n      <figcaption><p>\n       One variant of <code>sample</code> (or its alias, <code>throttleLast</code>) samples at a periodic time\n       interval that you choose by passing in a <code>TimeUnit</code> and a quantity of such units as parameters\n       to <code>sample</code>.\n      </p><p>\n       This variant of <code>sample</code> operates by default on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can optionally pass in a Scheduler of your choosing as\n       a third parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit)\"><code>sample(long,TimeUnit)</code></a> and <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleLast(long,%20java.util.concurrent.TimeUnit)\"><code>throttleLast(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>sample(long,TimeUnit,Scheduler)</code></a> and <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleLast(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>throttleLast(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/sample.o.png\" style=\"width:100%;\" alt=\"sample\">\n      <figcaption><p>\n       There ia also a variant of <code>sample</code> (that does not have a <code>throttleLast</code> alias)\n       that samples the source Observable each time a second Observable emits an item (or when it terminates).\n       You pass in that second Observable as the parameter to <code>sample</code>.\n      </p><p>\n       This variant of <code>sample</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#sample(rx.Observable)\"><code>sample(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/throttleFirst.png\" style=\"width:100%;\" alt=\"throttleFirst\">\n      <figcaption><p>\n       There is also a <code>throttleFirst</code> operator, which differs from\n       <code>throttleLast</code>/<code>sample</code> in that it emits the <em>first</em> item emitted by the\n       source Observable in each sampling period rather than the <em>most recently emitted</em> item.\n      </p><p>\n       <code>throttleFirst</code> operates by default on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can optionally pass in a Scheduler of your choosing as\n       a third parameter.\n      </p>\n      <ul>\n       <li><a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleFirst(long,%20java.util.concurrent.TimeUnit)\"><code>throttleFirst(long,TimeUnit)</code></a></li>\n       <li><a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#throttleFirst(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>throttleFirst(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>sample throttleFirst throttleLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>sample throttleFirst</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJS implements this operator with two variants of <code>sample</code>.\n     </p>\n     <figure>\n      <img src=\"images/sample.png\" style=\"width:100%;\" alt=\"sample\">\n      <figcaption><p>\n       The first variant accepts as its parameter a periodicity, defined as an integer number of milliseconds,\n       and it samples the source Observable periodically at that frequency.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.interval(1000)\n    .sample(5000)\n    .take(2);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 3\nNext: 8\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/sample.o.png\" style=\"width:100%;\" alt=\"sample\">\n      <figcaption><p>\n       The second variant accepts as its parameter an Observable, and it samples the source Observable whenever\n       this second Observable emits an item.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.interval(1000)\n    .sample(Rx.Observable.interval(5000))\n    .take(2);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 3\nNext: 8\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/throttleFirst.png\" style=\"width:100%;\" alt=\"throttleFirst\">\n      <figcaption><p>\n       There is also a <code>throttleFirst</code> operator, which differs from <code>sample</code> in that it\n       emits the <em>first</em> item emitted by the source Observable in each sampling period rather than the\n       <em>most recently emitted</em> item.\n      </p><p>\n       It does not have the variant that uses the emissions from a second Observable to regulate the sampling\n       periodicity.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar times = [\n    { value: 0, time: 100 },\n    { value: 1, time: 600 },\n    { value: 2, time: 400 },\n    { value: 3, time: 900 },\n    { value: 4, time: 200 }\n];\n\n// Delay each item by time and project value;\nvar source = Rx.Observable.from(times)\n  .flatMap(function (item) {\n    return Rx.Observable\n      .of(item.value)\n      .delay(item.time);\n  })\n  .throttleFirst(300 /* ms */);\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 2\nNext: 3\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <p>\n      <code>sample</code> and <code>throttleFirst</code> operate by default on the <code>timeout</code>\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>. They are found in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>sample throttleFirst throttleLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Sample</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>sample throttle_first throttle_last</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>sample throttleFirst throttleLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>sample sampleLatest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Sample"},{"path":"/documentation/operators/subscribeon.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#utility\">Utility</a></li>\n  <li class=\"active\">SubscribeOn</li>\n</ol>\n\n<h1>SubscribeOn</h1>\n<h3>specify the Scheduler on which an Observable will operate</h3>\n\n<figure>\n <img src=\"images/subscribeOn.c.png\" style=\"width:100%;\" alt=\"SubscribeOn\">\n <figcaption><p>\n  Many implementations of ReactiveX use <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">&#x201C;<code>Scheduler</code>s&#x201D;</a>\n  to govern an Observable&#x2019;s transitions between threads in a multi-threaded environment. You can instruct\n  an Observable to do its work on a particular Scheduler by calling the Observable&#x2019;s\n  <span class=\"operator\">SubscribeOn</span> operator.\n </p></figcaption>\n</figure>\n <p>\n  The <a href=\"http://reactivex.io/documentation/operators/observeon.html\"><span class=\"operator\">ObserveOn</span></a> operator is similar, but more\n  limited. It instructs the Observable to send notifications to observers on a specified Scheduler.\n </p><p>\n  In some implementations there is also an <span class=\"operator\">UnsubscribeOn</span> operator.\n </p>\n<figure>\n <img src=\"images/schedulers.png\" style=\"width:100%;\" alt=\"ObserveOn and SubscribeOn\">\n <figcaption><p>\n  By default, an Observable and the chain of operators that you apply to it will do its work, and will notify\n  its observers, on the same thread on which its <code>Subscribe</code> method is called. The\n  <span class=\"operator\">SubscribeOn</span> operator changes this behavior by specifying a different Scheduler\n  on which the Observable should operate. The <span class=\"operator\">ObserveOn</span> operator specifies a\n  different Scheduler that the Observable will use to send notifications to its observers.\n </p><p>\n  As shown in this illustration, the <span class=\"operator\">SubscribeOn</span> operator designates which thread\n  the Observable will begin operating on, no matter at what point in the chain of operators that operator is\n  called.  <span class=\"operator\">ObserveOn</span>, on the other hand, affects the thread that the Observable\n  will use <em>below</em> where that operator appears.  For this reason, you may call\n  <span class=\"operator\">ObserveOn</span> multiple times at various points during the chain of Observable\n  operators in order to change on which threads certain of those operators operate.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/observeon.html\"><span class=\"operator\">ObserveOn</span></a></li>\n <li><a href=\"http://channel9.msdn.com/Series/Rx-Workshop/Rx-Workshop-Schedulers\"><cite>Rx Workshop: Schedulers</cite></a></li>\n <li><a href=\"http://www.grahamlea.com/2014/07/rxjava-threading-examples/\"><cite>RxJava Threading Examples</cite></a> by Graham Lea</li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/15_SchedulingAndThreading.html#SubscribeOnObserveOn\"><cite>Introduction to Rx</cite>: SubscribeOn and ObserveOn</a></li>\n <li><a href=\"http://java.dzone.com/articles/async-abstractios-using-rx\">Async Abstractions using rx-java</a> by Biju Kunjummen, <cite>DZone</cite></li>\n <li><a href=\"http://tomstechnicalblog.blogspot.hu/2016/02/rxjava-understanding-observeon-and.html\">RxJava: Understanding observeOn() and subscribeOn()</a> by Thomas Nield</li>\n <li><a href=\"http://akarnokd.blogspot.hu/2016/03/subscribeon-and-observeon.html\">Advanced Reactive Java: SubscribeOn and ObserveOn</a> by D&#xE1;vid Karnok</li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>subscribe-on unsubscribe-on</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>subscribeOn unsubscribeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/subscribeOn.png\" style=\"width:100%;\" alt=\"subscribeOn\">\n     <figcaption><p>\n      To specify on which Scheduler the Observable should operate, use the <code>subscribeOn</code> operator,\n      passing it the appropriate <code>Scheduler</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribeOn(rx.Scheduler)\"><code>subscribeOn(Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <p>\n     To specify which Scheduler observers will use to unsubscribe from an Observable, use the\n     <code>unsubscribeOn</code> operator, passing it the appropriate <code>Scheduler</code>.\n    </p>\n    <ul>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#unsubscribeOn(rx.Scheduler)\"><code>unsubscribeOn(Scheduler)</code></a></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>subscribeOn unsubscribeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/subscribeOn.png\" style=\"width:100%;\" alt=\"subscribeOn\">\n     <figcaption><p>\n      To specify on which Scheduler the Observable should operate, use the <code>subscribeOn</code> operator,\n      passing it the appropriate <code>Scheduler</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#subscribeOn(rx.Scheduler)\"><code>subscribeOn(Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <p>\n     To specify which Scheduler observers will use to unsubscribe from an Observable, use the\n     <code>unsubscribeOn</code> operator, passing it the appropriate <code>Scheduler</code>.\n    </p>\n    <ul>\n     <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#unsubscribeOn(rx.Scheduler)\"><code>unsubscribeOn(Scheduler)</code></a></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>subscribeOn unsubscribeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>subscribeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/subscribeOn.png\" style=\"width:100%;\" alt=\"subscribeOn\">\n     <figcaption><p>\n      To specify on which Scheduler the Observable should operate, use the <code>subscribeOn</code> operator,\n      passing it the appropriate <code>Scheduler</code>.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\n/* Change from immediate scheduler to timeout */\nvar source = Rx.Observable.return(42, Rx.Scheduler.immediate)\n    .subscribeOn(Rx.Scheduler.timeout);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div>\n     <p>\n      <code>subscribeOn</code> is found in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>subscribeOn unsubscribeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>SubscribeOn SubscribeOnDispatcher</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>subscribe_on</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>subscribe_on</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>subscribeOn unsubscribeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>subscribeOn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#f00\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"SubscribeOn"},{"path":"/documentation/operators/window.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#transforming\">Transforming</a></li>\n  <li class=\"active\">Window</li>\n</ol>\n\n   <h1>Window</h1>\n   <h3>periodically subdivide items from an Observable into Observable windows and emit these\n       windows rather than emitting the items one at a time</h3>\n   <figure>\n    <img src=\"images/window.C.png\" style=\"width:100%;\" alt=\"Window\">\n    <figcaption><p>\n     <span class=\"operator\">Window</span> is similar to\n     <a href=\"http://reactivex.io/documentation/operators/buffer.html\"><span class=\"operator\">Buffer</span></a>, but rather than emitting packets\n     of items from the source Observable, it emits Observables, each one of which emits a subset of\n     items from the source Observable and then terminates with an <code>onCompleted</code>\n     notification.\n    </p><p>\n     Like <span class=\"operator\">Buffer</span>, <span class=\"operator\">Window</span> has many\n     varieties, each with its own way of subdividing the original Observable into the resulting\n     Observable emissions, each one of which contains a &#x201C;window&#x201D; onto the original\n     emitted items. In the terminology of the <span class=\"operator\">Window</span> operator, when a\n     window &#x201C;opens,&#x201D; this means that a new Observable is emitted and that Observable will\n     begin emitting items emitted by the source Observable. When a window &#x201C;closes,&#x201D; this\n     means that the emitted Observable stops emitting items from the source Observable and terminates\n     with an <code>onCompleted</code> notification to its observers.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/buffer.html\"><span class=\"operator\">Buffer</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/17_SequencesOfCoincidence.html#Window\"><cite>Introduction to Rx</cite>: Window</a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc38\"><cite>101 Rx Samples</cite>: Window</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>partition-all</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxClojure implements this operator as <code>partition-all</code>:\n     </p>\n     <figure>\n      <img src=\"images/partition-all.png\" style=\"width:100%;\" alt=\"partition-all\">\n      <figcaption><p>\n       <code>partition-all</code> opens its first window immediately. It opens a new window\n       beginning with every <code>step</code> item from the source Observable (so, for example, if\n       <code>step</code> is 3, then it opens a new window starting with every third item). It closes\n       each window when that window has emitted <code>n</code> items or if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable. If\n       <code>step&#xA0;=&#xA0;n</code> (which is the default if you omit the <code>step</code>\n       parameter) then the window size is the same as the step size and there will be a one-to-one\n       correspondence between the items emitted by the source Observable and the items emitted by\n       the collection of window Observables. If <code>step&#xA0;&lt;&#xA0;n</code> the windows will\n       overlap by <code>n&#xA0;&#x2212;&#xA0;step</code> items; if <code>step&#xA0;&gt;&#xA0;n</code>\n       the windows will drop <code>step&#xA0;&#x2212;&#xA0;n</code> items from the source Observable\n       between every window.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>window window_with_time window_with_time_or_count</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxCpp implements this operator as two variants of <code>window</code>, two variants of\n      <code>window_with_time</code>, and as <code>window_with_time_or_count</code>:\n     </p>\n     <h4><code>window(count)</code></h4>\n     <figure>\n      <img src=\"images/window3.png\" style=\"width:100%;\" alt=\"window(count)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and immediately opens a new one whenever the current window has emitted\n       <code>count</code> items. It will also close the currently open window if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       This variant of <code>window</code> emits a series of non-overlapping windows whose\n       collective emissions correspond one-to-one with those of the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>window(count, skip)</code></h4>\n     <figure>\n      <img src=\"images/window4.png\" style=\"width:100%;\" alt=\"window(count, skip)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It opens a new window\n       beginning with every <code>skip</code> item from the source Observable (so, for example, if\n       <code>skip</code> is 3, then it opens a new window starting with every third item). It closes\n       each window when that window has emitted <code>count</code> items or if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable. If\n       <code>skip&#xA0;=&#xA0;count</code> then this behaves the same as\n       <code>window(source,&#xA0;count)</code>; if <code>skip&#xA0;&lt;&#xA0;count</code> this will\n       emit windows that overlap by <code>count&#xA0;&#x2212;&#xA0;skip</code> items; if\n       <code>skip&#xA0;&gt;&#xA0;count</code> this will emit windows that drop\n       <code>skip&#xA0;&#x2212;&#xA0;count</code> items from the source Observable between every\n       window.\n      </p></figcaption>\n     </figure>\n     <h4><code>window_with_time(period</code>[<code>, coordination</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window_with_time5.png\" style=\"width:100%;\" alt=\"window_with_time(period[,coordination])\">\n      <figcaption><p>\n       This variant of <code>window_with_time</code> opens its first window immediately. It closes\n       the currently open window and opens another one every <code>period</code> of time (a\n       Duration, optionally computed by a given Coordination). It will also close the currently open\n       window if it receives an <code>onCompleted</code> or <code>onError</code> notification from\n       the source Observable. This variant of <code>window_with_time</code> emits a series of\n       non-overlapping windows whose collective emissions correspond one-to-one with those of the\n       source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>window_with_time(period, skip</code>[<code>, coordination</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window_with_time7.png\" style=\"width:100%;\" alt=\"window_with_time(period,skip[,coordination])\">\n      <figcaption><p>\n       This variant of <code>window_with_time</code> opens its first window immediately. It closes\n       the currently open window after <code>period</code> amount of time has passed since it was\n       opened, and opens a new window after <code>skip</code> amount of time has passed since the\n       previous window was opened (both times are Durations, optionally computed by a given\n       Coordination). It will also close the currently open window if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       This variant of <code>window_with_time</code> may emit windows that overlap or that have\n       gaps, depending on whether <code>skip</code> is less than or greater than\n       <code>period</code>.\n      </p></figcaption>\n     </figure>\n     <h4><code>window_with_time_or_count(period, count</code>[<code>, coordination</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window_with_time_or_count.png\" style=\"width:100%;\" alt=\"window_with_time_or_count(period,count[,coordination])\">\n      <figcaption><p>\n       <code>window_with_time_or_count</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>period</code> of time (optionally\n       computed by a given Coordination) or whenever the currently open window has emitted\n       <code>count</code> items. It will also close the currently open window if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       <code>window_with_time_or_count</code> emits a series of non-overlapping windows whose\n       collective emissions correspond one-to-one with those of the source Observable.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>window</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      There are several varieties of <span class=\"operator\">Window</span> in RxGroovy.\n     </p>\n     <h4><code>window(closingSelector)</code></h4>\n     <figure>\n      <img src=\"images/window1.png\" style=\"width:100%;\" alt=\"window(closingSelector)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and immediately opens a new one each time it observes an object emitted\n       by the Observable that is returned from <code>closingSelector</code>. In this way, this\n       variant of <code>window</code> emits a series of non-overlapping windows whose collective\n       emissions correspond one-to-one with those of the source Observable.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(rx.functions.Func0)\"><code>window(Func0)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(windowOpenings, closingSelector)</code></h4>\n     <figure>\n      <img src=\"images/window2.png\" style=\"width:100%;\" alt=\"window(windowOpenings, closingSelector)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens a window whenever it observes the\n       <code>windowOpenings</code> Observable emit an <code>Opening</code> object and at the same\n       time calls <code>closingSelector</code> to generate a closing Observable associated with that\n       window. When that closing Observable emits an object, <code>window</code> closes that window.\n       Since the closing of currently open windows and the opening of new windows are activities\n       that are regulated by independent Observables, this variant of <code>window</code> may create\n       windows that overlap (duplicating items from the source Observable) or that leave gaps\n       (discarding items from the source Observable).\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(rx.Observable,%20rx.functions.Func1)\"><code>window(Observable,Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(count)</code></h4>\n     <figure>\n      <img src=\"images/window3.png\" style=\"width:100%;\" alt=\"window(count)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and immediately opens a new one whenever the current window has emitted\n       <code>count</code> items. It will also close the currently open window if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       This variant of <code>window</code> emits a series of non-overlapping windows whose\n       collective emissions correspond one-to-one with those of the source Observable.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(int)\"><code>window(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(count, skip)</code></h4>\n     <figure>\n      <img src=\"images/window4.png\" style=\"width:100%;\" alt=\"window(count, skip)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It opens a new window\n       beginning with every <code>skip</code> item from the source Observable (so, for example, if\n       <code>skip</code> is 3, then it opens a new window starting with every third item). It closes\n       each window when that window has emitted <code>count</code> items or if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable. If\n       <code>skip&#xA0;=&#xA0;count</code> then this behaves the same as\n       <code>window(source,&#xA0;count)</code>; if <code>skip&#xA0;&lt;&#xA0;count</code> this will\n       emit windows that overlap by <code>count&#xA0;&#x2212;&#xA0;skip</code> items; if\n       <code>skip&#xA0;&gt;&#xA0;count</code> this will emit windows that drop\n       <code>skip&#xA0;&#x2212;&#xA0;count</code> items from the source Observable between every\n       window.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(int,%20int)\"><code>window(int,int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(timespan, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window5.png\" style=\"width:100%;\" alt=\"window(timespan, unit[, scheduler])\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>timespan</code> period of time\n       (measured in <code>unit</code>, and optionally on a particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>). It\n       will also close the currently open window if it receives an <code>onCompleted</code> or\n       <code>onError</code> notification from the source Observable. This variant of\n       <code>window</code> emits a series of non-overlapping windows whose collective emissions\n       correspond one-to-one with those of the source Observable.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>window</code> uses the \n       <code>computation</code> Scheduler for its timer by default.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit)\"><code>window(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>window(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(timespan, unit, count</code>[<code>, scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window6.png\" style=\"width:100%;\" alt=\"window(timespan, unit, count[, scheduler])\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>timespan</code> period of time\n       (measured in <code>unit</code>, and optionally on a particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>) or\n       whenever the currently open window has emitted <code>count</code> items. It will also close\n       the currently open window if it receives an <code>onCompleted</code> or <code>onError</code>\n       notification from the source Observable. This variant of <code>window</code> emits a series\n       of non-overlapping windows whose collective emissions correspond one-to-one with those of the\n       source Observable.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>window</code> uses the \n       <code>computation</code> Scheduler for its timer by default.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20int)\"><code>window(long,TimeUnit,int)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20int,%20rx.Scheduler)\"><code>window(long,TimeUnit,int,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(timespan, timeshift, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window7.png\" style=\"width:100%;\" alt=\"window(timespan, timeshift, unit[, scheduler])\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately, and thereafter opens\n       a new window every <code>timeshift</code> period of time (measured in <code>unit</code>, and\n       optionally on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>). It closes a\n       currently open window after <code>timespan</code> period of time has passed since that window was\n       opened. It will also close any currently open window if it receives an <code>onCompleted</code> or\n       <code>onError</code> notification from the source Observable. Depending on how you set\n       <code>timespan</code> and <code>timeshift</code> the windows that result from this operation\n       may overlap or may have gaps.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>window</code> uses the \n       <code>computation</code> Scheduler for its timer by default.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20long,%20java.util.concurrent.TimeUnit)\"><code>window(long,long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>window(long,long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n    <p>\n     You can use the <span class=\"operator\">Window</span> operator to implement backpressure (that\n     is, to cope with an Observable that may produce items too quickly for its observer to consume).\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/bp.window1.png\" style=\"width:100%;\" alt=\"Window as a backpressure strategy\">\n     <figcaption><p>\n      Window can reduce a sequence of many items to a sequence of fewer windows-of-items, making\n      them more manageable. You could, for example, emit a window of items from a bursty Observable\n      periodically, at a regular interval of time.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\nObservable&lt;Observable&lt;Integer&gt;&gt; burstyWindowed = bursty.window(500, TimeUnit.MILLISECONDS);</pre></div></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/bp.window2.png\" style=\"width:100%;\" alt=\"Window as a backpressure strategy\">\n     <figcaption><p>\n      Or you could choose to emit a new window of items for every <i>n</i> items emitted by the\n      bursty Observable.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\nObservable&lt;Observable&lt;Integer&gt;&gt; burstyWindowed = bursty.window(5);</pre></div>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>window</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      There are several varieties of <span class=\"operator\">Window</span> in RxJava.\n     </p>\n     <h4><code>window(closingSelector)</code></h4>\n     <figure>\n      <img src=\"images/window1.png\" style=\"width:100%;\" alt=\"window(closingSelector)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and immediately opens a new one each time it observes an object emitted\n       by the Observable that is returned from <code>closingSelector</code>. In this way, this\n       variant of <code>window</code> emits a series of non-overlapping windows whose collective\n       emissions correspond one-to-one with those of the source Observable.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(rx.functions.Func0)\"><code>window(Func0)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(windowOpenings, closingSelector)</code></h4>\n     <figure>\n      <img src=\"images/window2.png\" style=\"width:100%;\" alt=\"window(windowOpenings, closingSelector)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens a window whenever it observes the\n       <code>windowOpenings</code> Observable emit an <code>Opening</code> object and at the same\n       time calls <code>closingSelector</code> to generate a closing Observable associated with that\n       window. When that closing Observable emits an object, <code>window</code> closes that window.\n       Since the closing of currently open windows and the opening of new windows are activities\n       that are regulated by independent Observables, this variant of <code>window</code> may create\n       windows that overlap (duplicating items from the source Observable) or that leave gaps\n       (discarding items from the source Observable).\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(rx.Observable,%20rx.functions.Func1)\"><code>window(Observable,Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(count)</code></h4>\n     <figure>\n      <img src=\"images/window3.png\" style=\"width:100%;\" alt=\"window(count)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and immediately opens a new one whenever the current window has emitted\n       <code>count</code> items. It will also close the currently open window if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       This variant of <code>window</code> emits a series of non-overlapping windows whose\n       collective emissions correspond one-to-one with those of the source Observable.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(int)\"><code>window(int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(count, skip)</code></h4>\n     <figure>\n      <img src=\"images/window4.png\" style=\"width:100%;\" alt=\"window(count, skip)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It opens a new window\n       beginning with every <code>skip</code> item from the source Observable (so, for example, if\n       <code>skip</code> is 3, then it opens a new window starting with every third item). It closes\n       each window when that window has emitted <code>count</code> items or if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable. If\n       <code>skip&#xA0;=&#xA0;count</code> then this behaves the same as\n       <code>window(source,&#xA0;count)</code>; if <code>skip&#xA0;&lt;&#xA0;count</code> this will\n       emit windows that overlap by <code>count&#xA0;&#x2212;&#xA0;skip</code> items; if\n       <code>skip&#xA0;&gt;&#xA0;count</code> this will emit windows that drop\n       <code>skip&#xA0;&#x2212;&#xA0;count</code> items from the source Observable between every\n       window.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(int,%20int)\"><code>window(int,int)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(timespan, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window5.png\" style=\"width:100%;\" alt=\"window(timespan, unit[, scheduler])\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>timespan</code> period of time\n       (measured in <code>unit</code>, and optionally on a particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>). It\n       will also close the currently open window if it receives an <code>onCompleted</code> or\n       <code>onError</code> notification from the source Observable. This variant of\n       <code>window</code> emits a series of non-overlapping windows whose collective emissions\n       correspond one-to-one with those of the source Observable.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>window</code> uses the \n       <code>computation</code> Scheduler for its timer by default.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit)\"><code>window(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>window(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(timespan, unit, count</code>[<code>, scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window6.png\" style=\"width:100%;\" alt=\"window(timespan, unit, count[, scheduler])\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>timespan</code> period of time\n       (measured in <code>unit</code>, and optionally on a particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>) or\n       whenever the currently open window has emitted <code>count</code> items. It will also close\n       the currently open window if it receives an <code>onCompleted</code> or <code>onError</code>\n       notification from the source Observable. This variant of <code>window</code> emits a series\n       of non-overlapping windows whose collective emissions correspond one-to-one with those of the\n       source Observable.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>window</code> uses the \n       <code>computation</code> Scheduler for its timer by default.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20int)\"><code>window(long,TimeUnit,int)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20java.util.concurrent.TimeUnit,%20int,%20rx.Scheduler)\"><code>window(long,TimeUnit,int,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>window(timespan, timeshift, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window7.png\" style=\"width:100%;\" alt=\"window(timespan, timeshift, unit[, scheduler])\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately, and thereafter opens\n       a new window every <code>timeshift</code> period of time (measured in <code>unit</code>, and\n       optionally on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>). It closes a\n       currently open window after <code>timespan</code> period of time has passed since that window was\n       opened. It will also close any currently open window if it receives an <code>onCompleted</code> or\n       <code>onError</code> notification from the source Observable. Depending on how you set\n       <code>timespan</code> and <code>timeshift</code> the windows that result from this operation\n       may overlap or may have gaps.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>window</code> uses the \n       <code>computation</code> Scheduler for its timer by default.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20long,%20java.util.concurrent.TimeUnit)\"><code>window(long,long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>window(long,long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n    <p>\n     You can use the <span class=\"operator\">Window</span> operator to implement backpressure (that\n     is, to cope with an Observable that may produce items too quickly for its observer to consume).\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/bp.window1.png\" style=\"width:100%;\" alt=\"Window as a backpressure strategy\">\n     <figcaption><p>\n      Window can reduce a sequence of many items to a sequence of fewer windows-of-items, making\n      them more manageable. You could, for example, emit a window of items from a bursty Observable\n      periodically, at a regular interval of time.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable&lt;Observable&lt;Integer&gt;&gt; burstyWindowed = bursty.window(500, TimeUnit.MILLISECONDS);</pre></div></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/bp.window2.png\" style=\"width:100%;\" alt=\"Window as a backpressure strategy\">\n     <figcaption><p>\n      Or you could choose to emit a new window of items for every <i>n</i> items emitted by the\n      bursty Observable.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable&lt;Observable&lt;Integer&gt;&gt; burstyWindowed = bursty.window(5);</pre></div>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>window</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>window windowWithCount windowWithTime windowWithTimeOrCount</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <h4><code>window(windowClosingSelector)</code></h4>\n     <figure>\n      <img src=\"images/window1.cs.png\" style=\"width:100%;\" alt=\"window(windowClosingSelector)\">\n      <figcaption>\n       <p>\n<!-- https://github.com/Reactive-Extensions/RxJS/issues/427\n     windowClosingSelector is currently poorly documented & I can't figure it out from the\n     examples given -->\n       </p>\n      </figcaption>\n     </figure>\n     <h4><code>window(windowOpenings, windowClosingSelector)</code></h4>\n     <figure>\n      <img src=\"images/window2.ocs.png\" style=\"width:100%;\" alt=\"window(windowOpenings,windowClosingSelector)\">\n      <figcaption>\n       <p>\n<!-- https://github.com/Reactive-Extensions/RxJS/issues/427\n     windowClosingSelector is currently poorly documented & I can't figure it out from the\n     examples given -->\n       </p>\n      </figcaption>\n     </figure>\n     <h4><code>window(windowBoundaries)</code></h4>\n     <figure>\n      <img src=\"images/window8.b.png\" style=\"width:100%;\" alt=\"window(windowBoundaries)\">\n      <figcaption>\n       <p>\n        This variant of <code>window</code> takes a second Observable as a parameter. Whenever this\n        second Observable emits an item, <code>window</code> closes the current Observable window\n        (if any) and opens a new one.\n       </p>\n      </figcaption>\n     </figure>\n     <h4><code>windowWithCount(count)</code></h4>\n     <figure>\n      <img src=\"images/windowWithCount3.png\" style=\"width:100%;\" alt=\"windowWithCount(count)\">\n      <figcaption>\n       <p>\n        This variant of <code>windowWithCount</code> opens its first window immediately. It closes\n        the currently open window and immediately opens a new one whenever the current window has\n        emitted <code>count</code> items. It will also close the currently open window if it\n        receives an <code>onCompleted</code> or <code>onError</code> notification from the source\n        Observable. This variant of <code>windowWithCount</code> emits a series of non-overlapping\n        windows whose collective emissions correspond one-to-one with those of the source\n        Observable.\n       </p>\n      </figcaption>\n     </figure>\n     <h4><code>windowWithCount(count, skip)</code></h4>\n     <figure>\n      <img src=\"images/windowWithCount4.png\" style=\"width:100%;\" alt=\"windowWithCount(count,skip)\">\n      <figcaption>\n       <p>\n        This variant of <code>windowWithCount</code> opens its first window immediately. It opens a\n        new window beginning with every <code>skip</code> item from the source Observable (so, for\n        example, if <code>skip</code> is 3, then it opens a new window starting with every third\n        item). It closes each window when that window has emitted <code>count</code> items or if it\n        receives an <code>onCompleted</code> or <code>onError</code> notification from the source\n        Observable. If <code>skip&#xA0;=&#xA0;count</code> then this behaves the same as\n        <code>windowWithCount(count)</code>; if <code>skip&#xA0;&lt;&#xA0;count</code> this will\n        emit windows that overlap by <code>count&#xA0;&#x2212;&#xA0;skip</code> items; if\n        <code>skip&#xA0;&gt;&#xA0;count</code> this will emit windows that drop\n        <code>skip&#xA0;&#x2212;&#xA0;count</code> items from the source Observable between every\n        window.\n       </p>\n      </figcaption>\n     </figure>\n     <h4><code>windowWithTime(timeSpan</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/windowWithTime5.png\" style=\"width:100%;\" alt=\"windowWithTime(timeSpan)\">\n      <figcaption><p>\n       This variant of <code>windowWithTime</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>timespan</code> period of time (in\n       milliseconds, optionally measured on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>). It will\n       also close the currently open window if it receives an <code>onCompleted</code> or <code>onError</code>\n       notification from the source Observable. This variant of <code>windowWithTime</code> emits a\n       series of non-overlapping windows whose collective emissions correspond one-to-one with those\n       of the source Observable.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>windowWithTime</code> uses the \n       <code>timeout</code> Scheduler for its timer by default.\n      </p></figcaption>\n     </figure>\n     <h4><code>windowWithTime(timeSpan,timeShift</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/windowWithTime7.png\" style=\"width:100%;\" alt=\"windowWithTime(timeSpan,timeShift)\">\n      <figcaption><p>\n       This variant of <code>windowWithTime</code> opens its first window immediately, and\n       thereafter opens a new window every <code>timeshift</code> milliseconds (optionally measured\n       on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>). It closes a currently open window after\n       <code>timespan</code> milliseconds have passed since that window was opened. It will also close any\n       currently open window if it receives an <code>onCompleted</code> or <code>onError</code> notification\n       from the source Observable. Depending on how you set <code>timespan</code> and\n       <code>timeshift</code> the windows that result from this operation may overlap or may have\n       gaps.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>windowWithTime</code> uses the \n       <code>timeout</code> Scheduler for its timer by default.\n      </p></figcaption>\n     </figure>\n     <h4><code>windowWithTimeOrCount(timeSpan,count</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/windowWithTimeOrCount6.png\" style=\"width:100%;\" alt=\"windowWithTimeOrCount(timeSpan,count)\">\n      <figcaption><p>\n       <code>windowWithTimeOrCount</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>timespan</code> milliseconds (optionally\n       measured on a particular  <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>) or whenever the currently open\n       window has emitted <code>count</code> items. It will also close the currently open window if it receives\n       an <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       <code>windowWithTimeOrCount</code> emits a series of non-overlapping windows whose collective\n       emissions correspond one-to-one with those of the source Observable.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>windowWithTimeOrCount</code> uses\n       the <code>timeout</code> Scheduler for its timer by default.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>window</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      There are several varieties of <span class=\"operator\">Window</span> in RxKotlin.\n     </p>\n     <h4><code>window(closingSelector)</code></h4>\n     <figure>\n      <img src=\"images/window1.png\" style=\"width:100%;\" alt=\"window(closingSelector)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and immediately opens a new one each time it observes an object emitted\n       by the Observable that is returned from <code>closingSelector</code>. In this way, this\n       variant of <code>window</code> emits a series of non-overlapping windows whose collective\n       emissions correspond one-to-one with those of the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>window(windowOpenings, closingSelector)</code></h4>\n     <figure>\n      <img src=\"images/window2.png\" style=\"width:100%;\" alt=\"window(windowOpenings, closingSelector)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens a window whenever it observes the\n       <code>windowOpenings</code> Observable emit an <code>Opening</code> object and at the same\n       time calls <code>closingSelector</code> to generate a closing Observable associated with that\n       window. When that closing Observable emits an object, <code>window</code> closes that window.\n       Since the closing of currently open windows and the opening of new windows are activities\n       that are regulated by independent Observables, this variant of <code>window</code> may create\n       windows that overlap (duplicating items from the source Observable) or that leave gaps\n       (discarding items from the source Observable).\n      </p></figcaption>\n     </figure>\n     <h4><code>window(count)</code></h4>\n     <figure>\n      <img src=\"images/window3.png\" style=\"width:100%;\" alt=\"window(count)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and immediately opens a new one whenever the current window has emitted\n       <code>count</code> items. It will also close the currently open window if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       This variant of <code>window</code> emits a series of non-overlapping windows whose\n       collective emissions correspond one-to-one with those of the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>window(count, skip)</code></h4>\n     <figure>\n      <img src=\"images/window4.png\" style=\"width:100%;\" alt=\"window(count, skip)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It opens a new window\n       beginning with every <code>skip</code> item from the source Observable (so, for example, if\n       <code>skip</code> is 3, then it opens a new window starting with every third item). It closes\n       each window when that window has emitted <code>count</code> items or if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable. If\n       <code>skip&#xA0;=&#xA0;count</code> then this behaves the same as\n       <code>window(source,&#xA0;count)</code>; if <code>skip&#xA0;&lt;&#xA0;count</code> this will\n       emit windows that overlap by <code>count&#xA0;&#x2212;&#xA0;skip</code> items; if\n       <code>skip&#xA0;&gt;&#xA0;count</code> this will emit windows that drop\n       <code>skip&#xA0;&#x2212;&#xA0;count</code> items from the source Observable between every\n       window.\n      </p></figcaption>\n     </figure>\n     <h4><code>window(timespan, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window5.png\" style=\"width:100%;\" alt=\"window(timespan, unit[, scheduler])\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>timespan</code> period of time\n       (measured in <code>unit</code>, and optionally on a particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>). It\n       will also close the currently open window if it receives an <code>onCompleted</code> or\n       <code>onError</code> notification from the source Observable. This variant of\n       <code>window</code> emits a series of non-overlapping windows whose collective emissions\n       correspond one-to-one with those of the source Observable.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>window</code> uses the \n       <code>computation</code> Scheduler for its timer by default.\n      </p></figcaption>\n     </figure>\n     <h4><code>window(timespan, unit, count</code>[<code>, scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window6.png\" style=\"width:100%;\" alt=\"window(timespan, unit, count[, scheduler])\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>timespan</code> period of time\n       (measured in <code>unit</code>, and optionally on a particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>) or\n       whenever the currently open window has emitted <code>count</code> items. It will also close\n       the currently open window if it receives an <code>onCompleted</code> or <code>onError</code>\n       notification from the source Observable. This variant of <code>window</code> emits a series\n       of non-overlapping windows whose collective emissions correspond one-to-one with those of the\n       source Observable.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>window</code> uses the \n       <code>computation</code> Scheduler for its timer by default.\n      </p></figcaption>\n     </figure>\n     <h4><code>window(timespan, timeshift, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window7.png\" style=\"width:100%;\" alt=\"window(timespan, timeshift, unit[, scheduler])\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately, and thereafter opens\n       a new window every <code>timeshift</code> period of time (measured in <code>unit</code>, and\n       optionally on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>). It closes a currently\n       open window after <code>timespan</code> period of time has passed since that window was opened. It will\n       also close any currently open window if it receives an <code>onCompleted</code> or\n       <code>onError</code> notification from the source Observable. Depending on how you set\n       <code>timespan</code> and <code>timeshift</code> the windows that result from this operation\n       may overlap or may have gaps.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>window</code> uses the \n       <code>computation</code> Scheduler for its timer by default.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Window</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      There are several variants of the <span class=\"operator\">Window</span> operator in Rx.NET.\n     </p>\n     <h4><code>Window(windowClosingSelector)</code></h4>\n     <figure>\n      <img src=\"images/window1.net.png\" style=\"width:100%;\" alt=\"window(windowClosingSelector)\">\n      <figcaption><p>\n       This variant of <code>Window</code> opens its first window immediately and calls the\n       <code>windowClosingSelector</code> function to obtain a second Observable. Whenever this second\n       Observable emits a <code>TWindowClosing</code> object, <code>Window</code> closes the\n       currently open window, and immediately opens a new one. It repeats this process until either\n       Observable terminates. In this way, this variant of <code>Window</code> emits a series of\n       non-overlapping windows whose collective emissions correspond one-to-one with those of the\n       source Observable, until the closing selector observable terminates.\n      </p></figcaption>\n     </figure>\n     <h4><code>Window(count)</code></h4>\n     <figure>\n      <img src=\"images/window3.net.png\" style=\"width:100%;\" alt=\"window(count)\">\n      <figcaption><p>\n       This variant of <code>Window</code> opens its first window immediately. It closes the\n       currently open window and immediately opens a new one whenever the current window has emitted\n       <code>count</code> items. It will also close the currently open window if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       This variant of <code>Window</code> emits a series of non-overlapping windows whose\n       collective emissions correspond one-to-one with those of the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>Window(timeSpan</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window5.net.png\" style=\"width:100%;\" alt=\"window(timeSpan)\">\n      <figcaption><p>\n       This variant of <code>Window</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>timespan</code> period of time\n       (in the form of a <code>TimeSpan</code> object, and optionally on a particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>IScheduler</code></a>). It will also close the currently open window if\n       it receives an <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       This variant of <code>Window</code> emits a series of non-overlapping windows whose\n       collective emissions correspond one-to-one with those of the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>Window(count,skip)</code></h4>\n     <figure>\n      <img src=\"images/window4.net.png\" style=\"width:100%;\" alt=\"window(count,skip)\">\n      <figcaption><p>\n       This variant of <code>Window</code> opens its first window immediately. It opens a new window\n       beginning with every <code>skip</code> item from the source Observable (so, for example, if\n       <code>skip</code> is 3, then it opens a new window starting with every third item). It closes\n       each window when that window has emitted <code>count</code> items or if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable. If\n       <code>skip&#xA0;=&#xA0;count</code> then this behaves the same as\n       <code>Window(source,&#xA0;count)</code>; if <code>skip&#xA0;&lt;&#xA0;count</code> this will\n       emit windows that overlap by <code>count&#xA0;&#x2212;&#xA0;skip</code> items; if\n       <code>skip&#xA0;&gt;&#xA0;count</code> this will emit windows that drop\n       <code>skip&#xA0;&#x2212;&#xA0;count</code> items from the source Observable between every\n       window.\n      </p></figcaption>\n     </figure>\n     <h4><code>Window(windowOpenings,windowClosingSelector)</code></h4>\n     <figure>\n      <img src=\"images/window2.net.png\" style=\"width:100%;\" alt=\"window(windowOpenings,windowClosingSelector)\">\n      <figcaption><p>\n       This variant of <code>Window</code> opens a window whenever it observes the\n       <code>windowOpenings</code> Observable emit an <code>TWindowOpening</code> object and at the\n       same time calls the <code>windowClosingSelector</code>, passing it that\n       <code>TWindowOpening</code> object, to generate a closing Observable associated with that\n       window. When that closing Observable emits a <code>TWindowClosing</code> object,\n       <code>Window</code> closes the associated window. Since the closing of currently open windows\n       and the opening of new windows are activities that are regulated by independent Observables,\n       this variant of <code>Window</code> may create windows that overlap (duplicating items from\n       the source Observable) or that leave gaps (discarding items from the source Observable).\n      </p></figcaption>\n     </figure>\n     <h4><code>Window(timeSpan,count</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window6.net.png\" style=\"width:100%;\" alt=\"window(timeSpan,count)\">\n      <figcaption><p>\n       This variant of <code>Window</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>timeSpan</code> period of time\n       (in the form of a <code>TimeSpan</code> object, and optionally on a particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>IScheduler</code></a>) or whenever the currently open window has\n       emitted <code>count</code> items. It will also close the currently open window if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       This variant of <code>window</code> emits a series of non-overlapping windows whose\n       collective emissions correspond one-to-one with those of the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>Window(timeSpan,timeShift</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window7.net.png\" style=\"width:100%;\" alt=\"window(timeSpan,timeShift)\">\n      <figcaption><p>\n       This variant of <code>Window</code> opens its first window immediately, and thereafter opens\n       a new window every <code>timeShift</code> period of time (in the form of a\n       <code>TimeSpan</code> object, and optionally on a particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>IScheduler</code></a>). It\n       closes a currently open window after <code>timeSpan</code> period of time has passed since\n       that window was opened. It will also close any currently open window if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       Depending on how you set <code>timeSpan</code> and <code>timeShift</code> the windows that\n       result from this operation may overlap or may have gaps.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>window window_with_count window_with_time window_with_time_or_count</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxPY implements this operator with several variants of four different functions.\n     </p>\n     <h4><code>window(window_closing_selector)</code></h4>\n     <figure>\n      <img src=\"images/window1.net.png\" style=\"width:100%;\" alt=\"window(window_closing_selector)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens its first window immediately and calls the\n       <code>closing_selector</code> function to obtain a second Observable. When this second\n       Observable emits an item, <code>window</code> closes the currently open window, immediately\n       opens a new one, and again calls the <code>closing_selector</code> function to obtain a fresh\n       Observable. It repeats this process until the source Observable terminates. In this way, this\n       variant of <code>window</code> emits a series of non-overlapping windows whose collective\n       emissions correspond one-to-one with those of the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>window(window_openings,window_closing_selector)</code></h4>\n     <figure>\n      <img src=\"images/window2.png\" style=\"width:100%;\" alt=\"window(window_openings,window_closing_selector)\">\n      <figcaption><p>\n       This variant of <code>window</code> opens a window whenever it observes the\n       <code>window_openings</code> Observable emit an item, and at the same time calls\n       <code>closing_selector</code> to generate a closing Observable associated with that window.\n       When that closing Observable emits an object, <code>window</code> closes that window.\n       Since the closing of currently open windows and the opening of new windows are activities\n       that are regulated by independent Observables, this variant of <code>window</code> may create\n       windows that overlap (duplicating items from the source Observable) or that leave gaps\n       (discarding items from the source Observable).\n      </p></figcaption>\n     </figure>\n     <h4><code>window(window_openings)</code></h4>\n     <figure>\n      <img src=\"images/window8.png\" style=\"width:100%;\" alt=\"window(window_openings)\">\n      <figcaption><p>\n       This variant of <code>window</code> takes a second Observable as a parameter. Whenever this\n       second Observable emits an item, <code>window</code> closes the current Observable window\n       (if any) and opens a new one.\n      </p></figcaption>\n     </figure>\n     <h4><code>window_with_count(count)</code></h4>\n     <figure>\n      <img src=\"images/window_with_count3.png\" style=\"width:100%;\" alt=\"window_with_count(count)\">\n      <figcaption><p>\n       This variant of <code>window_with_count</code> opens its first window immediately. It closes\n       the currently open window and immediately opens a new one whenever the current window has\n       emitted <code>count</code> items. It will also close the currently open window if it receives\n       an <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       This variant of <code>window_with_count</code> emits a series of non-overlapping windows\n       whose collective emissions correspond one-to-one with those of the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>window_with_count(count,skip)</code></h4>\n     <figure>\n      <img src=\"images/window_with_count4.png\" style=\"width:100%;\" alt=\"window_with_count(count,skip)\">\n      <figcaption><p>\n       This variant of <code>window_with_count</code> opens its first window immediately. It opens\n       a new window beginning with every <code>skip</code> item from the source Observable (so, for\n       example, if <code>skip</code> is 3, then it opens a new window starting with every third\n       item). It closes each window when that window has emitted <code>count</code> items or if it\n       receives an <code>onCompleted</code> or <code>onError</code> notification from the source\n       Observable. If <code>skip&#xA0;=&#xA0;count</code> then this behaves the same as\n       <code>window_with_count(count)</code>; if <code>skip&#xA0;&lt;&#xA0;count</code> this will\n       emit windows that overlap by <code>count&#xA0;&#x2212;&#xA0;skip</code> items; if\n       <code>skip&#xA0;&gt;&#xA0;count</code> this will emit windows that drop\n       <code>skip&#xA0;&#x2212;&#xA0;count</code> items from the source Observable between every\n       window.\n      </p></figcaption>\n     </figure>\n     <h4><code>window_with_time(timespan</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window_with_time5.py.png\" style=\"width:100%;\" alt=\"window_with_time(timespan)\">\n      <figcaption><p>\n      </p></figcaption>\n     </figure>\n     <h4><code>window_with_time(timespan,timeshift</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window_with_time7.py.png\" style=\"width:100%;\" alt=\"window_with_time(timespan,timeshift)\">\n      <figcaption><p>\n       This variant of <code>window_with_time</code> opens its first window immediately. It closes\n       the currently open window and opens another one every <code>timespan</code> milliseconds (optionally\n       measured on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>). It will also close the\n       currently open window if it receives an <code>onCompleted</code> or <code>onError</code>\n       notification from the source Observable. This variant of <code>window_with_time</code> emits\n       a series of non-overlapping windows whose collective emissions correspond one-to-one with\n       those of the source Observable.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>window_with_time</code> uses the \n       <code>timeout</code> Scheduler for its timer by default.\n      </p></figcaption>\n     </figure>\n     <h4><code>window_with_time_or_count(timespan,count</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/window_with_time_or_count.py.png\" style=\"width:100%;\" alt=\"window_with_time_or_count(timespan,count)\">\n      <figcaption><p>\n       <code>window_with_time_or_count</code> opens its first window immediately. It closes the\n       currently open window and opens another one every <code>timespan</code> milliseconds (optionally measured\n       on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>) or whenever the currently open window has\n       emitted <code>count</code> items. It will also close the currently open window if it receives\n       an <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n       <code>window_with_time_or_count</code> emits a series of non-overlapping windows whose\n       collective emissions correspond one-to-one with those of the source Observable.\n      </p><p>\n       If you do not specify a Scheduler, this variant of <code>window_with_time_or_count</code>\n       uses the <code>timeout</code> Scheduler for its timer by default.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>window_with_count</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <h4><code>window_with_count(count,skip)</code></h4>\n     <figure>\n      <img src=\"images/window_with_count4.png\" style=\"width:100%;\" alt=\"window_with_count(count,skip)\">\n      <figcaption><p>\n       Rx.rb implements this operator as <code>window_with_count</code>. It opens its first window\n       immediately. It then opens a new window beginning with every <code>skip</code> item from the\n       source Observable (so, for example, if <code>skip</code> is 3, then it opens a new window\n       starting with every third item). It closes each window when that window has emitted\n       <code>count</code> items or if it receives an <code>onCompleted</code> or\n       <code>onError</code> notification from the source Observable. If\n       <code>skip&#xA0;=&#xA0;count</code> then there is a one-to-one correspondence between the\n       items emitted by the source Observable and those emitted by the window Observables; if\n       <code>skip&#xA0;&lt;&#xA0;count</code> the windows will overlap by\n       <code>count&#xA0;&#x2212;&#xA0;skip</code> items; if <code>skip&#xA0;&gt;&#xA0;count</code> the\n       windows will drop <code>skip&#xA0;&#x2212;&#xA0;count</code> items from the source Observable\n       between every window.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>sliding tumbling</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxScala implements this operator as <code>sliding</code> (creates windows that may overlap or\n      have gaps) and <code>tumbling</code> (creates windows whose collective emissions match those\n      of the source Observable one-to-one).\n     </p>\n     <h4><code>sliding(timespan,timeshift,count</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/sliding9.png\" style=\"width:100%;\" alt=\"sliding(timespan,timeshift,count)\">\n      <figcaption><p>\n       This variant of <code>sliding</code> opens its first window immediately, and thereafter opens\n       a new window every <code>timeshift</code> period of time (in the form of a <code>Duration</code> object,\n       and optionally on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>). It\n       closes a currently open window after <code>timespan</code> period of time has passed since\n       that window was opened or once <code>count</code> items have been emitted on that window. It\n       will also close any currently open window if it receives an <code>onCompleted</code> or\n       <code>onError</code> notification from the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>sliding(timespan,timeshift</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/sliding7.png\" style=\"width:100%;\" alt=\"sliding(timespan,timeshift)\">\n      <figcaption><p>\n       This variant of <code>sliding</code> opens its first window immediately, and thereafter opens\n       a new window every <code>timeshift</code> period of time (in the form of a <code>Duration</code> object,\n       and optionally on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>). It\n       closes a currently open window after <code>timespan</code> period of time has passed since\n       that window was opened. It will also close any currently open window if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>sliding(count,skip)</code></h4>\n     <figure>\n      <img src=\"images/sliding4.png\" style=\"width:100%;\" alt=\"sliding(count,skip)\">\n      <figcaption><p>\n       This variant of <code>sliding</code> opens its first window immediately. It opens a new\n       window beginning with every <code>skip</code> item from the source Observable (so, for\n       example, if <code>skip</code> is 3, then it opens a new window starting with every third\n       item). It closes each window when that window has emitted <code>count</code> items or if it\n       receives an <code>onCompleted</code> or <code>onError</code> notification from the source\n       Observable. If <code>skip&#xA0;=&#xA0;count</code> then this behaves the same as\n       <code>tumbling(count)</code>; if <code>skip&#xA0;&lt;&#xA0;count</code> this will\n       emit windows that overlap by <code>count&#xA0;&#x2212;&#xA0;skip</code> items; if\n       <code>skip&#xA0;&gt;&#xA0;count</code> this will emit windows that drop\n       <code>skip&#xA0;&#x2212;&#xA0;count</code> items from the source Observable between every\n       window.\n      </p></figcaption>\n     </figure>\n     <h4><code>sliding(openings,closings)</code></h4>\n     <figure>\n      <img src=\"images/sliding2.png\" style=\"width:100%;\" alt=\"sliding(openings,closings)\">\n      <figcaption><p>\n       This variant of <code>sliding</code> opens a window whenever it observes the\n       <code>openings</code> Observable emit an <code>Opening</code> object and at the same\n       time calls <code>closings</code> to generate a closing Observable associated with that\n       window. When that closing Observable emits an item, <code>sliding</code> closes that window.\n      </p></figcaption>\n     </figure>\n     <h4><code>tumbling(timespan,count</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/tumbling6.png\" style=\"width:100%;\" alt=\"tumbling(timespan,count)\">\n      <figcaption><p>\n       This variant of <code>tumbling</code> opens its first window immediately. It closes the currently open\n       window and opens another one every <code>timespan</code> period of time (a <code>Duration</code>,\n       optionally measured on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a>) or\n       whenever the currently open window has emitted <code>count</code> items. It will also close\n       the currently open window if it receives an <code>onCompleted</code> or <code>onError</code>\n       notification from the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>tumbling(timespan</code>[<code>,scheduler</code>]<code>)</code></h4>\n     <figure>\n      <img src=\"images/tumbling5.png\" style=\"width:100%;\" alt=\"tumbling(timespan)\">\n      <figcaption><p>\n       This variant of <code>tumbling</code> opens its first window immediately. It closes the currently open\n       window and opens another one every <code>timespan</code> period of time (a <code>Duration</code>,\n       optionally measured on a particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>scheduler</code></a>). It\n       will also close the currently open window if it receives an <code>onCompleted</code> or\n       <code>onError</code> notification from the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>tumbling(count)</code></h4>\n     <figure>\n      <img src=\"images/tumbling3.png\" style=\"width:100%;\" alt=\"tumbling(count)\">\n      <figcaption><p>\n       This variant of <code>tumbling</code> opens its first window immediately. It closes the\n       currently open window and immediately opens a new one whenever the current window has emitted\n       <code>count</code> items. It will also close the currently open window if it receives an\n       <code>onCompleted</code> or <code>onError</code> notification from the source Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>tumbling(boundary)</code></h4>\n     <figure>\n      <img src=\"images/tumbling8.png\" style=\"width:100%;\" alt=\"tumbling(boundary)\">\n      <figcaption><p>\n       This variant of <code>tumbling</code> takes a second Observable as a parameter. Whenever this\n       second Observable emits an item, <code>tumbling</code> closes the current Observable window\n       (if any) and opens a new one.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>window</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Window"},{"path":"/documentation/operators/create.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#creating\">Creating</a></li>\n  <li class=\"active\">Create</li>\n</ol>\n\n<h1>Create</h1>\n<h3>create an Observable from scratch by means of a function</h3>\n\n<figure>\n <img src=\"images/create.c.png\" style=\"width:100%;\" alt=\"Create\">\n <figcaption><p>\n  You can create an Observable from scratch by using the <span class=\"operator\">Create</span>\n  operator. You pass this operator a function that accepts the observer as its parameter. Write this\n  function so that it behaves as an Observable &#x2014; by calling the observer&#x2019;s <code>onNext</code>,\n  <code>onError</code>, and <code>onCompleted</code> methods appropriately.\n </p><p>\n  A well-formed finite Observable must attempt to call either the observer&#x2019;s <code>onCompleted</code>\n  method exactly once or its <code>onError</code> method exactly once, and must not thereafter\n  attempt to call any of the observer&#x2019;s other methods.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/04_CreatingObservableSequences.html#ObservableCreate\"><cite>Introduction to Rx</cite>: Create</a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/04_CreatingObservableSequences.html#ObservableGenerate\"><cite>Introduction to Rx</cite>: Generate</a></li>\n <li><a href=\"http://rxwiki.wikidot.com/101samples#toc42\"><cite>101 Rx Samples</cite>: Generate</a></li>\n <li><a href=\"https://www.youtube.com/watch?v=sDqrlNprY24\">RxJava Tutorial 03: Observable from, just, &amp; create methods</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>generator</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>create</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/create.png\" style=\"width:100%;\" alt=\"create\">\n     <figcaption><p>\n      RxGroovy implements this operator as <code>create</code>.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\ndef myObservable = Observable.create({ aSubscriber -&gt;\n  try {\n    for (int i = 1; i &lt; 1000000; i++) {\n      if (aSubscriber.isUnsubscribed()) {\n        return;\n      }\n      aSubscriber.onNext(i);\n    }\n    if (!aSubscriber.isUnsubscribed()) {\n      aSubscriber.onCompleted();\n    }\n  } catch(Throwable t) {\n    if (!aSubscriber.isUnsubscribed()) {\n      aSubscriber.onError(t);\n    }\n  }\n})</pre></div>\n     <p>\n      It is good practice to check the observer&#x2019;s <code>isUnsubscribed</code> state so that your\n      Observable can stop emitting items or doing expensive calculations when there is no longer an\n      interested observer.\n     </p><p>\n      <code>create</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#create(rx.Observable.OnSubscribe)\"><code>create(OnSubscribe)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>create</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/create.png\" style=\"width:100%;\" alt=\"create\">\n     <figcaption><p>\n      RxJava implements this operator as <code>create</code>.\n     </p><p>\n      It is good practice to check the observer&#x2019;s <code>isUnsubscribed</code> state from within the\n      function you pass to <code>create</code> so that your Observable can stop emitting items or\n      doing expensive calculations when there is no longer an interested observer.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable.create(new Observable.OnSubscribe&lt;Integer&gt;() {\n    @Override\n    public void call(Subscriber&lt;? super Integer&gt; observer) {\n        try {\n            if (!observer.isUnsubscribed()) {\n                for (int i = 1; i &lt; 5; i++) {\n                    observer.onNext(i);\n                }\n                observer.onCompleted();\n            }\n        } catch (Exception e) {\n            observer.onError(e);\n        }\n    }\n } ).subscribe(new Subscriber&lt;Integer&gt;() {\n        @Override\n        public void onNext(Integer item) {\n            System.out.println(&quot;Next: &quot; + item);\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            System.err.println(&quot;Error: &quot; + error.getMessage());\n        }\n\n        @Override\n        public void onCompleted() {\n            System.out.println(&quot;Sequence complete.&quot;);\n        }\n    });</pre></div>\n     <div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 3\nNext: 4\nSequence complete.</pre></div>\n     <p>\n      <code>create</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#create(rx.Observable.OnSubscribe)\"><code>create(OnSubscribe)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>create generate unsafeCreate</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>create createWithDisposable generate generateWithAbsoluteTime generateWithRelativeTime</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/create.png\" style=\"width:100%;\" alt=\"create\">\n     <figcaption><p>\n      RxJS implements this operator as <code>create</code> (there is also an alternate name for the\n      same operator: <code>createWithDisposable</code>).\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\n/* Using a function */\nvar source = Rx.Observable.create(function (observer) {\n    observer.onNext(42);\n    observer.onCompleted();\n\n    // Note that this is optional, you do not have to return this if you require no cleanup\n    return function () { console.log(&apos;disposed&apos;); };\n});\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div><div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\n/* Using a disposable */\nvar source = Rx.Observable.create(function (observer) {\n    observer.onNext(42);\n    observer.onCompleted();\n\n    // Note that this is optional, you do not have to return this if you require no cleanup\n    return Rx.Disposable.create(function () {\n        console.log(&apos;disposed&apos;);\n    });\n});\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div><div class=\"output\"><pre>\nNext: 42\nCompleted</pre></div>\n     <p>\n      <code>create</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/generate.png\" style=\"width:100%;\" alt=\"generate\">\n     <figcaption><p>\n      You can use the <code>generate</code> operator to create simple Observables that can generate their\n      next emissions, and can determine when to terminate, based on the value of the previous emission. The\n      basic form of <code>generate</code> takes four parameters:\n     </p><ol>\n      <li>the first item to emit</li>\n      <li>a function to test an item to determine whether to emit it (<code>true</code>) or terminate the\n          Observable (<code>false</code>)</li>\n      <li>a function to generate the next item to test and emit based on the value of the previous item</li>\n      <li>a function to transform items before emitting them</li>\n     </ol><p>\n      You can also pass in as an optional fifth parameter a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> that\n      <code>generate</code> will use to create and emit its sequence (it uses <code>currentThread</code> by\n      default).\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.generate(\n    0,\n    function (x) { return x &lt; 3; },\n    function (x) { return x + 1; },\n    function (x) { return x; }\n);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nCompleted</pre></div>\n     <p>\n      <code>generate</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/generateWithRelativeTime.png\" style=\"width:100%;\" alt=\"generateWithRelativeTime\">\n     <figcaption><p>\n      You can use the <code>generateWithRelativeTime</code> operator to create simple Observables that can\n      generate their next emissions, and can determine when to terminate, based on the value of the previous\n      emission. The basic form of <code>generateWithRelativeTime</code> takes five parameters:\n     </p><ol>\n      <li>the first item to emit</li>\n      <li>a function to test an item to determine whether to emit it (<code>true</code>) or terminate the\n          Observable (<code>false</code>)</li>\n      <li>a function to generate the next item to test and emit based on the value of the previous item</li>\n      <li>a function to transform items before emitting them</li>\n      <li>a function to indicate how long, in milliseconds, the generator should wait after the emission of\n          the previous item before emitting this item</li>\n     </ol><p>\n      You can also pass in as an optional sixth parameter a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> that\n      <code>generate</code> will use to create and emit its sequence (it uses <code>currentThread</code> by\n      default).\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.generateWithRelativeTime(\n    1,\n    function (x) { return x &lt; 4; },\n    function (x) { return x + 1; },\n    function (x) { return x; },\n    function (x) { return 100 * x; }\n).timeInterval();\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: {value: 1, interval: 100}\nNext: {value: 2, interval: 200}\nNext: {value: 3, interval: 300}\nCompleted</pre></div>\n     <p>\n      <code>generateWithRelativeTime</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n      <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/generateWithAbsoluteTime.png\" style=\"width:100%;\" alt=\"generateWithAbsoluteTime\">\n     <figcaption><p>\n      You can use the <code>generateWithAbsoluteTime</code> operator to create simple Observables that can\n      generate their next emissions, and can determine when to terminate, based on the value of the previous\n      emission. The basic form of <code>generateWithAbsoluteTime</code> takes five parameters:\n     </p><ol>\n      <li>the first item to emit</li>\n      <li>a function to test an item to determine whether to emit it (<code>true</code>) or terminate the\n          Observable (<code>false</code>)</li>\n      <li>a function to generate the next item to test and emit based on the value of the previous item</li>\n      <li>a function to transform items before emitting them</li>\n      <li>a function to indicate at what time (expressed as a <code>Date</code>) the generator should emit the\n          the new item</li>\n     </ol><p>\n      You can also pass in as an optional sixth parameter a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> that\n      <code>generate</code> will use to create and emit its sequence (it uses <code>currentThread</code> by\n      default).\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.generate(\n    1,\n    function (x) { return x &lt; 4; },\n    function (x) { return x + 1; },\n    function (x) { return x; },\n    function (x) { return Date.now() + (100 * x); }\n).timeInterval();\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: {value: 1, interval: 100}\nNext: {value: 2, interval: 200}\nNext: {value: 3, interval: 300}\nCompleted</pre></div>\n     <p>\n      <code>generateWithAbsoluteTime</code> is found in the following distribution:\n     </p>\n     <ul>\n      <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>create</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Create Generate</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>create</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>create</code>.\n    </p>\n    <p>\n    Creates an observable sequence from a specified subscribeAction callable implementation.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/create/create.php\n\n//With static method\n$source = \\Rx\\Observable::create(function (\\Rx\\ObserverInterface $observer) {\n    $observer-&gt;onNext(42);\n    $observer-&gt;onCompleted();\n\n    return new CallbackDisposable(function () {\n        echo &quot;Disposed\\n&quot;;\n    });\n});\n\n$subscription = $source-&gt;subscribe($createStdoutObserver());\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nComplete!\nDisposed\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>create generate generate_with_relative_time</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>create generate</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>apply create</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>create generate</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n      <img src=\"images/create.png\" style=\"width:100%;\" alt=\"create\">\n      <figcaption><p>\n        RxSwift implements this operator as <code>create</code>.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code swift\"><pre>\nlet source = Observable<int>.create { observer in\n  for i in 1...5 {\n    observer.on(.Next(i))\n  }\n  observer.on(.Completed)\n\n  // Note that this is optional. If you require no cleanup you can return\n  // NopDisposable.instance\n  return AnonymousDisposable {\n    print(&quot;Disposed&quot;)\n  }\n}\n\nsource.subscribe {\n  print($0)\n}</int></pre></div>\n      <div class=\"output\"><pre>\nNext(1)\nNext(2)\nNext(3)\nNext(4)\nNext(5)\nCompleted\ndisposed</pre></div>\n      </figcaption>\n    </figure>\n    <figure class=\"variant\">\n      <img src=\"images/generate.png\" style=\"width:100%;\" alt=\"generate\">\n      <figcaption><p>\n        You can use the <code>generate</code> operator to create simple Observables that can generate their\n        next emissions, and can determine when to terminate, based on the value of the previous emission. The\n        basic form of <code>generate</code> takes three parameters:\n       </p><ol>\n        <li>the first item to emit</li>\n        <li>a function to test an item to determine whether to emit it (<code>true</code>) or terminate the\n            Observable (<code>false</code>)</li>\n        <li>a function to generate the next item to test and emit based on the value of the previous item</li>\n       </ol><p>\n        You can also pass in as an optional fourth parameter a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> that\n        <code>generate</code> will use to create and emit its sequence (it uses <code>CurrentThreadScheduler</code> by\n        default).\n       </p>\n       <h4>Sample Code</h4>\n       <div class=\"code swift\"><pre>\nlet source = Observable<int>.generate(\n   initialState: 0,\n   condition: { $0 &lt; 3 },\n   iterate: { $0 + 1 }\n)\n\nsource.subscribe {\n   print($0)\n}</int></pre></div>\n         <div class=\"output\"><pre>\nNext(0)\nNext(1)\nNext(2)\nCompleted</pre></div>\n      </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Create"},{"path":"/documentation/operators/publish.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#connectable\">Connectable</a></li>\n  <li class=\"active\">Publish</li>\n</ol>\n\n<h1>Publish</h1>\n<h3>convert an ordinary Observable into a connectable Observable</h3>\n\n<figure>\n <img src=\"images/publishConnect.c.png\" style=\"width:100%;\" alt=\"Publish\">\n <figcaption><p>\n  A <dfn>connectable Observable</dfn> resembles an ordinary Observable, except that it does not begin\n  emitting items when it is subscribed to, but only when the <span class=\"operator\">Connect</span>\n  operator is applied to it. In this way you can prompt an Observable to begin emitting items at a\n  time of your choosing.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/connect.html\"><span class=\"operator\">Connect</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/refcount.html\"><span class=\"operator\">RefCount</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/replay.html\"><span class=\"operator\">Replay</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/14_HotAndColdObservables.html#PublishAndConnect\"><cite>Introduction to Rx</cite>: Publish &amp; Connect</a></li>\n <li><a href=\"http://rxwiki.wikidot.com/101samples#toc48\"><cite>101 Rx Samples</cite>: Publish &#x2014; Sharing a subscription with multiple Observers</a></li>\n <li><a href=\"http://nerds.weddingpartyapp.com/tech/2015/01/21/rxjava-share-publish-refcount-and-all-that-jazz/\"><cite>Wedding Party</cite>: Share, Publish, Refcount, and All That Jazz</a> by Kaushik Gopal</li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>multicast publish</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>publish</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/publishConnect.png\" style=\"width:100%;\" alt=\"publish\">\n     <figcaption><p>\n      RxGroovy implements this operator as <code>publish</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#publish()\"><code>publish()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/publishConnect.f.png\" style=\"width:100%;\" alt=\"publish\">\n     <figcaption><p>\n      There is also a variant that takes a function as a parameter. This function takes an emitted\n      item from the source Observable as a parameter and produces the item that will be emitted in\n      its place by the resulting Observable.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#publish(rx.functions.Func1)\"><code>publish(Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>publish</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/publishConnect.png\" style=\"width:100%;\" alt=\"publish\">\n     <figcaption><p>\n      RxJava implements this operator as <code>publish</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#publish()\"><code>publish()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/publishConnect.f.png\" style=\"width:100%;\" alt=\"publish\">\n     <figcaption><p>\n      There is also a variant that takes a function as a parameter. This function takes an emitted\n      item from the source Observable as a parameter and produces the item that will be emitted in\n      its place by the <code>ConnectableObservable</code>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#publish(rx.functions.Func1)\"><code>publish(Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>publish</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>let letBind multicast publish publishLast publishValue</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/publishConnect.f.png\" style=\"width:100%;\" alt=\"publish\">\n     <figcaption><p>\n      In RxJS, the <code>publish</code> operator takes a function as a parameter. This function\n      takes an emitted item from the source Observable as a parameter and produces the item that\n      will be emitted in its place by the returned <code>ConnectableObservable</code>.\n     </p>\n    <h4>Sample Code</h4>\n    <div class=\"code javascript\"><pre>\nvar interval = Rx.Observable.interval(1000);\n\nvar source = interval\n    .take(2)\n    .doAction(function (x) {\n        console.log(&apos;Side effect&apos;);\n    });\n\nvar published = source.publish();\n\npublished.subscribe(createObserver(&apos;SourceA&apos;));\npublished.subscribe(createObserver(&apos;SourceB&apos;));\n\nvar connection = published.connect();\n\nfunction createObserver(tag) {\n    return Rx.Observer.create(\n        function (x) { console.log(&apos;Next: &apos; + tag + x); },\n        function (err) { console.log(&apos;Error: &apos; + err); },\n        function () { console.log(&apos;Completed&apos;); });\n}</pre></div><div class=\"output\"><pre>\nSide effect\nNext: SourceA0\nNext: SourceB0\nSide effect\nNext: SourceA1\nNext: SourceB1\nCompleted</pre></div>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/publishValue.png\" style=\"width:100%;\" alt=\"publishValue\">\n     <figcaption><p>\n      The <code>publishValue</code> operator takes, in addition to the function described above, an\n      initial item to be emitted by the resulting <code>ConnectableObservable</code> at connection\n      time before emitting the items from the source Observable. It will not, however, emit this\n      initial item to observers that subscribe after the time of connection.\n     </p>\n    <h4>Sample Code</h4>\n    <div class=\"code javascript\"><pre>\nvar interval = Rx.Observable.interval(1000);\n\nvar source = interval\n    .take(2)\n    .doAction(function (x) {\n        console.log(&apos;Side effect&apos;);\n    });\n\nvar published = source.publishValue(42);\n\npublished.subscribe(createObserver(&apos;SourceA&apos;));\npublished.subscribe(createObserver(&apos;SourceB&apos;));\n\nvar connection = published.connect();\n\nfunction createObserver(tag) {\n    return Rx.Observer.create(\n        function (x) { console.log(&apos;Next: &apos; + tag + x); },\n        function (err) { console.log(&apos;Error: &apos; + err); },\n        function () { console.log(&apos;Completed&apos;); });\n}</pre></div><div class=\"output\"><pre>\nNext: SourceA42\nNext: SourceB42\nSide effect\nNext: SourceA0\nNext: SourceB0\nSide effect\nNext: SourceA1\nNext: SourceB1\nCompleted\nCompleted</pre></div>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/publishLast.png\" style=\"width:100%;\" alt=\"publishLast\">\n     <figcaption><p>\n      The <code>publishLast</code> operator is similar to <code>publish</code>, and takes a\n      similarly-behaving function as its parameter. It differs from <code>publish</code> in that\n      instead of applying that function to, and emitting an item for <em>every</em> item emitted by\n      the source Observable subsequent to the connection, it only applies that function to and emits\n      an item for the <em>last</em> item that was emitted by the source Observable, when that source\n      Observable terminates normally.\n     </p>\n    <h4>Sample Code</h4>\n    <div class=\"code javascript\"><pre>\nvar interval = Rx.Observable.interval(1000);\n\nvar source = interval\n    .take(2)\n    .doAction(function (x) {\n        console.log(&apos;Side effect&apos;);\n    });\n\nvar published = source.publishLast();\n\npublished.subscribe(createObserver(&apos;SourceA&apos;));\npublished.subscribe(createObserver(&apos;SourceB&apos;));\n\nvar connection = published.connect();\n\nfunction createObserver(tag) {\n    return Rx.Observer.create(\n        function (x) { console.log(&apos;Next: &apos; + tag + x); },\n        function (err) { console.log(&apos;Error: &apos; + err); },\n        function () { console.log(&apos;Completed&apos;); });\n}</pre></div><div class=\"output\"><pre>\nSide effect\nSide effect\nNext: SourceA1\nCompleted\nNext: SourceB1\nCompleted</pre></div>\n     </figcaption>\n    </figure>\n    <p>\n     The above operators are available in the following packages:\n    </p>\n    <ul>\n     <li><code>rx.all.js</code></li>\n     <li><code>rx.all.compat.js</code></li>\n     <li><code>rx.binding.js</code> (requires either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n     <li><code>rx.lite.js</code></li>\n     <li><code>rx.lite.compat.js</code></li>\n    </ul>\n    <p>\n     RxJS also has a <code>multicast</code> operator which operates on an ordinary Observable,\n     multicasts that Observable by means of a particular Subject that you specify, applies a\n     transformative function to each emission, and then emits those transformed values as its own\n     ordinary Observable sequence. Each subscription to this new Observable will trigger a\n     new subscription to the underlying multicast Observable.\n    </p>\n    <h4>Sample Code</h4>\n    <div class=\"code javascript\"><pre>\nvar subject = new Rx.Subject();\nvar source = Rx.Observable.range(0, 3)\n    .multicast(subject);\n\nvar observer = Rx.Observer.create(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); }\n);\n\nvar subscription = source.subscribe(observer);\nsubject.subscribe(observer);\n\nvar connected = source.connect();\n\nsubscription.dispose();</pre></div><div class=\"output\"><pre>\nNext: 0\nNext: 0\nNext: 1\nNext: 1\nNext: 2\nNext: 2\nCompleted</pre></div>\n    <p>\n     The <code>multicast</code> operator is available in the following packages:\n    </p>\n    <ul>\n     <li><code>rx.all.js</code></li>\n     <li><code>rx.all.compat.js</code></li>\n     <li><code>rx.binding.js</code> (requires either <code>rx.lite.js</code> or <code>rx.compat.js</code>)</li>\n     <li><code>rx.lite.js</code></li>\n     <li><code>rx.lite.compat.js</code></li>\n    </ul>\n    <p>\n     There is also a <code>let</code> operator (the alias <code>letBind</code> is available for\n     browsers such as Internet Explorer before IE9 where &#x201C;<code>let</code>&#x201D; is\n     forbidden). It is similar to <code>multicast</code> but does not multicast the underlying\n     Observable through a Subject:\n    </p>\n    <h4>Sample Code</h4>\n    <div class=\"code javascript\"><pre>\nvar obs = Rx.Observable.range(1, 3);\n\nvar source = obs.let(function (o) { return o.concat(o); });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div><div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 3\nNext: 1\nNext: 2\nNext: 3\nCompleted</pre></div>\n    <p>\n     The <code>let</code> (or <code>letBind</code>) operator is available in the following packages:\n    </p>\n    <ul>\n     <li><code>rx.all.js</code></li>\n     <li><code>rx.all.compat.js</code></li>\n     <li><code>rx.experimental.js</code></li>\n    </ul>\n    <p>\n     It requires one of the following packages:\n    </p>\n    <ul>\n     <li><code>rx.js</code></li>\n     <li><code>rx.compat.js</code></li>\n     <li><code>rx.lite.js</code></li>\n     <li><code>rx.lite.compat.js</code></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>publish</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Multicast Publish PublishLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>multicast multicastWithSelector publish publishLast publishValue</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>multicast</code>.\n    </p>\n    <p>\n    Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function&apos;s invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/multicast/multicast.php\n\n$subject = new \\Rx\\Subject\\Subject();\n$source  = \\Rx\\Observable::range(0, 3)-&gt;multicast($subject);\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n$subject-&gt;subscribe($stdoutObserver);\n\n$connected = $source-&gt;connect();\n\n$subscription-&gt;dispose();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0\nNext value: 0\nNext value: 1\nNext value: 1\nNext value: 2\nNext value: 2\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>multicastWithSelector</code>.\n    </p>\n    <p>\n    Multicasts the source sequence notifications through an instantiated subject from a subject selector factory, into all uses of the sequence within a selector function. Each subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function&apos;s invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.\n    </p>\n\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>publish</code>.\n    </p>\n    <p>\n    Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence. This operator is a specialization of Multicast using a regular Subject.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/publish/publish.php\n\n/* With publish */\n$interval = \\Rx\\Observable::range(0, 10);\n\n$source = $interval\n    -&gt;take(2)\n    -&gt;doOnNext(function ($x) {\n        echo &quot;Side effect\\n&quot;;\n    });\n\n$published = $source-&gt;publish();\n\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceC &apos;));\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceD &apos;));\n\n$published-&gt;connect();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nSide effect\nSourceC Next value: 0\nSourceD Next value: 0\nSide effect\nSourceC Next value: 1\nSourceD Next value: 1\nSourceC Complete!\nSourceD Complete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>publishLast</code>.\n    </p>\n    <p>\n    Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification. This operator is a specialization of Multicast using a AsyncSubject.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/publish/publishLast.php\n\n$range = \\Rx\\Observable::fromArray(range(0, 1000));\n\n$source = $range\n    -&gt;take(2)\n    -&gt;doOnNext(function ($x) {\n        echo &quot;Side effect\\n&quot;;\n    });\n\n$published = $source-&gt;publishLast();\n\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceA&apos;));\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceB&apos;));\n\n$connection = $published-&gt;connect();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nSide effect\nSide effect\nSourceANext value: 1\nSourceBNext value: 1\nSourceAComplete!\nSourceBComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>publishValue</code>.\n    </p>\n    <p>\n    Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue. This operator is a specialization of Multicast using a BehaviorSubject.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/publish/publishValue.php\n\n$range = \\Rx\\Observable::fromArray(range(0, 1000));\n\n$source = $range\n    -&gt;take(2)\n    -&gt;doOnNext(function ($x) {\n        echo &quot;Side effect\\n&quot;;\n    });\n\n$published = $source-&gt;publishValue(42);\n\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceA&apos;));\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceB&apos;));\n\n$connection = $published-&gt;connect();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nSourceANext value: 42\nSourceBNext value: 42\nSide effect\nSourceANext value: 0\nSourceBNext value: 0\nSide effect\nSourceANext value: 1\nSourceBNext value: 1\nSourceAComplete!\nSourceBComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>let let_bind multicast publish publishValue</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>multicast publish publishLast</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>multicast publish</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Publish"},{"path":"/documentation/operators/retry.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#error\">Error Handling</a></li>\n  <li class=\"active\">Retry</li>\n</ol>\n\n   <h1>Retry</h1>\n   <h3>if a source Observable emits an error, resubscribe to it in the hopes that it will complete\n       without error</h3>\n\n   <figure>\n    <img src=\"images/retry.C.png\" style=\"width:100%;\" alt=\"Retry\">\n    <figcaption><p>\n     The <span class=\"operator\">Retry</span> operator responds to an <code>onError</code>\n     notification from the source Observable by not passing that call through to its observers, but\n     instead by resubscribing to the source Observable and giving it another opportunity to complete\n     its sequence without error. <span class=\"operator\">Retry</span> always passes\n     <code>onNext</code> notifications through to its observers, even from sequences that terminate\n     with an error, so this can cause duplicate emissions (as shown in the diagram above).\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/catch.html\"><span class=\"operator\">Catch</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/11_AdvancedErrorHandling.html#Retry\"><cite>Introduction to Rx</cite>: Retry</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxClojure does not implement the <span class=\"operator\">Retry</span> operator.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>retry</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxCpp implements this operator as <code>retry</code>:\n     </p>\n     <figure>\n      <img src=\"images/retry.png\" style=\"width:100%;\" alt=\"retry\">\n      <figcaption><p>\n       <code>retry</code> takes a single argument, a count of the number of times it should try\n       resubscribing to the source Observable when it encounters errors. If this count is exceeded,\n       <code>retry</code> will not attempt to resubscribe and will instead pass the\n       <code>onError</code> notification to its observers.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>retry retryWhen</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxGroovy has two versions of this operator: <code>retry</code> and <code>retryWhen</code>.\n     </p>\n     <figure>\n      <img src=\"images/retry.png\" style=\"width:100%;\" alt=\"retry\">\n      <figcaption><p>\n       One variant of <code>retry</code> takes no parameters. It will continue to resubscribe to and\n       mirror the source Observable no matter how many <code>onError</code> notifications it\n       receives.\n      </p><p>\n       Another variant of <code>retry</code> takes a single parameter: a count of the number of\n       times it should try to resubscribe to the source Observable when it encounters errors. If\n       this count is exceeded, <code>retry</code> will not attempt to resubscribe again and will\n       instead pass the latest <code>onError</code> notification to its observers.\n      </p><p>\n       A third variant of <code>retry</code> takes a predicate function as a parameter. You write\n       this function to accept two arguments: an Integer count of how many retries have taken place\n       thusfar, and a Throwable indicating the error that caused the <code>onError</code>\n       notification. This function returns a Boolean to indicate whether or not <code>retry</code>\n       should resubscribe to and mirror the source Observable. If it does not, then\n       <code>retry</code> passes the latest <code>onError</code> notification to its observers.\n      </p><p>\n       <code>retry</code> by default operates on the <code>trampoline</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry()\"><code>retry()</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(long)\"><code>retry(long)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(rx.functions.Func2)\"><code>retry(Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/retryWhen.f.png\" style=\"width:100%;\" alt=\"retryWhen\">\n      <figcaption><p>\n       The <code>retryWhen</code> operator is similar to <code>retry</code> but decides whether or\n       not to resubscribe to and mirror the source Observable by passing the Throwable from the\n       <code>onError</code> notification to a function that generates a second Observable, and\n       observes its result to determine what to do. If that result is an emitted item,\n       <code>retryWhen</code> resubscribes to and mirrors the source and the process repeats; if\n       that result is an <code>onError</code> notification, <code>retryWhen</code> passes this\n       notification on to its observers and terminates.\n      </p><p>\n       <code>retryWhen</code> by default operates on the <code>trampoline</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, and there is also a version that accepts a Scheduler as a\n       parameter.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1)\"><code>retryWhen(Func1)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1,%20rx.Scheduler)\"><code>retryWhen(Func1,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>retry retryWhen</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJava has two versions of this operator: <code>retry</code> and <code>retryWhen</code>.\n     </p>\n     <figure>\n      <img src=\"images/retry.png\" style=\"width:100%;\" alt=\"retry\">\n      <figcaption><p>\n       One variant of <code>retry</code> takes no parameters. It will continue to resubscribe to and\n       mirror the source Observable no matter how many <code>onError</code> notifications it\n       receives.\n      </p><p>\n       Another variant of <code>retry</code> takes a single parameter: a count of the number of\n       times it should try to resubscribe to the source Observable when it encounters errors. If\n       this count is exceeded, <code>retry</code> will not attempt to resubscribe again and will\n       instead pass the latest <code>onError</code> notification to its observers.\n      </p><p>\n       A third variant of <code>retry</code> takes a predicate function as a parameter. You write\n       this function to accept two arguments: an Integer count of how many retries have taken place\n       thusfar, and a Throwable indicating the error that caused the <code>onError</code>\n       notification. This function returns a Boolean to indicate whether or not <code>retry</code>\n       should resubscribe to and mirror the source Observable. If it does not, then\n       <code>retry</code> passes the latest <code>onError</code> notification to its observers.\n      </p><p>\n       <code>retry</code> by default operates on the <code>trampoline</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry()\"><code>retry()</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(long)\"><code>retry(long)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retry(rx.functions.Func2)\"><code>retry(Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/retryWhen.f.png\" style=\"width:100%;\" alt=\"retryWhen\">\n      <figcaption><p>\n       The <code>retryWhen</code> operator is similar to <code>retry</code> but decides whether or\n       not to resubscribe to and mirror the source Observable by passing the Throwable from the\n       <code>onError</code> notification to a function that generates a second Observable, and\n       observes its result to determine what to do. If that result is an emitted item,\n       <code>retryWhen</code> resubscribes to and mirrors the source and the process repeats; if that\n       result is an <code>onError</code> notification, <code>retryWhen</code> passes this\n       notification on to its observers and terminates.\n      </p><p>\n       <code>retryWhen</code> by default operates on the <code>trampoline</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, and there is also a version that accepts a Scheduler as a\n       parameter.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code java\"><pre>\nObservable.create((Subscriber&lt;? super String&gt; s) -&gt; {\n      System.out.println(&quot;subscribing&quot;);\n      s.onError(new RuntimeException(&quot;always fails&quot;));\n  }).retryWhen(attempts -&gt; {\n      return attempts.zipWith(Observable.range(1, 3), (n, i) -&gt; i).flatMap(i -&gt; {\n          System.out.println(&quot;delay retry by &quot; + i + &quot; second(s)&quot;);\n          return Observable.timer(i, TimeUnit.SECONDS);\n      });\n  }).toBlocking().forEach(System.out::println);</pre></div>\n      <div class=\"output\"><pre>\nsubscribing\ndelay retry by 1 second(s)\nsubscribing\ndelay retry by 2 second(s)\nsubscribing\ndelay retry by 3 second(s)\nsubscribing</pre></div>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1)\"><code>retryWhen(Func1)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#retryWhen(rx.functions.Func1,%20rx.Scheduler)\"><code>retryWhen(Func1,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>retry retryUntil retryWhen</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n       <span style=\"color:#f00\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>retry</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJS implements this operator as <code>retry</code>.\n     </p>\n     <figure>\n      <img src=\"images/retry.png\" style=\"width:100%;\" alt=\"retry\">\n      <figcaption><p>\n       One variant of <code>retry</code> takes no parameters. It will continue to resubscribe to and\n       mirror the source Observable no matter how many <code>onError</code> notifications it\n       receives.\n      </p><p>\n       Another variant of <code>retry</code> takes a single parameter: a count of the number of\n       <code>onError</code> notification it should be willing to accept before it too fails and\n       passes the <code>onError</code> to its observers. For example, <code>retry(2)</code> means\n       that <code>retry</code> will resubscribe to and mirror the source Observable the first time\n       it receives an <code>onError</code> notification, but will terminate with an error the second\n       time this happens.\n      </p></figcaption>\n     </figure>\n     <p>\n      <code>retry</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>retry retryWhen</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxKotlin has two versions of this operator: <code>retry</code> and <code>retryWhen</code>.\n     </p>\n     <figure>\n      <img src=\"images/retry.png\" style=\"width:100%;\" alt=\"retry\">\n      <figcaption><p>\n       One variant of <code>retry</code> takes no parameters. It will continue to resubscribe to and\n       mirror the source Observable no matter how many <code>onError</code> notifications it\n       receives.\n      </p><p>\n       Another variant of <code>retry</code> takes a single parameter: a count of the number of\n       times it should try to resubscribe to the source Observable when it encounters errors. If\n       this count is exceeded, <code>retry</code> will not attempt to resubscribe again and will\n       instead pass the latest <code>onError</code> notification to its observers.\n      </p><p>\n       A third variant of <code>retry</code> takes a predicate function as a parameter. You write\n       this function to accept two arguments: an Integer count of how many retries have taken place\n       thusfar, and a Throwable indicating the error that caused the <code>onError</code>\n       notification. This function returns a Boolean to indicate whether or not <code>retry</code>\n       should resubscribe to and mirror the source Observable. If it does not, then\n       <code>retry</code> passes the latest <code>onError</code> notification to its observers.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/retryWhen.f.png\" style=\"width:100%;\" alt=\"retryWhen\">\n      <figcaption><p>\n       The <code>retryWhen</code> operator is similar to <code>retry</code> but decides whether or\n       not to resubscribe to and mirror the source Observable by passing the Throwable from the\n       <code>onError</code> notification to a function that generates a second Observable, and\n       observes its result to determine what to do. If that result is an emitted item,\n       <code>retryWhen</code> resubscribes to and mirrors the source and the process repeats; if\n       that result is an <code>onError</code> notification, <code>retryWhen</code> passes this\n       notification on to its observers and terminates.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Retry</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      Rx.NET implements this operator as <code>Retry</code>.\n     </p>\n     <figure>\n      <img src=\"images/retry.C.png\" style=\"width:100%;\" alt=\"Retry\">\n      <figcaption><p>\n       One variant of <code>Retry</code> takes no parameters. It will continue to resubscribe to and\n       mirror the source Observable no matter how many <code>onError</code> notifications it\n       receives.\n      </p><p>\n       Another variant of <code>Retry</code> takes a single parameter: a count of the number of\n       <code>onError</code> notification it should be willing to accept before it too fails and\n       passes the <code>onError</code> to its observers. For example, <code>Retry(2)</code> means\n       that <code>Retry</code> will resubscribe to and mirror the source Observable the first time\n       it receives an <code>onError</code> notification, but will terminate with an error the second\n       time this happens.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>retry retryWhen</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>retry</code>.\n    </p>\n    <p>\n    Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely. Note if you encounter an error and want it to retry once, then you must use -&gt;retry(2).\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/retry/retry.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$count = 0;\n\n$observable = Rx\\Observable::interval(1000, $scheduler)\n    -&gt;flatMap(function ($x) use (&amp;$count) {\n        if (++$count &lt; 2) {\n            return Rx\\Observable::error(new \\Exception(&quot;Something&quot;));\n        }\n        return Rx\\Observable::just(42);\n    })\n    -&gt;retry(3)\n    -&gt;take(1);\n\n$observable-&gt;subscribe($stdoutObserver);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>retryWhen</code>.\n    </p>\n    <p>\n    Repeats the source observable sequence on error when the notifier emits a next value. If the source observable errors and the notifier completes, it will complete the source sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/retry/retryWhen.php\n\n$loop      = new \\React\\EventLoop\\StreamSelectLoop();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$source = Rx\\Observable::interval(1000)\n    -&gt;map(function ($n) {\n        if ($n === 2) {\n            throw new Exception();\n        }\n        return $n;\n    })\n    -&gt;retryWhen(function ($errors) {\n        return $errors-&gt;delay(200);\n    })\n    -&gt;take(6);\n\n$subscription = $source-&gt;subscribe($createStdoutObserver(), $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0\nNext value: 1\nNext value: 0\nNext value: 1\nNext value: 0\nNext value: 1\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>retry</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxPY implements this operator as <code>retry</code>:\n     </p>\n     <figure>\n      <img src=\"images/retry.png\" style=\"width:100%;\" alt=\"retry\">\n      <figcaption><p>\n       <code>retry</code> takes a single optional parameter, a count of the number of times it\n       should try resubscribing to and mirroring the source Observable when it encounters errors. If\n       this count is exceeded, <code>retry</code> will not attempt to resubscribe and will instead\n       pass the <code>onError</code> notification to its observers. If you omit this parameter,\n       <code>retry</code> will attempt to resubscribe and mirror indefinitely, no matter how many\n       <code>onError</code> notifications it receives.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>retry retry_infinitely</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      Rx.rb has two versions of this operator: <code>retry</code> and <code>retry_infinitely</code>.\n     </p>\n     <figure>\n      <img src=\"images/retry.png\" style=\"width:100%;\" alt=\"retry\">\n      <figcaption><p>\n       <code>retry</code> takes a single optional parameter, a count of the number of times it\n       should try resubscribing to and mirroring the source Observable when it encounters errors. If\n       this count is exceeded, <code>retry</code> will not attempt to resubscribe and will instead\n       pass the <code>onError</code> notification to its observers.\n      </p></figcaption>\n     </figure>\n     <p>\n      <code>retryInfinitely</code>, on the other hand, will attempt to resubscribe to and mirror the\n      source Observable indefinitely, no matter how many <code>onError</code> notifications it\n      receives.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>retry retryWhen</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxScala has two versions of this operator: <code>retry</code> and <code>retryWhen</code>.\n     </p>\n     <figure>\n      <img src=\"images/retry.png\" style=\"width:100%;\" alt=\"retry\">\n      <figcaption><p>\n       One variant of <code>retry</code> takes no parameters. It will continue to resubscribe to and\n       mirror the source Observable no matter how many <code>onError</code> notifications it\n       receives.\n      </p><p>\n       Another variant of <code>retry</code> takes a single parameter: a count of the number of\n       times it should try to resubscribe to the source Observable when it encounters errors. If\n       this count is exceeded, <code>retry</code> will not attempt to resubscribe again and will\n       instead pass the latest <code>onError</code> notification to its observers.\n      </p><p>\n       A third variant of <code>retry</code> takes a predicate function as a parameter. You write\n       this function to accept two arguments: an Int count of how many retries have taken place\n       thusfar, and a Throwable indicating the error that caused the <code>onError</code>\n       notification. This function returns a Boolean to indicate whether or not <code>retry</code>\n       should resubscribe to and mirror the source Observable. If it does not, then\n       <code>retry</code> passes the latest <code>onError</code> notification to its observers.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/retryWhen.f.png\" style=\"width:100%;\" alt=\"retryWhen\">\n      <figcaption><p>\n       The <code>retryWhen</code> operator is similar to <code>retry</code> but decides whether or\n       not to resubscribe to and mirror the source Observable by passing the Throwable from the\n       <code>onError</code> notification to a function that generates a second Observable, and\n       observes its result to determine what to do. If that result is an emitted item,\n       <code>retryWhen</code> resubscribes to and mirrors the source and the process repeats; if\n       that result is an <code>onError</code> notification, <code>retryWhen</code> passes this\n       notification on to its observers and terminates.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>retry retryWhen</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Retry"},{"path":"/documentation/operators/delay.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#utility\">Utility</a></li>\n  <li class=\"active\">Delay</li>\n</ol>\n\n   <h1>Delay</h1>\n   <h3>shift the emissions from an Observable forward in time by a particular amount</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"delay\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Delay</span> operator modifies its source Observable by pausing for a particular\n     increment of time (that you specify) before emitting each of the source Observable&#x2019;s items. This has\n     the effect of shifting the entire sequence of items emitted by the Observable forward in time by that\n     specified increment.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/13_TimeShiftedSequences.html#Delay\"><cite>Introduction to Rx</cite>: Delay</a></li>\n    <li><a href=\"http://rxmarbles.com/#delay\">RxMarbles: <code>delay</code></a></li>\n    <li><a href=\"http://rxmarbles.com/#delayWithSelector\">RxMarbles: <code>delayWithSelector</code></a></li>\n    <li><a href=\"http://rxwiki.wikidot.com/101samples#toc27\"><cite>101 Rx Samples</cite>: Delay &#x2014; Simple</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>delay delaySubscription</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxGroovy implements this operator as variants of <code>delay</code> and <code>delaySubscription</code>.\n     </p>\n     <figure>\n      <img src=\"images/delay.png\" style=\"width:100%;\" alt=\"delay\">\n      <figcaption><p>\n       The first variant of <code>delay</code> accepts parameters that define a duration of time (a quantity of\n       time, and a <code>TimeUnit</code> that this quantity is denominated in). Each time the source Observable\n       emits an item, <code>delay</code> starts a timer, and when that timer reaches the given duration, the\n       Observable returned from <code>delay</code> emits the same item.\n      </p><p>\n       Note that <code>delay</code> will not time-shift an <code>onError</code> notification in this fashion but\n       it will forward such a notification immediately to its subscribers while dropping any pending\n       <code>onNext</code> notifications. It will however time shift an <code>onCompleted</code> notification.\n      </p><p>\n       By default this variant of <code>delay</code> operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can choose a different Scheduler by passing it in as\n       an optional third parameter to <code>delay</code>\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delay(long,%20java.util.concurrent.TimeUnit)\"><code>delay(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delay(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>delay()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/delay.o.png\" style=\"width:100%;\" alt=\"delay\">\n      <figcaption><p>\n       Another variant of <code>delay</code> does not use a constant delay duration, but sets its delay\n       duration on a per-item basis by passing each item from the source Observable into a function that returns\n       an Observable and then monitoring those Observables. When any such Observable emits a item or completes,\n       the Observable returned by <code>delay</code> emits the associated item.\n      </p><p>\n       This variant of <code>delay</code> does not by default run on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delay(rx.functions.Func1)\"><code>delay(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/delay.oo.png\" style=\"width:100%;\" alt=\"delay\">\n      <figcaption><p>\n       The variant of <code>delay</code> that uses a per-item Observable to set the delay has a variant\n       that allows you to pass in a function that returns an Observable that acts as a delay timer for the\n       subscription to the source Observable (in the absence of this, <code>delay</code> subscribes to the\n       source Observable as soon as an observer subscribes to the Observable returned by <code>delay</code>).\n      </p><p>\n       This variant of <code>delay</code> does not by default run on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delay(rx.functions.Func0,%20rx.functions.Func1)\"><code>delay(Func0,Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/delaySubscription.png\" style=\"width:100%;\" alt=\"delaySubscription\">\n      <figcaption><p>\n       There is also an operator with which you can delay the subscription to the source Observable:\n       <code>delaySubscription</code>. It accepts parameters that define the amount of time to delay (a quantity\n       of time, and a <code>TimeUnit</code> that this quantity is denominated in).\n      </p><p>\n       This variant of <code>delay</code> by default runs on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can choose a different Scheduler by passing it in as\n       an optional third parameter to <code>delaySubscription</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delaySubscription(long,%20java.util.concurrent.TimeUnit)\"><code>delaySubscription(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delaySubscription(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>delaySubscription(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/delaySubscription.o.png\" style=\"width:100%;\" alt=\"delaySubscription\">\n      <figcaption><p>\n       And there is a variant of <code>delaySubscription</code> that uses an Observable (returned by a function\n       you supply) rather than a fixed duration in order to set the subscription delay.\n      </p><p>\n       This variant of <code>delaySubscription</code> does not by default run on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delaySubscription(rx.functions.Func0)\"><code>delaySubscription(Func0)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>delay delaySubscription</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJava implements this operator as variants of <code>delay</code> and <code>delaySubscription</code>.\n     </p>\n     <figure>\n      <img src=\"images/delay.png\" style=\"width:100%;\" alt=\"delay\">\n      <figcaption><p>\n       The first variant of <code>delay</code> accepts parameters that define a duration of time (a quantity of\n       time, and a <code>TimeUnit</code> that this quantity is denominated in). Each time the source Observable\n       emits an item, <code>delay</code> starts a timer, and when that timer reaches the given duration, the\n       Observable returned from <code>delay</code> emits the same item.\n      </p><p>\n       Note that <code>delay</code> will not time-shift an <code>onError</code> notification in this fashion but\n       it will forward such a notification immediately to its subscribers while dropping any pending\n       <code>onNext</code> notifications. It will however time shift an <code>onCompleted</code> notification.\n      </p><p>\n       By default this variant of <code>delay</code> operates on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can choose a different Scheduler by passing it in as\n       an optional third parameter to <code>delay</code>\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delay(long,%20java.util.concurrent.TimeUnit)\"><code>delay(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delay(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>delay()</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/delay.o.png\" style=\"width:100%;\" alt=\"delay\">\n      <figcaption><p>\n       Another variant of <code>delay</code> does not use a constant delay duration, but sets its delay\n       duration on a per-item basis by passing each item from the source Observable into a function that returns\n       an Observable and then monitoring those Observables. When any such Observable emits an item or completes,\n       the Observable returned by <code>delay</code> emits the associated item.\n      </p><p>\n       This variant of <code>delay</code> does not by default run on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delay(rx.functions.Func1)\"><code>delay(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/delay.oo.png\" style=\"width:100%;\" alt=\"delay\">\n      <figcaption><p>\n       The variant of <code>delay</code> that uses a per-item Observable to set the delay has a variant\n       that allows you to pass in a function that returns an Observable that acts as a delay timer for the\n       subscription to the source Observable (in the absence of this, <code>delay</code> subscribes to the\n       source Observable as soon as an observer subscribes to the Observable returned by <code>delay</code>).\n      </p><p>\n       This variant of <code>delay</code> does not by default run on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delay(rx.functions.Func0,%20rx.functions.Func1)\"><code>delay(Func0,Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/delaySubscription.png\" style=\"width:100%;\" alt=\"delaySubscription\">\n      <figcaption><p>\n       There is also an operator with which you can delay the subscription to the source Observable:\n       <code>delaySubscription</code>. It accepts parameters that define the amount of time to delay (a quantity\n       of time, and a <code>TimeUnit</code> that this quantity is denominated in).\n      </p><p>\n       This variant of <code>delay</code> by default runs on the <code>computation</code>\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, but you can choose a different Scheduler by passing it in as\n       an optional third parameter to <code>delaySubscription</code>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delaySubscription(long,%20java.util.concurrent.TimeUnit)\"><code>delaySubscription(long,TimeUnit)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delaySubscription(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>delaySubscription(long,TimeUnit,Scheduler)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/delaySubscription.o.png\" style=\"width:100%;\" alt=\"delaySubscription\">\n      <figcaption><p>\n       And there is a variant of <code>delaySubscription</code> that uses an Observable (returned by a function\n       you supply) rather than a fixed duration in order to set the subscription delay.\n      </p><p>\n       This variant of <code>delaySubscription</code> does not by default run on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#delaySubscription(rx.functions.Func0)\"><code>delaySubscription(Func0)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>delay delaySubscription</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>delay delaySubscription delayWithSelector</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/delay.png\" style=\"width:100%;\" alt=\"delay\">\n      <figcaption><p>\n       In RxJS you can set the per-item delay in two ways: by passing a number of milliseconds into the\n       <code>delay</code> operator (which will delay each emission by that amount of time), or by passing in\n       a <code>Date</code> object (which will delay the beginning of the sequence of emissions until that\n       absolute point in time).\n      </p><p>\n       This operator operates by default on the <code>timeout</code> <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>,\n       but you can override this by passing in another Scheduler as an optional second parameter.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 3)\n    .delay(new Date(Date.now() + 1000));\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x.toString()); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); }); </pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nCompleted</pre></div>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 3)\n    .delay(1000);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x.toString()); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0\nNext: 1\nNext: 2\nCompleted</pre></div></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/delaySubscription.png\" style=\"width:100%;\" alt=\"delaySubscription\">\n      <figcaption><p>\n       <code>delaySubscription</code> is similar to <code>delay</code> but rather than timeshifting the\n       emissions from the source Observable, it timeshifts the moment of subscription to that Observable.\n       You pass to this operator a time value (either a <code>Number</code>, in which case this sets the number\n       of milliseconds of delay, or a <code>Date</code>, in which case this sets an absolute future time at\n       which <code>delaySubscription</code> will trigger the subscription). You may optionally pass a\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> as a second parameter, which <code>delaySubscription</code>\n       will use to govern the delay period or trigger time.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar start = Date.now();\nvar source = Rx.Observable.range(0, 3).delaySubscription(5000);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: %s, %s&apos;, x, Date.now() - start); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0, 5001\nNext: 1, 5002\nNext: 2, 5003\nCompleted</pre></div>\n      </figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/delayWithSelector.png\" style=\"width:100%;\" alt=\"delayWithSelector\">\n      <figcaption><p>\n       <code>delayWithSelector</code> is like <code>delay</code> but does not use a constant delay duration (or\n       absolute time), but sets its delay duration on a per-item basis by passing each item from the source\n       Observable into a function that returns an Observable and then monitoring those Observables. When any\n       such Observable completes, the Observable returned by <code>delay</code> emits the associated item.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable\n    .range(0, 3)\n    .delayWithSelector(\n        function (x) {\n            return Rx.Observable.timer(x * 400);\n        })\n    .timeInterval()\n    .map(function (x) { return x.value + &apos;:&apos; + x.interval; });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0:0\nNext: 1:400\nNext: 2:400\nCompleted</pre></div></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/delayWithSelector.o.png\" style=\"width:100%;\" alt=\"delayWithSelector\">\n      <figcaption><p>\n       There is also a version of <code>delayWithSelector</code> that takes an additional (first) argument:\n       an Observable that sets a delay before <code>delayWithSelector</code> subscribes to the source\n       Observable after it itself is subscribed to.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable\n    .range(0, 3)\n    .delayWithSelector(\n        Rx.Observable.timer(300),\n        function (x) {\n            return Rx.Observable.timer(x * 400);\n        }\n    )\n    .timeInterval()\n    .map(function (x) { return x.value + &apos;:&apos; + x.interval; });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 0:300\nNext: 1:400\nNext: 2:400\nCompleted</pre></div></figcaption>\n     </figure>\n     <p>\n      <code>delay</code>, <code>delaySubscription</code>, and <code>delayWithSelector</code> require\n      <code>rx.lite.js</code> or <code>rx.lite.compat.js</code> and are found in each of the following\n      distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.time.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>delay delaySubscription</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Delay DelaySubscription</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>delay</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>delay</code>.\n    </p>\n    <p>\n    Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/delay/delay.php\n\n$loop = new \\React\\EventLoop\\StreamSelectLoop();\n\n$scheduler  = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n\\Rx\\Observable::interval(1000, $scheduler)\n    -&gt;doOnNext(function ($x) {\n        echo &quot;Side effect: &quot; . $x . &quot;\\n&quot;;\n    })\n    -&gt;delay(500)\n    -&gt;take(5)\n    -&gt;subscribe($createStdoutObserver(), $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nSide effect: 0\nNext value: 0\nSide effect: 1\nNext value: 1\nSide effect: 2\nNext value: 2\nSide effect: 3\nNext value: 3\nSide effect: 4\nNext value: 4\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>delay delay_subscription delay_with_selector</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>delay delaySubscription</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>delaySubscription</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Delay"},{"path":"/documentation/operators/all.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#conditional\">Conditional and Boolean</a></li>\n  <li class=\"active\">All</li>\n</ol>\n\n   <h1>All</h1>\n   <h3>determine whether all items emitted by an Observable meet some criteria</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"every\"></rx-marbles>\n    <figcaption><p>\n    Pass a predicate function to the <span class=\"operator\">All</span> operator that accepts an item\n    emitted by the source Observable and returns a boolean value based on an evaluation of that\n    item. <span class=\"operator\">All</span> returns an Observable that emits a single boolean value:\n    <code>true</code> if and only if the source Observable terminates normally and every item\n    emitted by the source Observable evaluated as <code>true</code> according to this predicate;\n    <code>false</code> if any item emitted by the source Observable evaluates as <code>false</code>\n    according to this predicate.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/06_Inspection.html#All\"><cite>Introduction to Rx</cite>: All</a></li>\n    <li><a href=\"http://rxmarbles.com/#every\">RxMarbles: <code>every</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>every</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>all</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/all.png\" style=\"width:100%;\" alt=\"all\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>all</code>. It does not by default operate on any\n       particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>. The following example shows how to use this\n       operator:\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\nnumbers = Observable.from([1, 2, 3, 4, 5]);\n\nprintln(&quot;all even?&quot; )\nnumbers.all({ 0 == (it % 2) }).subscribe({ println(it); });\n\nprintln(&quot;all positive?&quot;);\nnumbers.all({ 0 &lt; it }).subscribe({ println(it); });</pre></div>\n      <div class=\"output\"><pre>\nall even? \nfalse\nall positive? \ntrue</pre></div>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#all(rx.functions.Func1)\"><code>all(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>all</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/all.png\" style=\"width:100%;\" alt=\"all\">\n      <figcaption><p>\n       RxJava 1.x implements this operator as <code>all</code>. It does not by default operate on any\n       particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#all(rx.functions.Func1)\"><code>all(Func1)</code></a></li>\n      </ul></p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>all</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/all.png\" style=\"width:100%;\" alt=\"all\">\n      <figcaption><p>\n       RxJava 2.x implements this operator as <code>all</code>. It does not by default operate on any\n       particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html#all(io.reactivex.functions.Predicate)\"><code>all(Predicate)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>every jortSort jortSortUntil</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/every.png\" style=\"width:100%;\" alt=\"every\">\n      <figcaption><p>\n       RxJS implements this operator as <code>every</code>. The following example shows how to use\n       this operator:\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.of(1,2,3,4,5)\n  .every(function (x) {\n    return x &lt; 6;\n  });\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (err) { console.log(&apos;Error: %s&apos;, err); },\n  function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: true\nCompleted</pre></div>\n      <p>\n       <code>every</code> is found in the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.aggregates.js</code></li>\n      </ul>\n      <p>\n       It requires one of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <p>\n      There is also a <code>jortSort</code> operator that performs a test on the entire sequence of items\n      emitted by the source Observable. If those items are emitted in sorted order, upon the successful\n      completion of the source Observable, the Observable returned from <code>jortSort</code> will emit\n      <code>true</code> and then complete. If any of the items emitted by the source Observable is out of sort\n      order, upon the successful completion of the source Observable, the Observable returned from\n      <code>jortSort</code> will emit <code>false</code> and then complete.\n     </p><p>\n      There is also a <code>jortSortUntil</code> operator. It does not wait until the source Observable\n      completes to evaluate its sequence for sortedness, as <code>jortSort</code> does, but waits until a\n      second Observable emits an item to do so.\n     </p>\n     <h4>See also</h4>\n     <ul>\n      <li><a href=\"http://jort.technology\">jort.technology</a></li>\n     </ul>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.of(1,2,3,4) // already sorted\n               .jortSort();\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (e) { console.log(&apos;Error: %s&apos;, e); },\n  function ( ) { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: true\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.of(3,1,2,4) // not sorted\n               .jortSort();\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (e) { console.log(&apos;Error: %s&apos;, e); },\n  function ( ) { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: false\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\nvar just = Rx.helpers.just;\n\nvar source = Rx.Observable.of(1,2,3,4) // already sorted\n               .flatmap(function (x) {\n                 return Rx.Observable.timer(1000).map(just(x));\n               }).jortSortUntil(Rx.Observable.timer(3000);\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (e) { console.log(&apos;Error: %s&apos;, e); },\n  function ( ) { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: true\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\nvar just = Rx.helpers.just;\n\nvar source = Rx.Observable.of(3,1,2,4) // not sorted\n               .flatmap(function (x) {\n                 return Rx.Observable.timer(1000).map(just(x));\n               }).jortSortUntil(Rx.Observable.timer(3000);\n\nvar subscription = source.subscribe(\n  function (x) { console.log(&apos;Next: %s&apos;, x); },\n  function (e) { console.log(&apos;Error: %s&apos;, e); },\n  function ( ) { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: false\nCompleted</pre></div>\n     <p>\n      <code>jortSort</code> and <code>jortSortUntil</code> are found in the following distribution:\n     </p>\n     <ul>\n      <li><code>rx.sorting.js</code></li>\n     </ul>\n     <p>\n      They require one of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>all</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>All</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>all every</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>all?</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>forall</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"All"},{"path":"/documentation/operators/materialize-dematerialize.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#utility\">Utility</a></li>\n  <li class=\"active\">Materialize/Dematerialize</li>\n</ol>\n\n<h1>Materialize/Dematerialize</h1>\n<h3>represent both the items emitted and the notifications sent as emitted items, or reverse this process</h3>\n\n<figure>\n <img src=\"images/materialize.c.png\" style=\"width:100%;\" alt=\"Materialize\">\n <figcaption><p>\n A well-formed, finite Observable will invoke its observer&#x2019;s <code>onNext</code> method zero or more times, and\n then will invoke either the <code>onCompleted</code> or <code>onError</code> method exactly once. The\n <span class=\"operator\">Materialize</span> operator converts this series of invocations &#x2014; both the\n original <code>onNext</code> notifications and the terminal <code>onCompleted</code> or <code>onError</code>\n notification &#x2014; into a series of <em>items</em> emitted by an Observable.\n </p></figcaption>\n</figure>\n<figure>\n <img src=\"images/dematerialize.c.png\" style=\"width:100%;\" alt=\"Dematerialize\">\n <figcaption><p>\n The <span class=\"operator\">Dematerialize</span> operator reverses this process. It operates on an Observable\n that has previously been transformed by <span class=\"operator\">Materialize</span> and returns it to its\n original form.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/08_Transformation.html#MaterializeAndDematerialize\"><cite>Introduction to Rx</cite>: Materialize and Dematerialize</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>dematerialize materialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/materialize.png\" style=\"width:100%;\" alt=\"materialize\">\n     <figcaption><p>\n      In RxGroovy, <code>materialize</code> transforms the notifications from the source Observable into\n      <code>Notification</code> objects and emits them as the emissions from the Observable it returns. For\n      example:\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\nnumbers = Observable.from([1, 2, 3]);\n\nnumbers.materialize().subscribe(\n  { if(rx.Notification.Kind.OnNext == it.kind) { println(&quot;Next: &quot; + it.value); }\n    else if(rx.Notification.Kind.OnCompleted == it.kind) { println(&quot;Completed&quot;); }\n    else if(rx.Notification.Kind.OnError == it.kind) { println(&quot;Error: &quot; + it.exception); } },\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 3\nCompleted\nSequence complete</pre></div>\n     <p>\n      <code>materialize</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#materialize()\"><code>materialize()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/dematerialize.png\" style=\"width:100%;\" alt=\"dematerialize\">\n     <figcaption><p>\n      <code>dematerialize</code> reverses this process: converting the emitted <code>Notification</code>\n      objects from the source Observable into notifications from the resulting Observable.\n      The following example dematerializes the materialized Observable from the previous section:\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\nnumbers = Observable.from([1, 2, 3]);\n\nnumbers.materialize().dematerialize().subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n1\n2\n3\nSequence complete</pre></div>\n     <p>\n      <code>dematerialize</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#dematerialize()\"><code>dematerialize()</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>dematerialize materialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/materialize.png\" style=\"width:100%;\" alt=\"materialize\">\n     <figcaption><p>\n      In RxJava, <code>materialize</code> transforms the notifications from the source Observable into\n      <code>Notification</code> objects and emits them as the emissions from the Observable it returns.\n     </p>\n     <p>\n      <code>materialize</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#materialize()\"><code>materialize()</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/dematerialize.png\" style=\"width:100%;\" alt=\"dematerialize\">\n     <figcaption><p>\n      <code>dematerialize</code> reverses this process: converting the emitted <code>Notification</code>\n      objects from the source Observable into notifications from the resulting Observable.\n     </p>\n     <p>\n      <code>dematerialize</code> does not by default operate on any particular\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#dematerialize()\"><code>dematerialize()</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>dematerialize materialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>dematerialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/dematerialize.png\" style=\"width:100%;\" alt=\"dematerialize\">\n     <figcaption><p>\n      RxJS only implements the <code>dematerialize</code> operator. If you want a &#x201C;materialized&#x201D;\n      Observable, you have to assemble it by hand by manually creating and emitting the\n      <code>Notification</code> objects that represent Observable notification calls.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable\n    .fromArray([\n        Rx.Notification.createOnNext(42),\n        Rx.Notification.createOnError(new Error(&apos;woops&apos;))\n    ])\n    .dematerialize();\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x.toString()); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n     <div class=\"output\"><pre>\nNext: 42\nError: Error: woops</pre></div>\n     <p>\n      <code>dematerialize</code> is found in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>dematerialize materialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>dematerialize materialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>materialize dematerialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>materialize</code>.\n    </p>\n    <p>\n    Materializes the implicit notifications of an observable sequence as explicit notifications.\n    </p>\n\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>dematerialize</code>.\n    </p>\n    <p>\n    Dematerializes the explicit notification values of an observable sequence as implicit notifications.\n    </p>\n\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>dematerialize materialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>dematerialize materialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Materialize/Dematerialize"},{"path":"/documentation/operators/serialize.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#utility\">Utility</a></li>\n  <li class=\"active\">Serialize</li>\n</ol>\n\n<h1>Serialize</h1>\n<h3>force an Observable to make serialized calls and to be well-behaved</h3>\n\n<figure>\n <img src=\"images/serialize.c.png\" style=\"width:100%;\" alt=\"Serialize\">\n <figcaption><p>\n  It is possible for an Observable to invoke its observers&#x2019; methods asynchronously, perhaps from\n  different threads. This could make such an Observable violate <a href=\"http://reactivex.io/documentation/operators/../contract.html\">the Observable\n  contract</a>, in that it might try to send an <code>OnCompleted</code> or <code>OnError</code> notification\n  before one of its <code>OnNext</code> notifications, or it might make an <code>OnNext</code> notification\n  from two different threads concurrently. You can force such an Observable to be well-behaved and synchronous\n  by applying the <span class=\"operator\">Serialize</span> operator to it.\n </p></figcaption>\n</figure>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>serialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>serialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/synchronize.png\" style=\"width:100%;\" alt=\"serialize\">\n     <figcaption><p>\n      RxGroovy implements this operator as <code>serialize</code>. It does not by default operate on any\n      particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#serialize()\"><code>serialize()</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>serialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/synchronize.png\" style=\"width:100%;\" alt=\"serialize\">\n     <figcaption><p>\n      RxJava implements this operator as <code>serialize</code>. It does not by default operate on any\n      particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#serialize()\"><code>serialize()</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>serialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>serialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Synchronize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>sychronize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>serialize</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Serialize"},{"path":"/documentation/operators/buffer.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#transforming\">Transforming</a></li>\n  <li class=\"active\">Buffer</li>\n</ol>\n\n<h1>Buffer</h1>\n<h3>periodically gather items emitted by an Observable into bundles and emit these bundles rather than emitting the items one at a time</h3>\n\n<figure>\n <img src=\"images/Buffer.png\" style=\"width:100%;\" alt=\"Buffer\">\n <figcaption><p>\n  The <span class=\"operator\">Buffer</span> operator transforms an Observable that emits items into\n  an Observable that emits buffered collections of those items. There are a number of variants in\n  the various language-specific implementations of <span class=\"operator\">Buffer</span> that\n  differ in how they choose which items go in which buffers.\n </p><p>\n  Note that if the source Observable issues an <code>onError</code> notification,\n  <span class=\"operator\">Buffer</span> will pass on this notification immediately without first\n  emitting the buffer it is in the process of assembling, even if that buffer contains items that\n  were emitted by the source Observable before it issued the error notification.\n </p></figcaption>\n</figure>\n<p>\n  The <a href=\"http://reactivex.io/documentation/operators/window.html\"><span class=\"operator\">Window</span></a> operator is similar to\n  <span class=\"operator\">Buffer</span> but collects items into separate Observables rather than\n  into data structures before reemitting them.\n</p>\n\n<h4>See Also</h4>\n<ul>\n  <li><a href=\"http://reactivex.io/documentation/operators/window.html\"><span class=\"operator\">Window</span></a></li>\n  <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/13_TimeShiftedSequences.html#Buffer\"><cite>Introduction to Rx</cite>: Buffer</a></li>\n  <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/17_SequencesOfCoincidence.html#BufferRevisted\"><cite>Introduction to Rx</cite>: Buffer revisited</a></li>\n  <li><a href=\"http://rxwiki.wikidot.com/101samples#toc26\"><cite>101 Rx Samples</cite>: Buffer &#x2014; Simple</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>buffer pairwise</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n    RxCpp implements two variants of <span class=\"operator\">Buffer</span>:\n    </p>\n    <h4><code>buffer(count)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer3.png\" style=\"width:100%;\" alt=\"buffer(count)\">\n    <figcaption>\n     <p><code>buffer(count)</code> emits non-overlapping buffers in the form of\n        <code>vector</code>s, each of which contains at most <code>count</code> items from the\n        source Observable (the final emitted <code>vector</code> may have fewer than\n        <code>count</code> items).</p>\n    </figcaption>\n    </figure>\n    <h4><code>buffer(count, skip)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer4.png\" style=\"width:100%;\" alt=\"buffer(count,skip)\">\n    <figcaption>\n     <p><code>buffer(count,&#x202F;skip)</code> creates a new buffer starting with the first\n        emitted item from the source Observable, and every <code>skip</code> items thereafter, and\n        fills each buffer with <code>count</code> items: the initial item and <code>count-1</code>\n        subsequent ones. It emits these buffers as <code>vector</code>s. Depending on the values\n        of <code>count</code> and <code>skip</code> these buffers may overlap (multiple buffers\n        may contain the same item), or they may have gaps (where items emitted by the source\n        Observable are not represented in any buffer).</p>\n    </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>buffer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <p>\n    In RxGroovy there are several variants of <span class=\"operator\">Buffer</span>:\n    </p>\n    <h4><code>buffer(count)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer3.png\" style=\"width:100%;\" alt=\"buffer(count)\">\n    <figcaption>\n     <p><code>buffer(count)</code> emits non-overlapping buffers in the form of\n        <code>List</code>s, each of which contains at most <code>count</code> items from the\n        source Observable (the final emitted <code>List</code> may have fewer than\n        <code>count</code> items).</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(int)\"><code>buffer(int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(count, skip)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer4.png\" style=\"width:100%;\" alt=\"buffer(count,skip)\">\n    <figcaption>\n     <p><code>buffer(count,&#x202F;skip)</code> creates a new buffer starting with the first\n        emitted item from the source Observable, and every <code>skip</code> items thereafter, and\n        fills each buffer with <code>count</code> items: the initial item and <code>count-1</code>\n        subsequent ones. It emits these buffers as <code>List</code>s. Depending on the values of\n        <code>count</code> and <code>skip</code> these buffers may overlap (multiple buffers may\n        contain the same item), or they may have gaps (where items emitted by the source\n        Observable are not represented in any buffer).</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(int,%20int)\"><code>buffer(int,int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(bufferClosingSelector)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer1.png\" style=\"width:100%;\" alt=\"buffer(bufferClosingSelector)\">\n    <figcaption>\n     <p>When it subscribes to the source Observable, <code>buffer(bufferClosingSelector)</code>\n        begins to collect its emissions into a <code>List</code>, and it also calls\n        <code>bufferClosingSelector</code> to generate a second Observable. When this second\n        Observable emits an <code>TClosing</code> object, <code>buffer</code> emits the current\n        <code>List</code> and repeats this process: beginning a new <code>List</code> and calling\n        <code>bufferClosingSelector</code> to create a new Observable to monitor. It will do this\n        until the source Observable terminates.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(rx.functions.Func0)\"><code>buffer(Func0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(boundary</code>[<code>, initialCapacity</code>]<code>)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer8.png\" style=\"width:100%;\" alt=\"buffer(boundary)\">\n    <figcaption>\n     <p><code>buffer(boundary)</code> monitors an Observable, <code>boundary</code>. Each time\n        that Observable emits an item, it creates a new <code>List</code> to begin collecting\n        items emitted by the source Observable and emits the previous <code>List</code>.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(rx.Observable)\"><code>buffer(Observable)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(rx.Observable,%20int)\"><code>buffer(Observable,int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(bufferOpenings, bufferClosingSelector)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer2.png\" style=\"width:100%;\" alt=\"buffer(bufferOpenings,bufferClosingSelector)\">\n    <figcaption>\n     <p><code>buffer(bufferOpenings,&#x202F;bufferClosingSelector)</code> monitors an Observable,\n        <code>bufferOpenings</code>, that emits <code>BufferOpening</code> objects. Each time it\n        observes such an emitted item, it creates a new <code>List</code> to begin collecting\n        items emitted by the source Observable and it passes the <code>bufferOpenings</code>\n        Observable into the <code>closingSelector</code> function. That function returns an\n        Observable. <code>buffer</code> monitors that Observable and when it detects an emitted\n        item from it, it closes the <code>List</code> and emits it as its own emission.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(rx.Observable,%20rx.functions.Func1)\"><code>buffer(Observable,Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(timespan, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer5.png\" style=\"width:100%;\" alt=\"buffer(timespan,unit)\">\n    <figcaption>\n     <p><code>buffer(timespan,&#x202F;unit)</code> emits a new <code>List</code> of items\n        periodically, every <code>timespan</code> amount of time, containing all items emitted by\n        the source Observable since the previous bundle emission or, in the case of the first\n        bundle, since the subscription to the source Observable. There is also a version of this\n        variant of the operator that takes a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a\n        parameter and uses it to govern the timespan; by default this variant uses the <code>computation</code>\n        Scheduler.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20java.util.concurrent.TimeUnit)\"><code>buffer(long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>buffer(long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(timespan, unit, count</code>[<code>, scheduler</code>]<code>)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer6.png\" style=\"width:100%;\" alt=\"buffer(timespan,unit,count)\">\n    <figcaption>\n     <p><code>buffer(timespan,&#x202F;unit,&#x202F;count)</code> emits a new <code>List</code> of\n        items for every <code>count</code> items emitted by the source Observable, or, if\n        <code>timespan</code> has elapsed since its last bundle emission, it emits a bundle of\n        however many items the source Observable has emitted in that span, even if this is fewer\n        than <code>count</code>. There is also a version of this variant of the operator that\n        takes a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a parameter and uses it to govern the\n        timespan; by default this variant uses the <code>computation</code> scheduler.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20java.util.concurrent.TimeUnit,%20int)\"><code>buffer(long,TimeUnit,int)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20java.util.concurrent.TimeUnit,%20int,%20rx.Scheduler)\"><code>buffer(long,TimeUnit,int,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(timespan, timeshift, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer7.png\" style=\"width:100%;\" alt=\"buffer(timespan,timeshift,unit)\">\n    <figcaption>\n     <p><code>buffer(timespan,&#x202F;timeshift,&#x202F;unit)</code> creates a new <code>List</code>\n        of items every <code>timeshift</code> period of time, and fills this bundle with every\n        item emitted by the source Observable from that time until <code>timespan</code> time has\n        passed since the bundle&#x2019;s creation, before emitting this <code>List</code> as its\n        own emission. If <code>timespan</code> is longer than <code>timeshift</code>, the emitted\n        bundles will represent time periods that overlap and so they may contain duplicate items.\n        There is also a version of this variant of the operator that takes a\n        <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a parameter and uses it to govern the\n        timespan; by default this variant uses the <code>computation</code> scheduler.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20long,%20java.util.concurrent.TimeUnit)\"><code>buffer(long,long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>buffer(long,long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <p>\n     You can use the <span class=\"operator\">Buffer</span> operator to implement backpressure (that\n     is, to cope with an Observable that may produce items too quickly for its observer to consume).\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/bp.buffer2.png\" style=\"width:100%;\" alt=\"Buffer as a backpressure strategy\">\n     <figcaption><p>\n      Buffer can reduce a sequence of many items to a sequence of fewer buffers-of-items, making\n      them more manageable. You could, for example, close and emit a buffer of items from a bursty\n      Observable periodically, at a regular interval of time.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\nObservable&lt;List&lt;Integer&gt;&gt; burstyBuffered = bursty.buffer(500, TimeUnit.MILLISECONDS);</pre></div>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/bp.buffer1.png\" style=\"width:100%;\" alt=\"Buffer as a backpressure strategy\">\n     <figcaption><p>\n      Or you could get fancy, and collect items in buffers during the bursty periods and emit them\n      at the end of each burst, by using the\n      <a href=\"http://reactivex.io/documentation/operators/debounce.html\"><span class=\"operator\">Debounce</span></a> operator\n      to emit a buffer closing indicator to the buffer operator.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\n// we have to multicast the original bursty Observable so we can use it\n// both as our source and as the source for our buffer closing selector:\nObservable&lt;Integer&gt; burstyMulticast = bursty.publish().refCount();\n// burstyDebounced will be our buffer closing selector:\nObservable&lt;Integer&gt; burstyDebounced = burstyMulticast.debounce(10, TimeUnit.MILLISECONDS);\n// and this, finally, is the Observable of buffers we&apos;re interested in:\nObservable&lt;List&lt;Integer&gt;&gt; burstyBuffered = burstyMulticast.buffer(burstyDebounced);</pre></div>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>buffer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n    In RxJava there are several variants of <span class=\"operator\">Buffer</span>:\n    </p>\n    <h4><code>buffer(count)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer3.png\" style=\"width:100%;\" alt=\"buffer(count)\">\n    <figcaption>\n     <p><code>buffer(count)</code> emits non-overlapping buffers in the form of\n        <code>List</code>s, each of which contains at most <code>count</code> items from the\n        source Observable (the final emitted <code>List</code> may have fewer than\n        <code>count</code> items).</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(int)\"><code>buffer(int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(count, skip)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer4.png\" style=\"width:100%;\" alt=\"buffer(count,skip)\">\n    <figcaption>\n     <p><code>buffer(count,&#x202F;skip)</code> creates a new buffer starting with the first\n        emitted item from the source Observable, and every <code>skip</code> items thereafter, and\n        fills each buffer with <code>count</code> items: the initial item and <code>count-1</code>\n        subsequent ones. It emits these buffers as <code>List</code>s. Depending on the values of\n        <code>count</code> and <code>skip</code> these buffers may overlap (multiple buffers may\n        contain the same item), or they may have gaps (where items emitted by the source\n        Observable are not represented in any buffer).</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(int,%20int)\"><code>buffer(int,int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(bufferClosingSelector)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer1.png\" style=\"width:100%;\" alt=\"buffer(bufferClosingSelector)\">\n    <figcaption>\n     <p>When it subscribes to the source Observable, <code>buffer(bufferClosingSelector)</code>\n        begins to collect its emissions into a <code>List</code>, and it also calls\n        <code>bufferClosingSelector</code> to generate a second Observable. When this second\n        Observable emits an <code>TClosing</code> object, <code>buffer</code> emits the current\n        <code>List</code> and repeats this process: beginning a new <code>List</code> and calling\n        <code>bufferClosingSelector</code> to create a new Observable to monitor. It will do this\n        until the source Observable terminates.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(rx.functions.Func0)\"><code>buffer(Func0)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(boundary)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer8.png\" style=\"width:100%;\" alt=\"buffer(boundary)\">\n    <figcaption>\n     <p><code>buffer(boundary)</code> monitors an Observable, <code>boundary</code>. Each time\n        that Observable emits an item, it creates a new <code>List</code> to begin collecting\n        items emitted by the source Observable and emits the previous <code>List</code>.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(rx.Observable)\"><code>buffer(Observable)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(rx.Observable,%20int)\"><code>buffer(Observable,int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(bufferOpenings, bufferClosingSelector)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer2.png\" style=\"width:100%;\" alt=\"buffer(bufferOpenings,bufferClosingSelector)\">\n    <figcaption>\n     <p><code>buffer(bufferOpenings,&#x202F;bufferClosingSelector)</code> monitors an Observable,\n        <code>bufferOpenings</code>, that emits <code>BufferOpening</code> objects. Each time it\n        observes such an emitted item, it creates a new <code>List</code> to begin collecting\n        items emitted by the source Observable and it passes the <code>bufferOpenings</code>\n        Observable into the <code>closingSelector</code> function. That function returns an\n        Observable. <code>buffer</code> monitors that Observable and when it detects an emitted\n        item from it, it closes the <code>List</code> and emits it as its own emission.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(rx.Observable,%20rx.functions.Func1)\"><code>buffer(Observable,Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(timespan, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer5.png\" style=\"width:100%;\" alt=\"buffer(timespan,unit)\">\n    <figcaption>\n     <p><code>buffer(timespan,&#x202F;unit)</code> emits a new <code>List</code> of items\n        periodically, every <code>timespan</code> amount of time, containing all items emitted by\n        the source Observable since the previous bundle emission or, in the case of the first\n        bundle, since the subscription to the source Observable. There is also a version of this\n        variant of the operator that takes a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a\n        parameter and uses it to govern the timespan; by default this variant uses the <code>computation</code>\n        scheduler.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20java.util.concurrent.TimeUnit)\"><code>buffer(long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>buffer(long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(timespan, unit, count</code>[<code>, scheduler</code>]<code>)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer6.png\" style=\"width:100%;\" alt=\"buffer(timespan,unit,count)\">\n    <figcaption>\n     <p><code>buffer(timespan,&#x202F;unit,&#x202F;count)</code> emits a new <code>List</code> of\n        items for every <code>count</code> items emitted by the source Observable, or, if\n        <code>timespan</code> has elapsed since its last bundle emission, it emits a bundle of\n        however many items the source Observable has emitted in that span, even if this is fewer\n        than <code>count</code>. There is also a version of this variant of the operator that\n        takes a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a parameter and uses it to govern the\n        timespan; by default this variant uses the <code>computation</code> scheduler.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20java.util.concurrent.TimeUnit,%20int)\"><code>buffer(long,TimeUnit,int)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20java.util.concurrent.TimeUnit,%20int,%20rx.Scheduler)\"><code>buffer(long,TimeUnit,int,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <h4><code>buffer(timespan, timeshift, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n    <figure class=\"variant\">\n    <img src=\"images/buffer7.png\" style=\"width:100%;\" alt=\"buffer(timespan,timeshift,unit)\">\n    <figcaption>\n     <p><code>buffer(timespan,&#x202F;timeshift,&#x202F;unit)</code> creates a new <code>List</code>\n        of items every <code>timeshift</code> period of time, and fills this bundle with every\n        item emitted by the source Observable from that time until <code>timespan</code> time has\n        passed since the bundle&#x2019;s creation, before emitting this <code>List</code> as its\n        own emission. If <code>timespan</code> is longer than <code>timeshift</code>, the emitted\n        bundles will represent time periods that overlap and so they may contain duplicate items.\n        There is also a version of this variant of the operator that takes a\n        <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a parameter and uses it to govern the\n        timespan; by default this variant uses the <code>computation</code> scheduler.</p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20long,%20java.util.concurrent.TimeUnit)\"><code>buffer(long,long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#buffer(long,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>buffer(long,long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <p>\n     You can use the <span class=\"operator\">Buffer</span> operator to implement backpressure (that\n     is, to cope with an Observable that may produce items too quickly for its observer to consume).\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/bp.buffer2.png\" style=\"width:100%;\" alt=\"Buffer as a backpressure strategy\">\n     <figcaption><p>\n      Buffer can reduce a sequence of many items to a sequence of fewer buffers-of-items, making\n      them more manageable. You could, for example, close and emit a buffer of items from a bursty\n      Observable periodically, at a regular interval of time.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\nObservable&lt;List&lt;Integer&gt;&gt; burstyBuffered = bursty.buffer(500, TimeUnit.MILLISECONDS);</pre></div>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/bp.buffer1.png\" style=\"width:100%;\" alt=\"Buffer as a backpressure strategy\">\n     <figcaption><p>\n      Or you could get fancy, and collect items in buffers during the bursty periods and emit them\n      at the end of each burst, by using the\n      <a href=\"http://reactivex.io/documentation/operators/debounce.html\"><span class=\"operator\">Debounce</span></a> operator\n      to emit a buffer closing indicator to the buffer operator.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code java\"><pre>\n// we have to multicast the original bursty Observable so we can use it\n// both as our source and as the source for our buffer closing selector:\nObservable&lt;Integer&gt; burstyMulticast = bursty.publish().refCount();\n// burstyDebounced will be our buffer closing selector:\nObservable&lt;Integer&gt; burstyDebounced = burstyMulticast.debounce(10, TimeUnit.MILLISECONDS);\n// and this, finally, is the Observable of buffers we&apos;re interested in:\nObservable&lt;List&lt;Integer&gt;&gt; burstyBuffered = burstyMulticast.buffer(burstyDebounced);</pre></div>\n     </figcaption>\n    </figure>\n    <h4>See Also</h4>\n    <ul>\n     <li><a href=\"http://blog.kaush.co/2015/01/05/debouncedbuffer-with-rxjava/\"><cite>DebouncedBuffer With RxJava</cite> by Gopal Kaushik</a></li>\n     <li><a href=\"https://gist.github.com/benjchristensen/e4524a308456f3c21c0b#file-debouncebufferpublish-java\"><cite>DebounceBuffer: Use publish(), debounce() and buffer() together to capture bursts of events.</cite> by Ben Christensen</a></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>buffer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n      <span style=\"color:#ff0000\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>buffer bufferWithCount bufferWithTime bufferWithTimeOrCount</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n   <p>\n    RxJS has four <span class=\"operator\">Buffer</span> operators &#x2014; <code>buffer</code>,\n    <code>bufferWithCount</code>, <code>bufferWithTime</code>, and\n    <code>bufferWithTimeOrCount</code> &#x2014; each of which has variants that have different\n    ways of governing which source Observable items are emitted as part of which buffers.\n   </p>\n   <h4><code>buffer(bufferBoundaries)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer8.png\" style=\"width:100%;\" alt=\"buffer(bufferBoundaries)\">\n    <figcaption>\n     <p><code>buffer(bufferBoundaries)</code> monitors an Observable,\n        <code>bufferBoundaries</code>. Each time that Observable emits an item, it creates a new\n        collection to begin collecting items emitted by the source Observable and emits the\n        previous collection.</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer(bufferClosingSelector)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer1.png\" style=\"width:100%;\" alt=\"buffer(bufferClosingSelector)\">\n    <figcaption>\n     <p>When it subscribes to the source Observable, <code>buffer(bufferClosingSelector)</code>\n        begins to collect its emissions into a collection, and it also calls\n        <code>bufferClosingSelector</code> to generate a second Observable. When this second\n        Observable emits an item, <code>buffer</code> emits the current collection and repeats\n        this process: beginning a new collection and calling <code>bufferClosingSelector</code>\n        to create a new Observable to monitor. It will do this until the source Observable\n        terminates.</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer(bufferOpenings,bufferClosingSelector)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer2.png\" style=\"width:100%;\" alt=\"buffer(bufferOpenings,bufferClosingSelector)\">\n    <figcaption>\n     <p><code>buffer(bufferOpenings,&#x202F;bufferClosingSelector)</code> monitors an Observable,\n        <code>bufferOpenings</code>, that emits <code>BufferOpening</code> objects. Each time it\n        observes such an emitted item, it creates a new collection to begin collecting items\n        emitted by the source Observable and it passes the <code>bufferOpenings</code>\n        Observable into the <code>bufferClosingSelector</code> function. That function returns an\n        Observable. <code>buffer</code> monitors that Observable and when it detects an emitted\n        item from it, it emits the current collection and begins a new one.</p>\n    </figcaption>\n   </figure>\n   <p>\n    <code>buffer</code> is found in each of the following distributions:\n   </p>\n   <ul>\n    <li><code>rx.all.js</code></li>\n    <li><code>rx.all.compat.js</code></li>\n    <li><code>rx.coincidence.js</code></li>\n   </ul>\n   <p>\n    <code>buffer</code> requires one of the following distributions:\n   </p>\n   <ul>\n    <li><code>rx.js</code></li>\n    <li><code>rx.compat.js</code></li>\n    <li><code>rx.lite.js</code></li>\n    <li><code>rx.lite.compat.js</code></li>\n   </ul>\n   <h4><code>bufferWithCount(count)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/bufferWithCount3.png\" style=\"width:100%;\" alt=\"bufferWithCount(count)\">\n    <figcaption>\n     <p><code>bufferWithCount(count)</code> emits non-overlapping buffers, each of which contains\n        at most <code>count</code> items from the source Observable (the final emitted buffer may\n        contain fewer than <code>count</code> items).</p>\n    </figcaption>\n   </figure>\n   <h4><code>bufferWithCount(count, skip)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/bufferWithCount4.png\" style=\"width:100%;\" alt=\"bufferWithCount(count,skip)\">\n    <figcaption>\n     <p><code>bufferWithCount(count,&#x202F;skip)</code> creates a new buffer starting with the\n        first emitted item from the source Observable, and a new one for every <code>skip</code>\n        items thereafter, and fills each buffer with <code>count</code> items: the initial item\n        and <code>count-1</code> subsequent ones, emitting each buffer when it is complete.\n        Depending on the values of <code>count</code> and <code>skip</code> these buffers may\n        overlap (multiple buffers may contain the same item), or they may have gaps (where items\n        emitted by the source Observable are not represented in any buffer).</p>\n    </figcaption>\n   </figure>\n   <p>\n    <code>bufferWithCount</code> is found in each of the following distributions:\n   </p>\n   <ul>\n    <li><code>rx.js</code></li>\n    <li><code>rx.compat.js</code></li>\n    <li><code>rx.all.js</code></li>\n    <li><code>rx.all.compat.js</code></li>\n    <li><code>rx.lite.extras.js</code></li>\n   </ul>\n   <h4><code>bufferWithTime(timeSpan)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/bufferWithTime5.png\" style=\"width:100%;\" alt=\"bufferWithTime(timeSpan)\">\n    <figcaption>\n     <p><code>bufferWithTime(timeSpan)</code> emits a new collection of items periodically, every\n        <code>timeSpan</code> milliseconds, containing all items emitted by the source Observable\n        since the previous bundle emission or, in the case of the first bundle, since the\n        subscription to the source Observable. There is also a version of this variant of the\n        operator that takes a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a parameter and uses it\n        to govern the timespan; by default this variant uses the <code>timeout</code> scheduler.</p>\n    </figcaption>\n   </figure>\n   <h4><code>bufferWithTime(timeSpan, timeShift)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/bufferWithTime7.png\" style=\"width:100%;\" alt=\"bufferWithTime(timeSpan,timeShift)\">\n    <figcaption>\n     <p><code>bufferWithTime(timeSpan,&#x202F;timeShift)</code> creates a new collection of items\n        every <code>timeShift</code> milliseconds, and fills this bundle with every item emitted\n        by the source Observable from that time until <code>timeSpan</code> milliseconds has\n        passed since the collection&#x2019;s creation, before emitting this collection as its own\n        emission. If <code>timeSpan</code> is longer than <code>timeShift</code>, the emitted\n        bundles will represent time periods that overlap and so they may contain duplicate items.\n        There is also a version of this variant of the operator that takes a\n        <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a parameter and uses it to govern the\n        timespan; by default this variant uses the <code>timeout</code> scheduler.</p>\n    </figcaption>\n   </figure>\n   <h4><code>bufferWithTimeOrCount(timeSpan, count)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/bufferWithTimeOrCount6.png\" style=\"width:100%;\" alt=\"bufferWithTimeOrCount(timeSpan,count)\">\n    <figcaption>\n     <p><code>bufferWithTimeOrCount(timeSpan,&#x202F;count)</code> emits a new collection of items\n        for every <code>count</code> items emitted by the source Observable, or, if\n        <code>timeSpan</code> milliseconds have elapsed since its last collection emission, it\n        emits a collection of however many items the source Observable has emitted in that span,\n        even if this is fewer than <code>count</code>. There is also a version of this variant of\n        the operator that takes a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a parameter and uses\n        it to govern the timespan; by default this variant uses the <code>timeout</code> scheduler.</p>\n    </figcaption>\n   </figure>\n   <p>\n    <code>bufferWithTime</code> and <code>bufferWithTimeOrCount</code> are found in each of the\n    following distributions:\n   </p>\n   <ul>\n    <li><code>rx.all.js</code></li>\n    <li><code>rx.all.compat.js</code></li>\n    <li><code>rx.time.js</code></li>\n   </ul>\n   <p>\n    <code>bufferWithTime</code> and <code>bufferWithTimeOrCount</code> require one of the\n    following distributions:\n   </p>\n   <ul>\n    <li><code>rx.time.js</code> requires <code>rx.js</code> or <code>rx.compat.js</code></li>\n    <li>otherwise: <code>rx.lite.js</code> or <code>rx.lite.compat.js</code></li>\n   </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>buffer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n   <p>\n    In RxKotlin there are several variants of <span class=\"operator\">Buffer</span>:\n   </p>\n   <h4><code>buffer(count)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer3.png\" style=\"width:100%;\" alt=\"buffer(count)\">\n    <figcaption>\n     <p><code>buffer(count)</code> emits non-overlapping buffers in the form of\n        <code>List</code>s, each of which contains at most <code>count</code> items from the\n        source Observable (the final emitted <code>List</code> may have fewer than\n        <code>count</code> items).</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer(count, skip)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer4.png\" style=\"width:100%;\" alt=\"buffer(count,skip)\">\n    <figcaption>\n     <p><code>buffer(count,&#x202F;skip)</code> creates a new buffer starting with the first\n        emitted item from the source Observable, and every <code>skip</code> items thereafter, and\n        fills each buffer with <code>count</code> items: the initial item and <code>count-1</code>\n        subsequent ones. It emits these buffers as <code>List</code>s. Depending on the values of\n        <code>count</code> and <code>skip</code> these buffers may overlap (multiple buffers may\n        contain the same item), or they may have gaps (where items emitted by the source\n        Observable are not represented in any buffer).</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer(bufferClosingSelector)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer1.png\" style=\"width:100%;\" alt=\"buffer(bufferClosingSelector)\">\n    <figcaption>\n     <p>When it subscribes to the source Observable, <code>buffer(bufferClosingSelector)</code>\n        begins to collect its emissions into a <code>List</code>, and it also calls\n        <code>bufferClosingSelector</code> to generate a second Observable. When this second\n        Observable emits an <code>TClosing</code> object, <code>buffer</code> emits the current\n        <code>List</code> and repeats this process: beginning a new <code>List</code> and calling\n        <code>bufferClosingSelector</code> to create a new Observable to monitor. It will do this\n        until the source Observable terminates.</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer(boundary)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer8.png\" style=\"width:100%;\" alt=\"buffer(boundary)\">\n    <figcaption>\n     <p><code>buffer(boundary)</code> monitors an Observable, <code>boundary</code>. Each time\n        that Observable emits an item, it creates a new <code>List</code> to begin collecting\n        items emitted by the source Observable and emits the previous <code>List</code>.</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer(bufferOpenings, bufferClosingSelector)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer2.png\" style=\"width:100%;\" alt=\"buffer(bufferOpenings,bufferClosingSelector)\">\n    <figcaption>\n     <p><code>buffer(bufferOpenings,&#x202F;bufferClosingSelector)</code> monitors an Observable,\n        <code>bufferOpenings</code>, that emits <code>BufferOpening</code> objects. Each time it\n        observes such an emitted item, it creates a new <code>List</code> to begin collecting\n        items emitted by the source Observable and it passes the <code>bufferOpenings</code>\n        Observable into the <code>closingSelector</code> function. That function returns an\n        Observable. <code>buffer</code> monitors that Observable and when it detects an emitted\n        item from it, it closes the <code>List</code> and emits it as its own emission.</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer(timespan, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer5.png\" style=\"width:100%;\" alt=\"buffer(timespan,unit)\">\n    <figcaption>\n     <p><code>buffer(timespan,&#x202F;unit)</code> emits a new <code>List</code> of items\n        periodically, every <code>timespan</code> amount of time, containing all items emitted by\n        the source Observable since the previous bundle emission or, in the case of the first\n        bundle, since the subscription to the source Observable.  There is also a version of this\n        variant of the operator that takes a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a\n        parameter and uses it to govern the timespan; by default this variant uses the <code>computation</code>\n        scheduler.</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer(timespan, unit, count</code>[<code>, scheduler</code>]<code>)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer6.png\" style=\"width:100%;\" alt=\"buffer(timespan,unit,count)\">\n    <figcaption>\n     <p><code>buffer(timespan,&#x202F;unit,&#x202F;count)</code> emits a new <code>List</code> of\n        items for every <code>count</code> items emitted by the source Observable, or, if\n        <code>timespan</code> has elapsed since its last bundle emission, it emits a bundle of\n        however many items the source Observable has emitted in that span, even if this is fewer\n        than <code>count</code>. There is also a version of this variant of the operator that\n        takes a <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a parameter and uses it to govern the\n        timespan; by default this variant uses the <code>computation</code> scheduler.</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer(timespan, timeshift, unit</code>[<code>, scheduler</code>]<code>)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer7.png\" style=\"width:100%;\" alt=\"buffer(timespan,timeshift,unit)\">\n    <figcaption>\n     <p><code>buffer(timespan,&#x202F;timeshift,&#x202F;unit)</code> creates a new <code>List</code>\n        of items every <code>timeshift</code> period of time, and fills this bundle with every\n        item emitted by the source Observable from that time until <code>timespan</code> time has\n        passed since the bundle&#x2019;s creation, before emitting this <code>List</code> as its\n        own emission. If <code>timespan</code> is longer than <code>timeshift</code>, the emitted\n        bundles will represent time periods that overlap and so they may contain duplicate items.\n        There is also a version of this variant of the operator that takes a\n        <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a parameter and uses it to govern the\n        timespan; by default this variant uses the <code>computation</code> scheduler.</p>\n    </figcaption>\n   </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Buffer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n   <p>\n    In Rx.NET there are several variants of <span class=\"operator\">Buffer</span>. For each variety\n    you can either pass in the source Observable as the first parameter, or you can call it as\n    an instance method of the source Observable (in which case you can omit that parameter):\n   </p>\n   <h4><code>Buffer(count)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/Buffer3.net.png\" style=\"width:100%;\" alt=\"Buffer(count)\">\n    <figcaption>\n     <p><code>Buffer(count)</code> emits non-overlapping buffers in the form of\n        <code>IList</code>s, each of which contains at most <code>count</code> items from the\n        source Observable (the final emitted <code>IList</code> may have fewer than\n        <code>count</code> items).</p>\n    </figcaption>\n   </figure>\n   <h4><code>Buffer(count, skip)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/Buffer4.net.png\" style=\"width:100%;\" alt=\"Buffer(count,skip)\">\n    <figcaption>\n     <p><code>Buffer(count,&#x202F;skip)</code> creates a new buffer starting with the first\n        emitted item from the source Observable, and every <code>skip</code> items thereafter, and\n        fills each buffer with <code>count</code> items: the initial item and <code>count-1</code>\n        subsequent ones. It emits these buffers as <code>IList</code>s. Depending on the values of\n        <code>count</code> and <code>skip</code> these buffers may overlap (multiple buffers may\n        contain the same item), or they may have gaps (where items emitted by the source\n        Observable are not represented in any buffer).</p>\n    </figcaption>\n   </figure>\n   <h4><code>Buffer(bufferClosingSelector)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/Buffer1.net.png\" style=\"width:100%;\" alt=\"Buffer(bufferClosingSelector)\">\n    <figcaption>\n     <p>When it subscribes to the source Observable, <code>Buffer(bufferClosingSelector)</code>\n        begins to collect its emissions into an <code>IList</code>, and it also calls\n        <code>bufferClosingSelector</code> to generate a second Observable. When this second\n        Observable emits an <code>TBufferClosing</code> object, <code>Buffer</code> emits the\n        current <code>IList</code> and repeats this process: beginning a new <code>IList</code>\n        and calling <code>bufferClosingSelector</code> to create a new Observable to monitor. It\n        will do this until the source Observable terminates.</p>\n    </figcaption>\n   </figure>\n   <h4><code>Buffer(bufferOpenings,bufferClosingSelector)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/Buffer2.net.png\" style=\"width:100%;\" alt=\"Buffer(bufferOpenings,bufferClosingSelector)\">\n    <figcaption>\n     <p><code>Buffer(bufferOpenings,&#x202F;bufferClosingSelector)</code> monitors an Observable,\n        <code>BufferOpenings</code>, that emits <code>TBufferOpening</code> objects. Each time it\n        observes such an emitted item, it creates a new <code>IList</code> to begin collecting\n        items emitted by the source Observable and it passes the <code>TBufferOpening</code>\n        object into the <code>bufferClosingSelector</code> function. That function returns an\n        Observable. <code>Buffer</code> monitors that Observable and when it detects an emitted\n        item from it, it closes the <code>IList</code> and emits it as its own emission.</p>\n    </figcaption>\n   </figure>\n   <h4><code>Buffer(timeSpan)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/Buffer5.net.png\" style=\"width:100%;\" alt=\"Buffer(timeSpan)\">\n    <figcaption>\n     <p><code>Buffer(timeSpan)</code> emits a new <code>IList</code> of items periodically, every\n        <code>timeSpan</code> amount of time, containing all items emitted by the source\n        Observable since the previous bundle emission or, in the case of the first list, since\n        the subscription to the source Observable. There is also a version of this variant of the\n        operator that takes an <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>IScheduler</code></a> as a parameter and uses\n        it to govern the timespan.</p>\n    </figcaption>\n   </figure>\n   <h4><code>Buffer(timeSpan, count)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/Buffer6.net.png\" style=\"width:100%;\" alt=\"Buffer(timeSpan,count)\">\n    <figcaption>\n     <p><code>Buffer(timeSpan,&#x202F;count)</code> emits a new <code>IList</code> of items for\n        every <code>count</code> items emitted by the source Observable, or, if\n        <code>timeSpan</code> has elapsed since its last list emission, it emits a list of\n        however many items the source Observable has emitted in that span, even if this is fewer\n        than <code>count</code>. There is also a version of this variant of the operator that\n        takes an <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>IScheduler</code></a> as a parameter and uses it to govern\n        the timespan.</p>\n    </figcaption>\n   </figure>\n   <h4><code>Buffer(timeSpan, timeShift)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/Buffer7.net.png\" style=\"width:100%;\" alt=\"Buffer(timeSpan,timeShift)\">\n    <figcaption>\n     <p><code>Buffer(timeSpan,&#x202F;timeShift)</code> creates a new <code>IList</code> of items\n        every <code>timeShift</code> period of time, and fills this list with every item emitted\n        by the source Observable from that time until <code>timeSpan</code> time has passed since\n        the list&#x2019;s creation, before emitting this <code>IList</code> as its own emission. If\n        <code>timeSpan</code> is longer than <code>timeShift</code>, the emitted lists will\n        represent time periods that overlap and so they may contain duplicate items. There is also\n        a version of this variant of the operator that takes an\n        <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>IScheduler</code></a> as a parameter and uses it to govern the\n        timespan.</p>\n    </figcaption>\n   </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>bufferWithCount</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>bufferWithCount</code>.\n    </p>\n    <p>\n    Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/bufferWithCount/bufferWithCount.php\n\n$source = Rx\\Observable::range(1, 6)\n    -&gt;bufferWithCount(2)\n    -&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: [1,2]\nNext value: [3,4]\nNext value: [5,6]\nComplete!\n    </pre>\n</div>\n\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/bufferWithCount/bufferWithCountAndSkip.php\n\n$source = Rx\\Observable::range(1, 6)\n    -&gt;bufferWithCount(2, 1)\n    -&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: [1,2]\nNext value: [2,3]\nNext value: [3,4]\nNext value: [4,5]\nNext value: [5,6]\nNext value: [6]\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>buffer buffer_with_count buffer_with_time buffer_with_time_or_count pairwise</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n   <p>\n    RxPY has several <span class=\"operator\">Buffer</span> variants: <code>buffer</code>,\n    <code>buffer_with_count</code>, <code>buffer_with_time</code>, and\n    <code>buffer_with_time_or_count</code>. For each of these variants there are optional\n    parameters that change the behavior of the operator. As always in RxPY, when an operator may\n    take more than one optional parameter, be sure to name the parameter in the parameter list\n    when you call the operator so as to avoid ambiguity.\n   </p>\n   <h4><code>buffer(buffer_openings)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer8.py.png\" style=\"width:100%;\" alt=\"buffer(buffer_openings)\">\n    <figcaption>\n     <p><code>buffer(buffer_openings=boundaryObservable)</code> monitors an Observable,\n        <code>buffer_openings</code>. Each time that Observable emits an item, it creates a new\n        array to begin collecting items emitted by the source Observable and emits the\n        previous array.</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer(closing_selector)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer1.py.png\" style=\"width:100%;\" alt=\"buffer(closing_selector)\">\n    <figcaption>\n     <p><code>buffer(closing_selector=closingSelector)</code> begins collecting items emitted\n        by the source Observable immediately upon subscription, and also calls the\n        <code>closing_selector</code> function to generate a second Observable. It monitors this\n        new Observable and, when it completes or emits an item, it emits the current array,\n        begins a new array to collect items from the source Observable, and calls\n        <code>closing_selector</code> again to generate a new Observable to monitor in order to\n        determine when to emit the new array. It repeats this process until the source Observable\n        terminates, whereupon it emits the final array.</p>\n    </figcaption>\n   </figure>\n   <figure class=\"variant\">\n    <img src=\"images/buffer2.py.png\" style=\"width:100%;\" alt=\"buffer(closing_selector,buffer_closing_selector)\">\n    <figcaption>\n     <p><code>buffer(closing_selector=openingSelector,&#xA0;buffer_closing_selector=closingSelector)</code>\n     begins by calling <code>closing_selector</code> to get an Observable. It monitors this\n     Observable, and, whenever it emits an item, <code>buffer</code> creates a new array, begins\n     to collect items subsequently emitted by the source Observable into this array, and calls\n     <code>buffer_closing_selector</code> to get a new Observable to govern the closing of that\n     array. When this new Observable emits an item or terminates, <code>buffer</code> closes and\n     emits the array that the Observable governs.</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer_with_count(count)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer_with_count3.py.png\" style=\"width:100%;\" alt=\"buffer_with_count(count)\">\n    <figcaption>\n     <p><code>buffer_with_count(count)</code> emits non-overlapping buffers in the form of\n        arrays, each of which contains at most <code>count</code> items from the source Observable\n        (the final emitted array may have fewer than <code>count</code> items).</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer_with_count(count, skip)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer_with_count4.py.png\" style=\"width:100%;\" alt=\"buffer_with_count(count,skip)\">\n    <figcaption>\n     <p><code>buffer_with_count(count,&#x202F;skip=skip)</code> creates a new buffer starting with\n        the first emitted item from the source Observable, and every <code>skip</code> items\n        thereafter, and fills each buffer with <code>count</code> items: the initial item and\n        <code>count-1</code> subsequent ones. It emits these buffers as arrays. Depending on the\n        values of <code>count</code> and <code>skip</code> these buffers may overlap (multiple\n        buffers may contain the same item), or they may have gaps (where items emitted by the\n        source Observable are not represented in any buffer).</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer_with_time(timespan)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer_with_time5.py.png\" style=\"width:100%;\" alt=\"buffer_with_time(timespan)\">\n    <figcaption>\n     <p><code>buffer_with_time(timespan)</code> emits a new array of items periodically, every\n        <code>timespan</code> milliseconds, containing all items emitted by the source Observable\n        since the previous bundle emission or, in the case of the first bundle, since the\n        subscription to the source Observable. There is also a version of this variant of the\n        operator that takes a <code>scheduler</code> parameter and uses it to govern the timespan;\n        by default this variant uses the <code>timeout</code> scheduler.</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer_with_time(timespan, timeshift)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer_with_time7.py.png\" style=\"width:100%;\" alt=\"buffer_with_time(timespan,timeshift)\">\n    <figcaption>\n     <p><code>buffer(timespan,&#x202F;timeshift=timeshift)</code> creates a new array of items\n        every <code>timeshift</code> milliseconds, and fills this array with every item emitted\n        by the source Observable from that time until <code>timespan</code> milliseconds have\n        passed since the array&#x2019;s creation, before emitting this array as its own emission.\n        If <code>timespan</code> is longer than <code>timeshift</code>, the emitted arrays will\n        represent time periods that overlap and so they may contain duplicate items. There is also\n        a version of this variant of the operator that takes a <code>scheduler</code> parameter\n        and uses it to govern the timespan; by default this variant uses the <code>timeout</code>\n        scheduler.</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer_with_time_or_count(timespan, count)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer_with_time_or_count6.py.png\" style=\"width:100%;\" alt=\"buffer_with_time_or_count(timespan,count)\">\n    <figcaption>\n     <p><code>buffer_with_time_or_count(timespan,&#x202F;count)</code> emits a new array of items\n        for every <code>count</code> items emitted by the source Observable, or, if\n        <code>timespan</code> milliseconds have elapsed since its last bundle emission, it emits\n        an array of however many items the source Observable has emitted in that span, even if\n        this is fewer than <code>count</code>. There is also a version of this variant of the\n        operator that takes a <code>scheduler</code> parameter and uses it to govern the timespan;\n        by default this variant uses the <code>timeout</code> scheduler.</p>\n    </figcaption>\n   </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>buffer_with_count buffer_with_time</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n   <p>\n    Rx.rb has three variants of the <span class=\"operator\">Buffer</span> operator:\n   </p>\n   <h4><code>buffer_with_count(count)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer_with_count3.py.png\" style=\"width:100%;\" alt=\"buffer_with_count(count)\">\n    <figcaption>\n     <p><code>buffer_with_count(count)</code> emits non-overlapping buffers in the form of\n        arrays, each of which contains at most <code>count</code> items from the source Observable\n        (the final emitted array may have fewer than <code>count</code> items).</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer_with_count(count,skip)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer_with_count4.rb.png\" style=\"width:100%;\" alt=\"buffer_with_count(count,skip)\">\n    <figcaption>\n     <p><code>buffer_with_count(count,&#x202F;skip=skip)</code> creates a new buffer starting with\n        the first emitted item from the source Observable, and every <code>skip</code> items\n        thereafter, and fills each buffer with <code>count</code> items: the initial item and\n        <code>count-1</code> subsequent ones. It emits these buffers as arrays. Depending on the\n        values of <code>count</code> and <code>skip</code> these buffers may overlap (multiple\n        buffers may contain the same item), or they may have gaps (where items emitted by the\n        source Observable are not represented in any buffer).</p>\n    </figcaption>\n   </figure>\n   <h4><code>buffer_with_time(timespan)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/buffer_with_time5.py.png\" style=\"width:100%;\" alt=\"buffer_with_time(timespan)\">\n    <figcaption>\n     <p><code>buffer_with_time(timespan)</code> emits a new array of items periodically, every\n        <code>timespan</code> milliseconds, containing all items emitted by the source Observable\n        since the previous bundle emission or, in the case of the first bundle, since the\n        subscription to the source Observable.</p>\n    </figcaption>\n   </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>slidingBuffer tumblingBuffer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n   <p>\n    RxScala has two varieties of <span class=\"operator\">Buffer</span> &#x2014;\n    <code>slidingBuffer</code> and <code>tumblingBuffer</code> &#x2014; each of which has variants\n    with different ways of assembling the buffers they emit:\n   </p>\n   <h4><code>slidingBuffer(count, skip)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/slidingBuffer4.png\" style=\"width:100%;\" alt=\"slidingBuffer(count,skip)\">\n    <figcaption>\n     <p><code>slidingBuffer(count,&#x202F;skip)</code> creates a new buffer starting with the first\n        emitted item from the source Observable, and every <code>skip</code> items thereafter, and\n        fills each buffer with <code>count</code> items: the initial item and <code>count-1</code>\n        subsequent ones. It emits these buffers as <code>Seq</code>s. Depending on the values of\n        <code>count</code> and <code>skip</code> these buffers may overlap (multiple buffers may\n        contain the same item), or they may have gaps (where items emitted by the source\n        Observable are not represented in any buffer).</p>\n    </figcaption>\n   </figure>\n   <h4><code>slidingBuffer(timespan, timeshift)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/slidingBuffer7.png\" style=\"width:100%;\" alt=\"slidingBuffer(timespan,timeshift)\">\n    <figcaption>\n     <p><code>slidingBuffer(timespan,&#x202F;timeshift)</code> creates a new\n        <code>Seq</code> of items every <code>timeshift</code> (a <code>Duration</code>), and\n        fills this buffer with every item emitted by the source Observable from that time until\n        <code>timespan</code> (also a <code>Duration</code>) has passed since the buffer&#x2019;s\n        creation, before emitting this <code>Seq</code> as its own emission. If\n        <code>timespan</code> is longer than <code>timeshift</code>, the emitted arrays will\n        represent time periods that overlap and so they may contain duplicate items. There is also\n        a version of this variant of the operator that takes a\n        <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> as a parameter and uses it to govern the\n        timespan.</p>\n    </figcaption>\n   </figure>\n   <h4><code>slidingBuffer(openings, closings)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/slidingBuffer2.png\" style=\"width:100%;\" alt=\"slidingBuffer(openings,closings)\">\n    <figcaption>\n     <p><code>slidingBuffer(openings,closings)</code> monitors the <code>openings</code>\n     Observable, and, whenever it emits an <code>Opening</code> item, <code>slidingBuffer</code>\n     creates a new <code>Seq</code>, begins to collect items subsequently emitted by the source\n     Observable into this buffer, and calls <code>closings</code> to get a new Observable to\n     govern the closing of that buffer. When this new Observable emits an item or terminates,\n     <code>slidingBuffer</code> closes and emits the <code>Seq</code>that the Observable\n     governs.</p>\n    </figcaption>\n   </figure>\n   <h4><code>tumblingBuffer(count)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/tumblingBuffer3.png\" style=\"width:100%;\" alt=\"tumblingBuffer(count)\">\n    <figcaption>\n     <p><code>tumblingBuffer(count)</code> emits non-overlapping buffers in the form of\n        <code>Seq</code>s, each of which contains at most <code>count</code> items from the source\n        Observable (the final emitted buffer may have fewer than <code>count</code> items).</p>\n    </figcaption>\n   </figure>\n   <h4><code>tumblingBuffer(boundary)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/tumblingBuffer8.png\" style=\"width:100%;\" alt=\"tumblingBuffer(boundary)\">\n    <figcaption>\n     <p><code>tumblingBuffer(boundary)</code> monitors an Observable, <code>boundary</code>. Each\n        time that Observable emits an item, it creates a new <code>Seq</code> to begin collecting\n        items emitted by the source Observable and emits the previous <code>Seq</code>. This\n        variant of the operator has an optional second parameter, <code>initialCapacity</code>\n        with which you can indicate the expected size of these buffers so as to make memory\n        allocation more efficient.</p>\n    </figcaption>\n   </figure>\n   <h4><code>tumblingBuffer(timespan)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/tumblingBuffer5.png\" style=\"width:100%;\" alt=\"tumblingBuffer(timespan)\">\n    <figcaption>\n     <p><code>tumblingBuffer(timespan)</code> emits a new <code>Seq</code> of items periodically,\n        every <code>timespan</code> (a <code>Duration</code>), containing all items emitted by the\n        source Observable since the previous bundle emission or, in the case of the first bundle,\n        since the subscription to the source Observable. This variant of the operator has an\n        optional second parameter, <code>scheduler</code>, with which you can set the\n        <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> that you want to govern the timespan\n        calculation.</p>\n    </figcaption>\n   </figure>\n   <h4><code>tumblingBuffer(timespan, count)</code></h4>\n   <figure class=\"variant\">\n    <img src=\"images/tumblingBuffer6.png\" style=\"width:100%;\" alt=\"tumblingBuffer(timespan,count)\">\n    <figcaption>\n     <p><code>tumblingBuffer(timespan,&#x202F;count)</code> emits a new <code>Seq</code> of items\n        for every <code>count</code> items emitted by the source Observable, or, if\n        <code>timespan</code> (a <code>Duration</code>) has elapsed since its last bundle\n        emission, it emits a <code>Seq</code> containing however many items the source Observable\n        emitted in that span, even if this is fewer than <code>count</code>. This variant of the\n        operator has an optional third parameter, <code>scheduler</code>, with which you can set\n        the <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\"><code>Scheduler</code></a> that you want to govern the timespan\n        calculation.</p>\n    </figcaption>\n   </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>buffer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Buffer"},{"path":"/documentation/operators/defaultifempty.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#conditional\">Conditional and Boolean</a></li>\n  <li class=\"active\">DefaultIfEmpty</li>\n</ol>\n\n   <h1>DefaultIfEmpty</h1>\n   <h3>emit items from the source Observable, or a default item if the source Observable emits nothing</h3>\n   <figure>\n    <img src=\"images/defaultIfEmpty.c.png\" style=\"width:100%;\" alt=\"DefaultIfEmpty\">\n    <figcaption><p>\n     The <span class=\"operator\">DefaultIfEmpty</span> operator simply mirrors the source Observable exactly\n     if the source Observable emits any items. If the source Observable terminates normally (with an\n     <code>onComplete</code>) without emitting any items, the Observable returned from\n     <span class=\"operator\">DefaultIfEmpty</span> will instead emit a default item of your choosing before\n     it too completes.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/06_Inspection.html#DefaultIfEmpty\"><cite>Introduction to Rx</cite>: DefaultIfEmpty</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>defaultIfEmpty switchIfEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/defaultIfEmpty.png\" style=\"width:100%;\" alt=\"defaultIfEmpty\">\n      <figcaption><p>\n       RxGroovy implements this operator as <code>defaultIfEmpty</code>.\n      </p><p>\n       This operator does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#defaultIfEmpty(T)\"><code>defaultIfEmpty(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      There is also a new operator in RxGroovy 1.1 called <code>switchIfEmpty</code> that, rather than emitting\n      a backup <em>value</em> if the source Observable terminates without having emitted any items, it emits the\n      emissions from a backup <em>Observable</em>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>defaultIfEmpty switchIfEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/defaultIfEmpty.png\" style=\"width:100%;\" alt=\"defaultIfEmpty\">\n      <figcaption><p>\n       RxJava implements this operator as <code>defaultIfEmpty</code>.\n      </p><p>\n       This operator does not by default operate on any particular <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p><ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#defaultIfEmpty(T)\"><code>defaultIfEmpty(T)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      There is also a new operator in RxJava 1.1 called <code>switchIfEmpty</code> that, rather than emitting a\n      backup <em>value</em> if the source Observable terminates without having emitted any items, it emits the\n      emissions from a backup <em>Observable</em>.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>defaultIfEmpty switchIfEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>defaultIfEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/defaultIfEmpty.png\" style=\"width:100%;\" alt=\"defaultIfEmpty\">\n      <figcaption><p>\n       RxJS implements <code>defaultIfEmpty</code>, but the parameter that sets the default value is optional.\n       If you do not pass this default value, <code>defaultIfEmpty</code> will emit a\n       &#x201C;<code>null</code>&#x201D; if the source Observable completes without emitting anything. (Note\n       that an emission of a &#x201C;<code>null</code>&#x201D; is <em>not</em> the same as no emission.)\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\n/* Without a default value */\nvar source = Rx.Observable.empty().defaultIfEmpty();\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x.toString()); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: null\nCompleted</pre></div>\n      <div class=\"code javascript\"><pre>\n/* With a defaultValue */\nvar source = Rx.Observable.empty().defaultIfEmpty(false);\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x.toString()); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: false\nCompleted</pre></div>\n      <p>\n       <code>defaultIfEmpty</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>defaultIfEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>DefaultIfEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>defaultIfEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>defaultIfEmpty</code>.\n    </p>\n    <p>\n    Returns the specified value of an observable if the sequence is empty.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/defaultIfEmpty/defaultIfEmpty.php\n\n$source = \\Rx\\Observable::emptyObservable()-&gt;defaultIfEmpty(new \\Rx\\Observable\\ReturnObservable(&quot;something&quot;));\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: something\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>default_if_empty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>default_if_empty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>orElse switchIfEmpty</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"DefaultIfEmpty"},{"path":"/documentation/operators/replay.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#connectable\">Connectable</a></li>\n  <li class=\"active\">Replay</li>\n</ol>\n\n<h1>Replay</h1>\n<h3>ensure that all observers see the same sequence of emitted items, even if they subscribe after the Observable has begun emitting items</h3>\n\n<figure>\n <img src=\"images/replay.c.png\" style=\"width:100%;\" alt=\"Replay\">\n <figcaption><p>\n  A <dfn>connectable Observable</dfn> resembles an ordinary Observable, except that it does not begin\n  emitting items when it is subscribed to, but only when the <span class=\"operator\">Connect</span>\n  operator is applied to it. In this way you can prompt an Observable to begin emitting items at a\n  time of your choosing.\n </p><p>\n  If you apply the <span class=\"operator\">Replay</span> operator to an Observable before you convert\n  it into a connectable Observable, the resulting connectable Observable will always emit the same\n  complete sequence to any future observers, even those observers that subscribe after the\n  connectable Observable has begun to emit items to other subscribed observers.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/connect.html\"><span class=\"operator\">Connect</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/publish.html\"><span class=\"operator\">Publish</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/refcount.html\"><span class=\"operator\">RefCount</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/14_HotAndColdObservables.html#Replay\"><cite>Introduction to Rx</cite>: Replay</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>cache</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p> \n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>publish_synchronized replay</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n \n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>replay cache</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/replay.png\" style=\"width:100%;\" alt=\"replay\">\n     <figcaption><p>\n      In RxGroovy there is a variety of the <code>replay</code> operator that returns a connectable\n      Observable. You must <a href=\"http://reactivex.io/documentation/operators/publish.html\"><span class=\"operator\">Publish</span></a> this\n      connectable Observable before observers can subscribe to it, and then\n      <a href=\"http://reactivex.io/documentation/operators/connect.html\"><span class=\"operator\">Connect</span></a> to it in order to observe its\n      emissions.\n     </p><p>\n      Variants of this variety of the <code>replay</code> operator permit you to set a maximum\n      buffer size to limit the number of items <code>replay</code> will buffer and replay to\n      subsequent observers, and/or to establish a moving time window that defines when emitted items\n      become too old to buffer and replay.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay()\"><code>replay()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.Scheduler)\"><code>replay(Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int)\"><code>replay(int)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20rx.Scheduler)\"><code>replay(int,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(long,%20java.util.concurrent.TimeUnit)\"><code>replay(long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>replay(long,TimeUnit,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20long,%20java.util.concurrent.TimeUnit)\"><code>replay(int,long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>replay(int,long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/replay.f.png\" style=\"width:100%;\" alt=\"replay\">\n     <figcaption><p>\n      There is also a variety of <code>replay</code> that returns an ordinary Observable. These\n      variants take as a parameter a transformative function; this function accepts an item emitted\n      by the source Observable as its parameter, and returns an item to be emitted by the resulting\n      Observable. So really, this operator does not replay the source Observable but instead replays\n      the source Observable <em>as transformed</em> by this function.\n     </p><p>\n      Variants of this variety of the <code>replay</code> operator permit you to set a maximum\n      buffer size to limit the number of items <code>replay</code> will buffer and replay to\n      subsequent observers, and/or to establish a moving time window that defines when emitted items\n      become too old to buffer and replay.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1)\"><code>replay(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20rx.Scheduler)\"><code>replay(Func1,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int)\"><code>replay(Func1,int)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20rx.Scheduler)\"><code>replay(Func1,int,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20long,%20java.util.concurrent.TimeUnit)\"><code>replay(Func1,long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>replay(Func1,long,TimeUnit,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20long,%20java.util.concurrent.TimeUnit)\"><code>replay(Func1,int,long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>replay(Func1,int,long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>cache replay</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/replay.png\" style=\"width:100%;\" alt=\"replay\">\n     <figcaption><p>\n      In RxJava there is a variety of the <code>replay</code> operator that returns a connectable\n      Observable. You must <a href=\"http://reactivex.io/documentation/operators/publish.html\"><span class=\"operator\">Publish</span></a> this\n      connectable Observable before observers can subscribe to it, and then\n      <a href=\"http://reactivex.io/documentation/operators/connect.html\"><span class=\"operator\">Connect</span></a> to it in order to observe its\n      emissions.\n     </p><p>\n      Variants of this variety of the <code>replay</code> operator permit you to set a maximum\n      buffer size to limit the number of items <code>replay</code> will buffer and replay to\n      subsequent observers, and/or to establish a moving time window that defines when emitted items\n      become too old to buffer and replay.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay()\"><code>replay()</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.Scheduler)\"><code>replay(Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int)\"><code>replay(int)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20rx.Scheduler)\"><code>replay(int,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(long,%20java.util.concurrent.TimeUnit)\"><code>replay(long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>replay(long,TimeUnit,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20long,%20java.util.concurrent.TimeUnit)\"><code>replay(int,long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>replay(int,long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/replay.f.png\" style=\"width:100%;\" alt=\"replay\">\n     <figcaption><p>\n      There is also a variety of <code>replay</code> that returns an ordinary Observable. These\n      variants take as a parameter a transformative function; this function accepts an item emitted\n      by the source Observable as its parameter, and returns an item to be emitted by the resulting\n      Observable. So really, this operator does not replay the source Observable but instead replays\n      the source Observable <em>as transformed</em> by this function.\n     </p><p>\n      Variants of this variety of the <code>replay</code> operator permit you to set a maximum\n      buffer size to limit the number of items <code>replay</code> will buffer and replay to\n      subsequent observers, and/or to establish a moving time window that defines when emitted items\n      become too old to buffer and replay.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1)\"><code>replay(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20rx.Scheduler)\"><code>replay(Func1,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int)\"><code>replay(Func1,int)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20rx.Scheduler)\"><code>replay(Func1,int,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20long,%20java.util.concurrent.TimeUnit)\"><code>replay(Func1,long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>replay(Func1,long,TimeUnit,Scheduler)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20long,%20java.util.concurrent.TimeUnit)\"><code>replay(Func1,int,long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#replay(rx.functions.Func1,%20int,%20long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>replay(Func1,int,long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>cache replay</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>replay shareReplay</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/replay.fnts.png\" style=\"width:100%;\" alt=\"replay\">\n     <figcaption><p>\n      In RxJs the <code>replay</code> operator takes four optional parameters and returns an\n      ordinary Observable:\n     </p>\n     <dl>\n      <dt><code>selector</code></dt><dd>a transforming function that takes an item emitted by the\n          source Observable as its parameter and returns an item to be emitted by the resulting\n          Observable</dd>\n      <dt><code>bufferSize</code></dt><dd>the maximum number of items to buffer and replay to\n          subsequent observers</dd>\n      <dt><code>window</code></dt><dd>the age, in milliseconds, at which items in this buffer may be\n          discarded without being emitted to subsequent observers</dd>\n      <dt><code>scheduler</code></dt><dd>the <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> on which this operator\n          will operate</dd>\n     </dl>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar interval = Rx.Observable.interval(1000);\n\nvar source = interval\n    .take(2)\n    .do(function (x) {\n        console.log(&apos;Side effect&apos;);\n    });\n\nvar published = source\n    .replay(function (x) {\n        return x.take(2).repeat(2);\n    }, 3);\n\npublished.subscribe(createObserver(&apos;SourceA&apos;));\npublished.subscribe(createObserver(&apos;SourceB&apos;));\n\nfunction createObserver(tag) {\n    return Rx.Observer.create(\n        function (x) { console.log(&apos;Next: &apos; + tag + x); },\n        function (err) { console.log(&apos;Error: &apos; + err); },\n        function () { console.log(&apos;Completed&apos;); });\n}</pre></div><div class=\"output\"><pre>\nSide effect\nNext: SourceA0\nSide effect\nNext: SourceB0\nSide effect\nNext: SourceA1\nNext: SourceA0\nNext: SourceA1\nCompleted\nSide effect\nNext: SourceB1\nNext: SourceB0\nNext: SourceB1\nCompleted</pre></div>\n     </figcaption>\n    </figure>\n    <p>\n     There is also a <code>shareReplay</code> operator, which keeps track of the number of\n     observers, and disconnects from the source Observable when that number drops to zero.\n     <code>shareReplay</code> takes three optional parameters and returns an ordinary Observable:\n     </p>\n     <dl>\n      <dt><code>bufferSize</code></dt><dd>the maximum number of items to buffer and replay to\n          subsequent observers</dd>\n      <dt><code>window</code></dt><dd>the age, in milliseconds, at which items in this buffer may be\n          discarded without being emitted to subsequent observers</dd>\n      <dt><code>scheduler</code></dt><dd>the <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a> on which this operator\n          will operate</dd>\n     </dl>\n    <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar interval = Rx.Observable.interval(1000);\n\nvar source = interval\n    .take(4)\n    .doAction(function (x) {\n        console.log(&apos;Side effect&apos;);\n    });\n\nvar published = source\n    .shareReplay(3);\n\npublished.subscribe(createObserver(&apos;SourceA&apos;));\npublished.subscribe(createObserver(&apos;SourceB&apos;));\n\n// Creating a third subscription after the previous two subscriptions have\n// completed. Notice that no side effects result from this subscription,\n// because the notifications are cached and replayed.\nRx.Observable\n    .return(true)\n    .delay(6000)\n    .flatMap(published)\n    .subscribe(createObserver(&apos;SourceC&apos;));\n\nfunction createObserver(tag) {\n    return Rx.Observer.create(\n        function (x) { console.log(&apos;Next: &apos; + tag + x); },\n        function (err) { console.log(&apos;Error: &apos; + err); },\n        function () { console.log(&apos;Completed&apos;); });\n}</pre></div><div class=\"output\"><pre>\nSide effect\nNext: SourceA0\nNext: SourceB0\nSide effect\nNext: SourceA1\nNext: SourceB1\nSide effect\nNext: SourceA2\nNext: SourceB2\nSide effect\nNext: SourceA3\nNext: SourceB3\nCompleted\nCompleted\nNext: SourceC1\nNext: SourceC2\nNext: SourceC3\nCompleted</pre></div>\n     <p>\n      <code>replay</code> and <code>shareReplay</code> are found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.binding.js</code> (requires <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>replay cache</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Replay</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>replay shareReplay</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>replay</code>.\n    </p>\n    <p>\n    Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.  This operator is a specialization of Multicast using a ReplaySubject.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/replay/replay.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$interval = \\Rx\\Observable::interval(1000);\n\n$source = $interval\n    -&gt;take(2)\n    -&gt;doOnNext(function ($x) {\n        echo $x, &quot; something&quot;, PHP_EOL;\n        echo &quot;Side effect&quot;, PHP_EOL;\n    });\n\n$published = $source\n    -&gt;replay(function (\\Rx\\Observable $x) {\n        return $x-&gt;take(2)-&gt;repeat(2);\n    }, 3);\n\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceA &apos;), $scheduler);\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceB &apos;), $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\n\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>shareReplay</code>.\n    </p>\n    <p>\n    Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.  This operator is a specialization of  replay which creates a subscription when the number of observers goes from zero to one, then shares that  subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/share/shareReplay.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$interval = Rx\\Observable::interval(1000);\n\n$source = $interval\n    -&gt;take(4)\n    -&gt;doOnNext(function ($x) {\n        echo &apos;Side effect&apos;, PHP_EOL;\n    });\n\n$published = $source\n    -&gt;shareReplay(3);\n\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceA &apos;), $scheduler);\n$published-&gt;subscribe($createStdoutObserver(&apos;SourceB &apos;), $scheduler);\n\nRx\\Observable\n    ::just(true)\n    -&gt;concatMapTo(\\Rx\\Observable::timer(6000))\n    -&gt;flatMap(function () use ($published) {\n        return $published;\n    })\n    -&gt;subscribe($createStdoutObserver(&apos;SourceC &apos;), $scheduler);\n\n$loop-&gt;run();\n\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nSide effect\nSourceA Next value: 0\nSourceB Next value: 0\nSide effect\nSourceA Next value: 1\nSourceB Next value: 1\nSide effect\nSourceA Next value: 2\nSourceB Next value: 2\nSide effect\nSourceA Next value: 3\nSourceB Next value: 3\nSourceA Complete!\nSourceB Complete!\nSourceC Next value: 1\nSourceC Next value: 2\nSourceC Next value: 3\nSourceC Complete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>replay</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>replay cache</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>replay shareReplay</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Replay"},{"path":"/documentation/operators/reduce.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#mathematical\">Mathematical and Aggregate</a></li>\n  <li class=\"active\">Reduce</li>\n</ol>\n\n   <h1>Reduce</h1>\n   <h3>apply a function to each item emitted by an Observable, sequentially, and emit the final value</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"reduce\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Reduce</span> operator applies a function to the first item emitted by the\n     source Observable and then feeds the result of the function back into the function along with the second\n     item emitted by the source Observable, continuing this process until the source Observable emits its\n     final item and completes, whereupon the Observable returned from <span class=\"operator\">Reduce</span>\n     emits the final value returned from the function.\n    </p><p>\n     This sort of operation is sometimes called &#x201C;accumulate,&#x201D; &#x201C;aggregate,&#x201D;\n     &#x201C;compress,&#x201D; &#x201C;fold,&#x201D; or &#x201C;inject&#x201D; in other contexts.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/scan.html\"><span class=\"operator\">Scan</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/07_Aggregation.html#Aggregate\"><cite>Introduction to Rx</cite>: Aggregate</a></li>\n    <li><a href=\"http://rxmarbles.com/#reduce\">RxMarbles: <code>reduce</code></a></li>\n    <li><a href=\"http://blog.joanzapata.com/experimentation-with-rx/\">Experimentation with RxJava</a> by Joan Zapata</li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>into iterate reduce</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>iterate reduce</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>collect reduce</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/reduce.png\" style=\"width:100%;\" alt=\"reduce\">\n      <figcaption><p>\n       The <code>reduce</code> operator returns an Observable that applies a function of your choosing to the\n       first item emitted by a source Observable, then feeds the result of that function along with the second\n       item emitted by the source Observable into the same function, then feeds the result of that function\n       along with the third item into the same function, and so on until all items have been emitted by the\n       source Observable. Then it emits the final result from the final call to your function as the sole output\n       from the returned Observable.\n      </p><p>\n       Note that if the source Observable does not emit any items, <code>reduce</code> will fail with an\n       <code>IllegalArgumentException</code>.\n      </p><p>\n       For example, the following code uses <code>reduce</code> to compute, and then emit as an Observable, the\n       sum of the numbers emitted by the source Observable:\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\nnumbers = Observable.from([1, 2, 3, 4, 5]);\n\nnumbers.reduce({ a, b -&gt; a+b }).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n15\nSequence complete</pre></div>\n      <p>\n       <code>reduce</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#reduce(rx.functions.Func2)\"><code>reduce(Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/reduceSeed.png\" style=\"width:100%;\" alt=\"reduce\">\n      <figcaption><p>\n       There is also a version of <code>reduce</code> to which you can pass a seed item in addition to an\n       accumulator function. Note that passing a <code>null</code> seed is not the same as not passing a seed.\n       The behavior will be different. If you pass a seed of <code>null</code>, you will be seeding your\n       reduction with the item <code>null</code>. Note also that if you do pass in a seed, and the source\n       Observable emits no items, reduce will emit the seed and complete normally without error.\n      </p><p>\n       <code>reduce</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#reduce(R,%20rx.functions.Func2)\"><code>reduce(R,Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      It is a bad idea to use <code>reduce</code> to collect emitted items into a mutable data structure.\n      Instead, use <code>collect</code> for that purpose.\n     </p>\n     <figure>\n      <img src=\"images/collect.png\" style=\"width:100%;\" alt=\"collect\">\n      <figcaption><p>\n       The <code>collect</code> operator is similar to <code>reduce</code> but is specialized for the purpose\n       of collecting the whole set of items emitted by the source Observable into a single mutable data\n       structure to be emitted by the resulting Observable. Pass it two parameters:\n      </p>\n      <ol>\n       <li>a function that returns the mutable data structure</li>\n       <li>a function that, when given the data structure and an item emitted by the source Observable, modifies the data structure appropriately</li>\n      </ol>\n      <p>\n       <code>collect</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#collect(rx.functions.Func0,%20rx.functions.Action2)\"><code>collect(Func0,Action2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>collect reduce</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/reduce.png\" style=\"width:100%;\" alt=\"reduce\">\n      <figcaption><p>\n       The <code>reduce</code> operator returns an Observable that applies a function of your choosing to the\n       first item emitted by a source Observable, then feeds the result of that function along with the second\n       item emitted by the source Observable into the same function, then feeds the result of that function\n       along with the third item into the same function, and so on until all items have been emitted by the\n       source Observable. Then it emits the final result from the final call to your function as the sole output\n       from the returned Observable.\n      </p><p>\n       Note that if the source Observable does not emit any items, <code>reduce</code> will fail with an\n       <code>IllegalArgumentException</code>.\n      </p><p>\n       <code>reduce</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#reduce(rx.functions.Func2)\"><code>reduce(Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/reduceSeed.png\" style=\"width:100%;\" alt=\"reduce\">\n      <figcaption><p>\n       There is also a version of <code>reduce</code> to which you can pass a seed item in addition to an\n       accumulator function. Note that passing a <code>null</code> seed is not the same as not passing a seed.\n       The behavior will be different. If you pass a seed of <code>null</code>, you will be seeding your\n       reduction with the item <code>null</code>. Note also that if you do pass in a seed, and the source\n       Observable emits no items, reduce will emit the seed and complete normally without error.\n      </p><p>\n       <code>reduce</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#reduce(R,%20rx.functions.Func2)\"><code>reduce(R,Func2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <p>\n      It is a bad idea to use <code>reduce</code> to collect emitted items into a mutable data structure.\n      Instead, use <code>collect</code> for that purpose.\n     </p>\n     <figure>\n      <img src=\"images/collect.png\" style=\"width:100%;\" alt=\"collect\">\n      <figcaption><p>\n       The <code>collect</code> operator is similar to <code>reduce</code> but is specialized for the purpose\n       of collecting the whole set of items emitted by the source Observable into a single mutable data\n       structure to be emitted by the resulting Observable. Pass it two parameters:\n      </p>\n      <ol>\n       <li>a function that returns the mutable data structure</li>\n       <li>a function that, when given the data structure and an item emitted by the source Observable, modifies the data structure appropriately</li>\n      </ol>\n      <p>\n       <code>collect</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#collect(rx.functions.Func0,%20rx.functions.Action2)\"><code>collect(Func0,Action2)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>collect collectInto reduce reduceWith</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>reduce</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/reduceSeed.png\" style=\"width:100%;\" alt=\"reduce\">\n      <figcaption><p>\n       RxJS implements the <code>reduce</code> operator. Pass it an accumulator function, and, optionally, a\n       seed value to pass into the accumulator function with the first item emitted by the source Observable.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(1, 3)\n    .reduce(function (acc, x) {\n        return acc * x;\n    }, 1)\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 6\nCompleted</pre></div>\n      <p><code>reduce</code> is found in each of the following distributions:</p>\n      <ul>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.aggregates.js</code></li>\n      </ul>\n      <p><code>reduce</code> requires one of the following distributions:</p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>collect reduce</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Aggregate</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>reduce</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>reduce</code>.\n    </p>\n    <p>\n    Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/reduce/reduce.php\n\n//Without a seed\n$source = \\Rx\\Observable::fromArray(range(1, 3));\n\n$subscription = $source\n    -&gt;reduce(function ($acc, $x) {\n        return $acc + $x;\n    })\n    -&gt;subscribe($createStdoutObserver());\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 6\nComplete!\n    </pre>\n</div>\n\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/reduce/reduce-with-seed.php\n\n//With a seed\n$source = \\Rx\\Observable::fromArray(range(1, 3));\n\n$subscription = $source\n    -&gt;reduce(function ($acc, $x) {\n        return $acc * $x;\n    }, 1)\n    -&gt;subscribe($createStdoutObserver());\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 6\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>aggregate expand reduce</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>reduce</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>foldLeft reduce</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>reduce</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Reduce"},{"path":"/documentation/operators/flatmap.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#transforming\">Transforming</a></li>\n  <li class=\"active\">FlatMap</li>\n</ol>\n\n<h1>FlatMap</h1>\n<h3>transform the items emitted by an Observable into Observables, then flatten the emissions from those into a single Observable</h3>\n\n<figure>\n <img src=\"images/flatMap.c.png\" style=\"width:100%;\" alt=\"FlatMap\">\n <figcaption><p>\n  The <span class=\"operator\">FlatMap</span> operator transforms an Observable by applying a function\n  that you specify to each item emitted by the source Observable, where that function returns an\n  Observable that itself emits items. <span class=\"operator\">FlatMap</span> then merges the emissions\n  of these resulting Observables, emitting these merged results as its own sequence.\n </p><p>\n  This method is useful, for example, when you have an Observable that emits a series of items that\n  themselves have Observable members or are in other ways transformable into Observables, so that you\n  can create a new Observable that emits the complete collection of items emitted by the\n  sub-Observables of these items.\n </p><p>\n  Note that <span class=\"operator\">FlatMap</span> <em>merges</em> the emissions of these Observables,\n  so that they may interleave.\n </p><p>\n  In several of the language-specific implementations there is also an operator that does\n  <em>not</em> interleave the emissions from the transformed Observables, but instead emits these\n  emissions in strict order, often called <span class=\"operator\">ConcatMap</span> or something\n  similar.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/map.html\"><span class=\"operator\">Map</span></a></li>\n <li><a href=\"http://blog.danlew.net/2014/09/22/grokking-rxjava-part-2/\"><cite>Grokking RxJava</cite>: Operator, Operator</a> by Dan Lew</li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/08_Transformation.html#SelectMany\"><cite>Introduction to Rx</cite>: SelectMany</a></li>\n <li><a href=\"http://jschneider.io/2014/11/26/Recursive-Observables-with-Rx-Java.html\"><cite>Recursive Observables with RxJava</cite></a> by Jon Schneider</li>\n <li><a href=\"http://fernandocejas.com/2015/01/11/rxjava-observable-tranformation-concatmap-vs-flatmap/\">RxJava Observable transformation: concatMap() vs. flatMap()</a> by Fernando Cejas</li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>flatmap mapcat</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>concat_map flat_map</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>concatMap flatMap flatMapIterable StringObservable.split switchMap</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/mergeMap.png\" style=\"width:100%;\" alt=\"flatMap\">\n     <figcaption><p>\n      RxGroovy implements the <code>flatMap</code> operator.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\n// this closure is an Observable that emits three numbers\nnumbers   = Observable.from([1, 2, 3]);\n// this closure is an Observable that emits two numbers based on what number it is passed\nmultiples = { n -&gt; Observable.from([ n*2, n*3 ]) };\n\nnumbers.flatMap(multiples).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n2\n3\n4\n6\n6\n9\nSequence complete</pre></div>\n     <p>\n      Note that if any of the individual Observables mapped to the items from the source Observable\n      by <code>flatMap</code> aborts by invoking <code>onError</code>, the Observable produced by\n      <code>flatMap</code> will itself immediately abort and invoke <code>onError</code>.\n     </p><p>\n      A version of this variant of the operator (still in Beta as of this writing) takes an additional\n      <code>int</code> parameter. This parameter sets the maximum number of concurrent subscriptions\n      that <code>flatMap</code> will attempt to have to the Observables that the items emitted by the source\n      Observable map to. When it reaches this maximum number, it will wait for one of those Observables to\n      terminate before subscribing to another.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1)\"><code>flatMap(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20int)\"><code>flatMap(Func1,int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/mergeMap.nce.png\" style=\"width:100%;\" alt=\"flatMap\">\n     <figcaption><p>\n      Another version of <code>flatMap</code> creates (and flattens) a new Observable for each item\n      <em>and notification</em> from the source Observable.\n     </p><p>\n      A version of this variant of the operator (still in Beta as of this writing) takes an additional\n      <code>int</code> parameter. This parameter sets the maximum number of concurrent subscriptions\n      that <code>flatMap</code> will attempt to have to the Observables that the items emitted by the source\n      Observable map to. When it reaches this maximum number, it will wait for one of those Observables to\n      terminate before subscribing to another.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)\"><code>flatMap(Func1,Func1,Func0)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0,%20int)\"><code>flatMap(Func1,Func1,Func0,int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/mergeMap.r.png\" style=\"width:100%;\" alt=\"flatMap\">\n     <figcaption><p>\n      Another version combines items from the source Observable with the Observable triggered by\n      those source items, and emits these combinations.\n     </p><p>\n      A version of this variant of the operator (still in Beta as of this writing) takes an additional\n      <code>int</code> parameter. This parameter sets the maximum number of concurrent subscriptions\n      that <code>flatMap</code> will attempt to have to the Observables that the items emitted by the source\n      Observable map to. When it reaches this maximum number, it will wait for one of those Observables to\n      terminate before subscribing to another.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2)\"><code>flatMap(Func1,Func2)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2,%20int)\"><code>flatMap(Func1,Func2,int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/mergeMapIterable.png\" style=\"width:100%;\" alt=\"flatMapIterable\">\n     <figcaption><p>\n      The <code>flatMapIterable</code> variants pair up source items and generated\n      <code>Iterable</code>s rather than source items and generated Observables, but otherwise work\n      in much the same way.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMapIterable(rx.functions.Func1)\"><code>flatMapIterable(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMapIterable(rx.functions.Func1,%20rx.functions.Func2)\"><code>flatMapIterable(Func1,Func2)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/concatMap.png\" style=\"width:100%;\" alt=\"concatMap\">\n     <figcaption><p>\n      There is also a <code>concatMap</code> operator, which is like the simpler version of the\n      <code>flatMap</code> operator, but it concatenates rather than merges the resulting\n      Observables in order to generate its own sequence.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#concatMap(rx.functions.Func1)\"><code>concatMap(Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/switchMap.png\" style=\"width:100%;\" alt=\"switchMap\">\n     <figcaption><p>\n      RxGroovy also implements the <code>switchMap</code> operator. It behaves much like\n      <code>flatMap</code>, except that whenever a new item is emitted by the source Observable, it\n      will unsubscribe to and stop mirroring the Observable that was generated from the\n      previously-emitted item, and begin only mirroring the current one.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#switchMap(rx.functions.Func1)\"><code>switchMap(Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/St.split.png\" style=\"width:100%;\" alt=\"split\">\n     <figcaption><p>\n      In the distinct <code>StringObservable</code> class (not part of RxGroovy by default) there is also a\n      <code>split</code> operator that converts an Observable of Strings into an Observable of Strings that\n      treats the source sequence as a stream and splits it on a specified regex boundary, then merges the\n      results of this split.\n     </p>\n     <h4>See Also</h4>\n     <ul>\n      <li><a href=\"http://www.nurkiewicz.com/2014/12/accessing-meetups-streaming-api-with.html\">Aligning packets with JSON documents</a> with the <code>split</code> operator</li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>concatMap flatMap flatMapIterable StringObervable.split switchMap</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <figure class=\"variant\">\n     <img src=\"images/mergeMap.png\" style=\"width:100%;\" alt=\"flatMap\">\n     <figcaption><p>\n      RxJava implements the <code>flatMap</code> operator.\n     </p><p>\n      Note that if any of the individual Observables mapped to the items from the source Observable\n      by <code>flatMap</code> aborts by invoking <code>onError</code>, the Observable produced by\n      <code>flatMap</code> will itself immediately abort and invoke <code>onError</code>.\n     </p><p>\n      A version of this variant of the operator (still in Beta as of this writing) takes an additional\n      <code>int</code> parameter. This parameter sets the maximum number of concurrent subscriptions\n      that <code>flatMap</code> will attempt to have to the Observables that the items emitted by the source\n      Observable map to. When it reaches this maximum number, it will wait for one of those Observables to\n      terminate before subscribing to another.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1)\"><code>flatMap(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20int)\"><code>flatMap(Func1,int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/mergeMap.nce.png\" style=\"width:100%;\" alt=\"flatMap\">\n     <figcaption><p>\n      Another version of <code>flatMap</code> creates (and flattens) a new Observable for each item\n      <em>and notification</em> from the source Observable.\n     </p><p>\n      A version of this variant of the operator (still in Beta as of this writing) takes an additional\n      <code>int</code> parameter. This parameter sets the maximum number of concurrent subscriptions\n      that <code>flatMap</code> will attempt to have to the Observables that the items emitted by the source\n      Observable map to. When it reaches this maximum number, it will wait for one of those Observables to\n      terminate before subscribing to another.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0)\"><code>flatMap(Func1,Func1,Func0)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func1,%20rx.functions.Func0,%20int)\"><code>flatMap(Func1,Func1,Func0,int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/mergeMap.r.png\" style=\"width:100%;\" alt=\"flatMap\">\n     <figcaption><p>\n      Another version combines items from the source Observable with the Observable triggered by\n      those source items, and emits these combinations.\n     </p><p>\n      A version of this variant of the operator (still in Beta as of this writing) takes an additional\n      <code>int</code> parameter. This parameter sets the maximum number of concurrent subscriptions\n      that <code>flatMap</code> will attempt to have to the Observables that the items emitted by the source\n      Observable map to. When it reaches this maximum number, it will wait for one of those Observables to\n      terminate before subscribing to another.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2)\"><code>flatMap(Func1,Func2)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMap(rx.functions.Func1,%20rx.functions.Func2,%20int)\"><code>flatMap(Func1,Func2,int)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/mergeMapIterable.png\" style=\"width:100%;\" alt=\"flatMapIterable\">\n     <figcaption><p>\n      The <code>flatMapIterable</code> variants pair up source items and generated\n      <code>Iterable</code>s rather than source items and generated Observables, but otherwise work\n      in much the same way.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMapIterable(rx.functions.Func1)\"><code>flatMapIterable(Func1)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#flatMapIterable(rx.functions.Func1,%20rx.functions.Func2)\"><code>flatMapIterable(Func1,Func2)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/concatMap.png\" style=\"width:100%;\" alt=\"concatMap\">\n     <figcaption><p>\n      There is also a <code>concatMap</code> operator, which is like the simpler version of the\n      <code>flatMap</code> operator, but it concatenates rather than merges the resulting\n      Observables in order to generate its own sequence.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#concatMap(rx.functions.Func1)\"><code>concatMap(Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/switchMap.png\" style=\"width:100%;\" alt=\"switchMap\">\n     <figcaption><p>\n      RxJava also implements the <code>switchMap</code> operator. It behaves much like\n      <code>flatMap</code>, except that whenever a new item is emitted by the source Observable, it\n      will unsubscribe to and stop mirroring the Observable that was generated from the\n      previously-emitted item, and begin only mirroring the current one.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#switchMap(rx.functions.Func1)\"><code>switchMap(Func1)</code></a></li>\n     </ul></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/St.split.png\" style=\"width:100%;\" alt=\"split\">\n     <figcaption><p>\n      In the distinct <code>StringObservable</code> class (not part of RxJava by default) there is also a\n      <code>split</code> operator that converts an Observable of Strings into an Observable of Strings that\n      treats the source sequence as a stream and splits it on a specified regex boundary, then merges the\n      results of this split.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>concatMap concatMapDelayError concatMapEager concatMapEagerDelayError concatMapIterable flatMap flatMapIterable switchMap switchMapDelayError</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>concatMap concatMapObserver flatMap flatMapFirst flatMapLatest flatMapObserver flatMapWithMaxConcurrency for forIn manySelect selectConcat selectConcatObserver selectMany selectManyObserver selectSwitch selectSwitchFirst selectWithMatchConcurrent</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n<!--\n TODO: flatMapFirst, flatMapWithMaxConcurrency, selectSwitchFirst, selectWithMaxConcurrent\n https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmapfirst.md\n https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmapwithmaxconcurrent.md\n -->\n    <p>\n     RxJS has a wealth of operators that perform\n     <span class=\"operator\">FlatMap</span>-like operations. In RxJS, the functions that transform\n     items emitted by the source Observable into Observables typically take as parameters both the\n     item and the index of the item in the Observable sequence.\n    </p>\n    <figure class=\"variant\">\n     <img src=\"images/flatMap.png\" style=\"width:100%;\" alt=\"flatMap\">\n     <figcaption><p>\n      RxJS implements the basic <code>flatMap</code> operator. It has a variant that allows you to\n      apply a transformative function (an optional second parameter to <code>flatMap</code>) to the\n      items emitted by the Observables generated for each item in the source Observable, before\n      merging and emitting those items.\n     </p><p>\n      <code>flatMap</code> works just as well if the function you provide transforms items from the\n      source Observables into Observables, into Promises, or into arrays.\n     </p><p>\n      &#x201C;<code>selectMany</code>&#x201D; is an alias for <code>flatMap</code>.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable\n    .range(1, 2)\n    .selectMany(function (x) {\n        return Rx.Observable.range(x, 2);\n    });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div><div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 2\nNext: 3\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\n// Using a promise\nvar source = Rx.Observable.of(1,2,3,4)\n    .selectMany(function (x, i) {\n        return Promise.resolve(x + i);\n    });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div><div class=\"output\"><pre>\nNext: 1\nNext: 3\nNext: 5\nNext: 7\nCompleted</pre></div>\n     <div class=\"code javascript\"><pre>\n// Using an array\nRx.Observable.of(1,2,3)\n  .flatMap(\n    function (x, i) { return [x,i]; },\n    function (x, y, ix, iy) { return x + y + ix + iy; }\n  );\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div><div class=\"output\"><pre>\nNext: 2\nNext: 2\nNext: 5\nNext: 5\nNext: 8\nNext: 8\nCompleted</pre></div>\n     <p><code>flatMap</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/flatMapLatest.png\" style=\"width:100%;\" alt=\"flatMapLatest\">\n     <figcaption><p>\n      The <code>flatMapLatest</code> operator behaves much like the standard\n      <span class=\"operator\">FlatMap</span> operator, except that whenever a new item is emitted\n      by the source Observable, it will unsubscribe to and stop mirroring the Observable that was\n      generated from the previously-emitted item, and begin only mirroring the current one.\n     </p><p>\n      &#x201C;<code>selectSwitch</code>&#x201D; is an alias for <code>flatMapLatest</code>.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable\n    .range(1, 2)\n    .flatMapLatest(function (x) {\n        return Rx.Observable.range(x, 2);\n    });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div><div class=\"output\"><pre>\nNext: 1\nNext: 2\nNext: 3\nCompleted</pre></div>\n     <p><code>flatMapLatest</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/flatMapObserver.png\" style=\"width:100%;\" alt=\"flatMapObserver\">\n     <figcaption><p>\n      <code>flatMapObserver</code> creates (and flattens) a new Observable for each item <em>and\n      notification</em> from the source Observable. It accepts a different transformation function\n      to respond to <code>onNext</code>, <code>onError</code>, and <code>onCompleted</code>\n      notifications and to return an Observable for each.\n     </p><p>\n      &#x201C;<code>selectManyObserver</code>&#x201D; is an alias for <code>flatMapObserver</code>.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(1, 3)\n    .flatMapObserver(\n        function (x, i) {\n            return Rx.Observable.repeat(x, i);\n        },\n        function (err) {\n            return Rx.Observable.return(42);\n        },\n        function () {\n            return Rx.Observable.empty();\n        });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div><div class=\"output\"><pre>\nNext: 2\nNext: 3\nNext: 3\nCompleted</pre></div>\n     <p><code>flatMapObserver</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/concatMap.png\" style=\"width:100%;\" alt=\"concatMap\">\n     <figcaption><p>\n      There is also a <code>concatMap</code> operator, which is like the <code>flatMap</code>\n      operator, but it concatenates rather than merges the resulting Observables in order to\n      generate its own sequence.\n     </p><p>\n      As with <code>flatMap</code>, <code>concatMap</code> works just as well if the function you\n      provide transforms items from the source Observables into Observables, into Promises, or into\n      arrays.\n     </p>\n     <p>&#x201C;<code>selectConcat</code>&#x201D; is an alias for <code>concatMap</code>.</p>\n     <p><code>concatMap</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/for.png\" style=\"width:100%;\" alt=\"for\">\n     <figcaption><p>\n      The <code>for</code> operator (and its alias, <code>forIn</code>) is very similar to\n      <code>concatMap</code>, though it has a converse flexibility. While <code>concatMap</code>\n      operates on an Observable source and can use Observable, Promise, or array intermediaries to\n      generate its output sequence; <code>for</code> always uses Observables as its intermediaries,\n      but can operate on a source that is either an Observable, a Promise, or an array.\n     </p>\n     <p><code>concatMap</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.experimental.js</code> (requires either <code>rx.js</code>, <code>rx.compat.js</code>, <code>rx.lite.js</code>, or <code>rx.lite.compat.js</code>)</li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/concatMapObserver.png\" style=\"width:100%;\" alt=\"concatMapObserver\">\n     <figcaption><p>\n      There is also a <code>concatMapObserver</code> operator, which is like the\n      <code>flatMapObserver</code> operator, in that it creates Observables to merge from both the\n      emissions and terminal notifications of the source Observable, but it concatenates rather than\n      merges these resulting Observables in order to generate its own sequence.\n     </p><p>\n      &#x201C;<code>selectConcatObserver</code>&#x201D; is an alias for\n      <code>concatMapObserver</code>.\n     </p>\n     <p><code>concatMapObserver</code> is found in each of the following distributions:</p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.compat.js</code></li>\n     </ul>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/manySelect.png\" style=\"width:100%;\" alt=\"manySelect\">\n     <figcaption><p>\n      The <code>manySelect</code> operator is often described as a &#x201C;comonadic bind.&#x201D; If that clears\n      things up for you, you&#x2019;re welcome. Elsewise, here&#x2019;s an explanation:\n     </p><p>\n      <code>manySelect</code> internally transforms each item emitted by the source Observable into an\n      Observable that emits that item and all items subsequently emitted by the source Observable, in the\n      same order. So, for example, it internally transforms an Observable that emits the numbers 1,2,3 into\n      three Observables: one that emits 1,2,3, one that emits 2,3, and one that emits 3.\n     </p><p>\n      Then <code>manySelect</code> passes each of these Observables into a function that you provide, and emits,\n      as the emissions from the Observable that <code>manySelect</code> returns, the return values from those\n      function calls.\n     </p><p>\n      In this way, each item emitted by the resulting Observable is a function of the corresponding item in\n      the source Observable and all of the items emitted by the source Observable after it.\n     </p><p>\n      <code>manySelect</code> is found in each of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.experimental.js</code></li>\n     </ul>\n     <p>\n      <code>manySelect</code> requires one of the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n     <h4>See Also</h4>\n     <ul>\n      <li><a href=\"https://social.msdn.microsoft.com/Forums/en-US/e70fe8b6-6d9d-486a-a8d0-c1bc66551ded/what-does-the-new-manyselect-operator-do?forum=rx\"><cite>Microsoft Developer Network</cite>: &#x201C;What does the new ManySelect operator do?&#x201D;</a></li>\n     </ul>\n     </figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>concatMap flatMap flatMapIterable switchMap</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>ManySelect SelectMany</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n    <h4>See Also</h4>\n    <ul>\n     <li><a href=\"https://social.msdn.microsoft.com/Forums/en-US/e70fe8b6-6d9d-486a-a8d0-c1bc66551ded/what-does-the-new-manyselect-operator-do?forum=rx\"><cite>Microsoft Developer Network</cite>: &#x201C;What does the new ManySelect operator do?&#x201D;</a></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>flatMap flatMapTo selectMany flatMapLatest concatMap concatMapTo</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>flatMap</code>.\n    </p>\n    <p>\n    Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/flatMap/flatMap.php\n\n$loop      = React\\EventLoop\\Factory::create();\n$scheduler = new Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$observable = Rx\\Observable::range(1, 5);\n\n$selectManyObservable = $observable-&gt;flatMap(function ($value) {\n    return Rx\\Observable::range(1, $value);\n});\n\n$disposable = $selectManyObservable-&gt;subscribe($stdoutObserver, $scheduler);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 1\nNext value: 2\nNext value: 1\nNext value: 2\nNext value: 1\nNext value: 3\nNext value: 2\nNext value: 1\nNext value: 3\nNext value: 2\nNext value: 4\nNext value: 3\nNext value: 4\nNext value: 5\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>flatMapTo</code>.\n    </p>\n    <p>\n    Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/concat/flatMapTo.php\n\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\n\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>selectMany</code>.\n    </p>\n    <p>\n    Alias for flatMap\n    </p>\n\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>flatMapLatest</code>.\n    </p>\n    <p>\n    Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.  Transform the items emitted by an Observable into Observables, and mirror those items emitted by the most-recently transformed Observable.  The flatMapLatest operator is similar to the flatMap and concatMap methods described above, however, rather than emitting all of the items emitted by all of the Observables that the operator generates by transforming items from the source Observable, flatMapLatest instead emits items from each such transformed Observable only until the next such Observable is emitted, then it ignores the previous one and begins emitting items emitted by the new one.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/flatMap/flatMapLatest.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$source = \\Rx\\Observable::range(1, 3)\n    -&gt;flatMapLatest(function ($x) {\n        return \\Rx\\Observable::fromArray([$x . &apos;a&apos;, $x . &apos;b&apos;]);\n    });\n\n$source-&gt;subscribe($stdoutObserver, $scheduler);\n\n$loop-&gt;run();\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1a\nNext value: 2a\nNext value: 3a\nNext value: 3b\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>concatMap</code>.\n    </p>\n    <p>\n    Projects each element of an observable sequence to an observable sequence and concatenates the resulting observable sequences into one observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/concat/concatMap.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$source = Rx\\Observable::range(0, 5)\n    -&gt;concatMap(function ($x, $i) use ($scheduler) {\n        return \\Rx\\Observable::interval(100, $scheduler)\n            -&gt;take($x)\n            -&gt;map(function () use ($i) {\n                return $i;\n            });\n    });\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 1\nNext value: 2\nNext value: 2\nNext value: 3\nNext value: 3\nNext value: 3\nNext value: 4\nNext value: 4\nNext value: 4\nNext value: 4\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>concatMapTo</code>.\n    </p>\n    <p>\n    Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/concat/concatMapTo.php\n\n$loop      = \\React\\EventLoop\\Factory::create();\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$obs = \\Rx\\Observable::interval(100, $scheduler)\n    -&gt;take(3)\n    -&gt;mapWithIndex(function ($i) {\n        return $i;\n    });\n\n$source = Rx\\Observable::range(0, 5)\n    -&gt;concatMapTo($obs);\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0\nNext value: 1\nNext value: 2\nNext value: 3\nNext value: 4\nNext value: 5\nNext value: 6\nNext value: 7\nNext value: 8\nNext value: 9\nNext value: 10\nNext value: 11\nNext value: 12\nNext value: 13\nNext value: 14\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>concat_all expand flat_map for_in many_select select_many select_switch</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>flat_map flat_map_with_index</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>concatMap flatMap flatMapIterable flatMapIterableWith flatMapWith switchMap</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>flatMap flatMapWithIndex flatMapFirst flatMapLatest</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"FlatMap"},{"path":"/documentation/operators/average.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#mathematical\">Mathematical and Aggregate</a></li>\n  <li class=\"active\">Average</li>\n</ol>\n\n   <h1>Average</h1>\n   <h3>calculates the average of numbers emitted by an Observable and emits this average</h3>\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"average\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Average</span> operator operates on an Observable that emits numbers\n     (or items that can be evaluated as numbers), and emits a single value: the average of all of\n     the numbers emitted by the source Observable.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/sum.html\"><span class=\"operator\">Sum</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/07_Aggregation.html#MaxAndMin\"><cite>Introduction to Rx</cite>: Min, Max, Sum, and Average</a></li>\n    <li><a href=\"http://rxmarbles.com/#average\">RxMarbles: <code>average</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>average</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>averageDouble averageFloat averageInteger averageLong</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxGroovy, this operator is not in the ReactiveX core, but is part of the distinct\n      <code>rxjava-math</code> module, where it is implemented with four type-specific operators:\n      <code>averageDouble</code>, <code>averageFloat</code>, <code>averageInteger</code>, and\n      <code>averageLong</code>. The following example shows how these operators work:\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\ndef myObservable = Observable.create({ aSubscriber -&gt;\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(4);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(3);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(2);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(1);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onCompleted();\n});\n\nObservable.averageInteger(myObservable).subscribe(\n  { println(it); },                  // onNext\n  { println(&quot;Error encountered&quot;); }, // onError\n  { println(&quot;Sequence complete&quot;); }  // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n2\nSequence complete</pre></div>\n     <figure>\n      <img src=\"images/average.f.png\" style=\"width:100%;\" alt=\"average\">\n      <figcaption><p>\n       You can also average not the items themselves but the results of a function applied to each\n       item, as in the illustration above, which emits the average number of sides on the figures\n       emitted by the source Observable.\n      </p></figcaption>\n     </figure>\n     <p>\n      This operator will fail with an <code>IllegalArgumentException</code> if the source Observable\n      does not emit any items.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>averageDouble averageFloat averageInteger averageLong</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      This operator is not in the RxJava core, but is part of the distinct <code>rxjava-math</code>\n      module, where it is implemented with four type-specific operators: <code>averageDouble</code>,\n      <code>averageFloat</code>, <code>averageInteger</code>, and <code>averageLong</code>.\n     </p>\n     <figure>\n      <img src=\"images/average.f.png\" style=\"width:100%;\" alt=\"average\">\n      <figcaption><p>\n       You can also average not the items themselves but the results of a function applied to each\n       item, as in the illustration above, which emits the average number of sides on the figures\n       emitted by the source Observable.\n      </p></figcaption>\n     </figure>\n     <p>\n      This operator will fail with an <code>IllegalArgumentException</code> if the source Observable\n      does not emit any items.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>average</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/average.png\" style=\"width:100%;\" alt=\"average\">\n      <figcaption><p>\n       RxJS implements this operator as <code>average</code>. The following code sample shows how\n       to use it:\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 9).average();\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n      <div class=\"output\"><pre>\nNext: 4\nCompleted</pre></div></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/average.f.png\" style=\"width:100%;\" alt=\"average\">\n      <figcaption><p>\n       You can also average not the items themselves but the results of a function applied to each\n       item, as in the illustration above, which emits the average number of sides on the figures\n       emitted by the source Observable.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar arr = [\n    { value: 1 },\n    { value: 2 },\n    { value: 3 }\n];\n\nvar source = Rx.Observable.fromArray(arr).average(function (x) {\n    return x.value;\n});\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n      <div class=\"output\"><pre>\nNext: 2\nCompleted</pre></div></figcaption>\n     </figure>\n     <p>\n      <code>average</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.aggregates.js</code></li>\n     </ul>\n     <p>\n      It requires one of the following:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>averageDouble averageFloat averageInteger averageLong</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Average</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>average</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>average</code>.\n    </p>\n    <p>\n    Computes the average of an observable sequence of values.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/average/average.php\n\n$source = Rx\\Observable::range(0, 9)-&gt;average();\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 4\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>average</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>average</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Average"},{"path":"/documentation/operators/timer.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#creating\">Creating</a></li>\n  <li class=\"active\">Timer</li>\n</ol>\n\n<h1>Timer</h1>\n<h3>create an Observable that emits a particular item after a given delay</h3>\n\n<figure>\n <img src=\"images/timer.c.png\" style=\"width:100%;\" alt=\"Timer\">\n <figcaption><p>\n  The <span class=\"operator\">Timer</span> operator creates an Observable that emits one particular\n  item after a span of time that you specify.\n </p></figcaption>\n</figure>\n\n<h4>See Also</h4>\n<ul>\n <li><a href=\"http://reactivex.io/documentation/operators/from.html\"><span class=\"operator\">From</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/interval.html\"><span class=\"operator\">Interval</span></a></li>\n <li><a href=\"http://reactivex.io/documentation/operators/just.html\"><span class=\"operator\">Just</span></a></li>\n <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/04_CreatingObservableSequences.html#ObservableTimer\"><cite>Introduction to Rx</cite>: Timer</a></li>\n <li><a href=\"http://rxwiki.wikidot.com/101samples#toc34\"><cite>101 Rx Samples</cite>: Timer &#x2014; Simple</a></li>\n</ul>\n\n<h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>timer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n    <p>RxGroovy implements this operator as <code>timer</code>.</p>\n    <figure class=\"variant\">\n     <img src=\"images/timer.png\" style=\"width:100%;\" alt=\"timer\">\n     <figcaption><p>\n      <code>timer</code> returns an Observable that emits a single number zero after a delay period you specify.\n     </p><p>\n      <code>timer</code> by default operates on the <code>computation</code>\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, or you can override this by passing in a Scheduler as a final\n      parameter.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit)\"><code>timer(long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>timer(long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>timer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>RxJava implements this operator as <code>timer</code>.</p>\n    <figure class=\"variant\">\n     <img src=\"images/timer.png\" style=\"width:100%;\" alt=\"timer\">\n     <figcaption><p>\n      <code>timer</code> returns an Observable that emits a single number zero after a delay period you specify.\n     </p><p>\n      <code>timer</code> by default operates on the <code>computation</code>\n      <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, or you can override this by passing in a Scheduler as a final\n      parameter.\n     </p>\n     <ul>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit)\"><code>timer(long,TimeUnit)</code></a></li>\n      <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#timer(long,%20java.util.concurrent.TimeUnit,%20rx.Scheduler)\"><code>timer(long,TimeUnit,Scheduler)</code></a></li>\n     </ul></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>timer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>timer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n    <p>In RxJS there are two versions of the <code>timer</code> operator.</p>\n    <figure class=\"variant\">\n     <img src=\"images/timer.j1.png\" style=\"width:100%;\" alt=\"timer\">\n     <figcaption><p>\n      The first version of <code>timer</code> returns an Observable that emits a single item\n      after a delay period you specify. You can specify the delay either as a <code>Date</code>\n      object (which means, delay until that absolute moment) or as an integer (which means, delay\n      that many milliseconds).\n     </p>\n     </figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/timer.j2.png\" style=\"width:100%;\" alt=\"timer\">\n     <figcaption><p>\n      There is also a version of <code>timer</code> that returns an Observable that emits a single\n      item after a specified delay, and then emits items periodically thereafter on a specified\n      periodicity. In this way it behaves a bit more like the\n      <a href=\"http://reactivex.io/documentation/operators/interval.html\"><span class=\"operator\">Interval</span></a> operator.\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.timer(200, 100)\n    .timeInterval()\n    .pluck(&apos;interval&apos;)\n    .take(3);\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div><div class=\"output\"><pre>\nNext: 200\nNext: 100\nNext: 100\nCompleted</pre></div>\n     </figcaption>\n    </figure>\n    <p>\n     <code>timer</code> by default operates on the <code>timeout</code>\n     <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>, or you can override this by passing in a Scheduler as a final\n     parameter.\n    </p><p>\n     <code>timer</code> is found in each of the following distributions:\n    </p>\n    <ul>\n     <li><code>rx.all.js</code></li>\n     <li><code>rx.all.compat.js</code></li>\n     <li><code>rx.time.js</code> (requires either <code>rx.js</code> or <code>rx.compat.js</code>)</li>\n     <li><code>rx.lite.js</code></li>\n     <li><code>rx.lite.compat.js</code></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>timer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Timer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n    <h4>See Also</h4>\n    <ul>\n     <li><a href=\"http://dragablz.net/2015/06/09/dealing-with-rx-exception-failed-to-start-monitoring-system-clock-changes/\">Dealing with Rx Exception: &#x201C;Failed to start monitoring system clock changes&#x201D;</a> <cite>Dragablz</cite></li>\n    </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>timer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>timer</code>.\n    </p>\n    <p>\n    Returns an observable sequence that produces a value after dueTime has elapsed.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/timer/timer.php\n\n$loop = new \\React\\EventLoop\\StreamSelectLoop();\n\n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop);\n\n$source = \\Rx\\Observable::timer(200, $scheduler);\n\n$source-&gt;subscribe($createStdoutObserver());\n\n$loop-&gt;run();\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 0\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>timer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>timer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>timer</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Timer"},{"path":"/documentation/operators/sum.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#mathematical\">Mathematical and Aggregate</a></li>\n  <li class=\"active\">Sum</li>\n</ol>\n\n   <h1>Sum</h1>\n   <h3>calculates the sum of numbers emitted by an Observable and emits this sum</h3>\n\n   <figure class=\"rxmarbles-figure\">\n    <rx-marbles key=\"sum\"></rx-marbles>\n    <figcaption><p>\n     The <span class=\"operator\">Sum</span> operator operates on an Observable that emits numbers\n     (or items that can be evaluated as numbers), and emits a single value: the sum of all of the\n     numbers emitted by the source Observable.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/average.html\"><span class=\"operator\">Average</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/07_Aggregation.html#MaxAndMin\"><cite>Introduction to Rx</cite>: Min, Max, Sum, and Average</a></li>\n    <li><a href=\"http://rxmarbles.com/#sum\">RxMarbles: <code>sum</code></a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code>sum</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n    <p>\n     <span style=\"color:#f00\">TBD</span>\n    </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>sumDouble sumFloat sumInteger sumLong StringObservable.join StringObservable.stringConcat</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      In RxGroovy, this operator is not in the ReactiveX core, but is part of the distinct\n      <code>rxjava-math</code> module, where it is implemented with four type-specific operators:\n      <code>sumDouble</code>, <code>sumFloat</code>, <code>sumInteger</code>, and\n      <code>sumLong</code>. The following example shows how these operators work:\n     </p>\n     <h4>Sample Code</h4>\n     <div class=\"code groovy\"><pre>\ndef myObservable = Observable.create({ aSubscriber -&gt;\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(4);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(3);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(2);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(1);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onCompleted();\n});\n\nObservable.sumInteger(myObservable).subscribe(\n  { println(it); },                  // onNext\n  { println(&quot;Error encountered&quot;); }, // onError\n  { println(&quot;Sequence complete&quot;); }  // onCompleted\n);</pre></div>\n     <div class=\"output\"><pre>\n10\nSequence complete</pre></div>\n     <figure>\n      <img src=\"images/sum.f.png\" style=\"width:100%;\" alt=\"sum\">\n      <figcaption><p>\n       You can also sum not the items themselves but the results of a function applied to each\n       item, as in the illustration above, which emits the sum of the number of sides on the figures\n       emitted by the source Observable.\n      </p></figcaption>\n     </figure>\n    <figure class=\"variant\">\n     <img src=\"images/St.stringConcat.png\" style=\"width:100%;\" alt=\"stringConcat\">\n     <figcaption><p>\n      In the distinct <code>StringObservable</code> class (not part of RxGroovy by default) there is also a\n      <code>stringConcat</code> operator that converts an Observable that emits a sequence of strings into an\n      Observable that emits a single string that represents the concatenation of them all.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/St.join.png\" style=\"width:100%;\" alt=\"join\">\n     <figcaption><p>\n      In the distinct <code>StringObservable</code> class (not part of RxGroovy by default) there is also a\n      <code>join</code> operator that converts an Observable that emits a sequence of strings into an\n      Observable that emits a single string that represents the concatenation of each of them, delimited by a\n      string of your choosing.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>sumDouble sumFloat sumInteger sumLong StringObservable.join StringObservable.stringConcat</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      This operator is not in the RxJava core, but is part of the distinct <code>rxjava-math</code>\n      module, where it is implemented with four type-specific operators: <code>sumDouble</code>,\n      <code>sumFloat</code>, <code>sumInteger</code>, and <code>sumLong</code>.\n     </p>\n     <figure>\n      <img src=\"images/sum.f.png\" style=\"width:100%;\" alt=\"sum\">\n      <figcaption><p>\n       You can also sum not the items themselves but the results of a function applied to each\n       item, as in the illustration above, which emits the sum of the number of sides on the figures\n       emitted by the source Observable.\n      </p></figcaption>\n     </figure>\n    <figure class=\"variant\">\n     <img src=\"images/St.stringConcat.png\" style=\"width:100%;\" alt=\"stringConcat\">\n     <figcaption><p>\n      In the distinct <code>StringObservable</code> class (not part of RxJava by default) there is also a\n      <code>stringConcat</code> operator that converts an Observable that emits a sequence of strings into an\n      Observable that emits a single string that represents the concatenation of them all.\n     </p></figcaption>\n    </figure>\n    <figure class=\"variant\">\n     <img src=\"images/St.join.png\" style=\"width:100%;\" alt=\"join\">\n     <figcaption><p>\n      In the distinct <code>StringObservable</code> class (not part of RxJava by default) there is also a\n      <code>join</code> operator that converts an Observable that emits a sequence of strings into an\n      Observable that emits a single string that represents the concatenation of each of them, delimited by a\n      string of your choosing.\n     </p></figcaption>\n    </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>sum</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/sum.png\" style=\"width:100%;\" alt=\"sum\">\n      <figcaption><p>\n       RxJS implements this operator as <code>sum</code>. The following code sample shows how\n       to use it:\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(0, 9).sum();\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n      <div class=\"output\"><pre>\nNext: 45\nCompleted</pre></div></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/sum.f.png\" style=\"width:100%;\" alt=\"sum\">\n      <figcaption><p>\n       You can also sum not the items themselves but the results of a function applied to each\n       item, as in the illustration above, which emits the sum number of sides on the figures\n       emitted by the source Observable.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar arr = [\n    { value: 1 },\n    { value: 2 },\n    { value: 3 }\n];\n\nvar source = Rx.Observable.fromArray(arr).sum(function (x) {\n    return x.value;\n});\n\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(&apos;Next: &apos; + x);\n    },\n    function (err) {\n        console.log(&apos;Error: &apos; + err);\n    },\n    function () {\n        console.log(&apos;Completed&apos;);\n    });</pre></div>\n      <div class=\"output\"><pre>\nNext: 6\nCompleted</pre></div></figcaption>\n     </figure>\n     <p>\n      <code>sum</code> is found in the following distributions:\n     </p>\n     <ul>\n      <li><code>rx.all.js</code></li>\n      <li><code>rx.all.compat.js</code></li>\n      <li><code>rx.aggregates.js</code></li>\n     </ul>\n     <p>\n      It requires one of the following:\n     </p>\n     <ul>\n      <li><code>rx.js</code></li>\n      <li><code>rx.compat.js</code></li>\n      <li><code>rx.lite.js</code></li>\n      <li><code>rx.lite.compat.js</code></li>\n     </ul>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>sumDouble sumFloat sumInteger sumLong</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Sum</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>sum</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>sum</code>.\n    </p>\n    <p>\n    Computes the sum of a sequence of values\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/sum/sum.php\n\n$source = Rx\\Observable::range(1, 10)\n    -&gt;sum();\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 55\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>sum</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>sum</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>product sum</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Sum"},{"path":"/documentation/operators/catch.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#error\">Error Handling</a></li>\n  <li class=\"active\">Catch</li>\n</ol>\n\n   <h1>Catch</h1>\n   <h3>recover from an onError notification by continuing the sequence without error</h3>\n   <figure>\n    <img src=\"images/Catch.png\" style=\"width:100%;\" alt=\"Catch\">\n    <figcaption><p>\n     The <span class=\"operator\">Catch</span> operator intercepts an <code>onError</code>\n     notification from the source Observable and, instead of passing it through to any\n     observers, replaces it with some other item or sequence of items, potentially allowing\n     the resulting Observable to terminate normally or not to terminate at all.\n    </p><p>\n     There are several variants of the <span class=\"operator\">Catch</span> operator, and a\n     variety of names used by different ReactiveX implementations to describe this operation,\n     as you can see in the sections below.\n    </p><p>\n     In some ReactiveX implementations, there is an operator called something like\n     &#x201C;OnErrorResumeNext&#x201D; that behaves like a <span class=\"operator\">Catch</span>\n     variant: specifically reacting to an <code>onError</code> notification from the source\n     Observable. In others, there is an operator with that name that behaves more like a\n     <span class=\"operator\">Concat</span> variant: performing the concatenation operation\n     regardless of whether the source Observable terminates normally or with an error. This is\n     unfortunate and confusing, but something we have to live with.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/concat.html\"><span class=\"operator\">Concat</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/retry.html\"><span class=\"operator\">Retry</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/11_AdvancedErrorHandling.html#Catch\"><cite>Introduction to Rx</cite>: Catch</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>catch*</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/catchX.png\" style=\"width:100%;\" alt=\"catch*\">\n      <figcaption><p>\n       RxClojure implements this operator as <code>catch*</code>. This operator takes two arguments,\n       both of which are functions of your choosing that take the exception raised by\n       <code>onError</code> as their single parameters. The first function is a predicate. If it\n       returns <code>false</code>, <code>catch*</code> passes the <code>onError</code> notification\n       unchanged to its observers. If it returns <code>true</code>, however, <code>catch*</code>\n       swallows the error, calls the second function (which returns an Observable), and passes along\n       the emissions and notifications from this new Observable to its observers.\n      </p><p>\n       You may replace the first function parameter (the predicate that evaluates the exception)\n       with a class object representing a variety of exception. If you do this, <code>catch*</code>\n       will treat it as equivalent to predicate that performs an <code>instance?</code> check to see\n       if the exception from the <code>onError</code> notification is an instance of the class\n       object. In other words:\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code clojure\"><pre>\n(-&gt;&gt; my-observable\n  (catch* IllegalArgumentException\n          (fn [e] (rx/return 1)))\n)</pre></div>\n      <p>\n       is equivalent to:\n      </p>\n      <div class=\"code clojure\"><pre>\n(-&gt;&gt; my-observable\n  (catch* (fn [e] (-&gt; instance? IllegalArgumentException e))\n          (fn [e] (rx/return 1)))\n)</pre></div></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxCpp does not implement the <span class=\"operator\">Catch</span> operator.\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>onErrorResumeNext onErrorReturn onExceptionResumeNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxGroovy implements the <span class=\"operator\">Catch</span> operator in the same way as\n      does RxJava. There are three distinct operators that provide this functionality:\n     </p>\n     <dl>\n      <dt><code>onErrorReturn</code></dt>\n       <dd>instructs an Observable to emit a particular item when it encounters an error, and then terminate normally</dd>\n      <dt><code>onErrorResumeNext</code></dt>\n       <dd>instructs an Observable to begin emitting a second Observable sequence if it encounters an error</dd>\n      <dt><code>onExceptionResumeNext</code></dt>\n       <dd>instructs an Observable to continue emitting items after it encounters an exception (but not another variety of throwable)</dd>\n     </dl>\n     <h4><code>onErrorReturn</code></h4>\n     <figure>\n      <img src=\"images/onErrorReturn.png\" style=\"width:100%;\" alt=\"onErrorReturn\">\n      <figcaption><p>\n       The <code>onErrorReturn</code> method returns an Observable that mirrors the behavior of the\n       source Observable, unless that Observable invokes <code>onError</code> in which case, rather\n       than propagating that error to the observer, <code>onErrorReturn</code> will instead emit a\n       specified item and invoke the observer&#x2019;s <code>onCompleted</code> method, as shown in\n       the following sample code:\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\ndef myObservable = Observable.create({ aSubscriber -&gt;\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;Four&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;Three&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;Two&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;One&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onError();\n});\n\nmyObservable.onErrorReturn({ return(&apos;Blastoff!&apos;); }).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\nFour\nThree\nTwo\nOne\nBlastoff!\nSequence complete</pre></div>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorReturn(rx.functions.Func1)\"><code>onErrorReturn(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>onErrorResumeNext</code></h4>\n     <figure>\n      <img src=\"images/onErrorResumeNext.png\" style=\"width:100%;\" alt=\"onErrorResumeNext\">\n      <figcaption><p>\n       The <code>onErrorResumeNext</code> method returns an Observable that mirrors the behavior of\n       the source Observable, unless that Observable invokes <code>onError</code> in which case,\n       rather than propagating that error to the observer, <code>onErrorResumeNext</code> will\n       instead begin mirroring a second, backup Observable, as shown in the following sample code:\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code groovy\"><pre>\ndef myObservable = Observable.create({ aSubscriber -&gt;\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;Three&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;Two&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;One&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onError();\n});\ndef myFallback = Observable.create({ aSubscriber -&gt;\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;0&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;1&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onNext(&apos;2&apos;);\n  if(false == aSubscriber.isUnsubscribed()) aSubscriber.onCompleted();\n});\n\nmyObservable.onErrorResumeNext(myFallback).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\nThree\nTwo\nOne\n0\n1\n2\nSequence complete</pre></div>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorResumeNext(rx.functions.Func1)\"><code>onErrorResumeNext(Func1)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorResumeNext(rx.Observable)\"><code>onErrorResumeNext(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>onExceptionResumeNext</code></h4>\n     <figure>\n      <img src=\"images/onExceptionResumeNextViaObservable.png\" style=\"width:100%;\" alt=\"onExceptionResumeNext\">\n      <figcaption><p>\n       Much like <code>onErrorResumeNext</code> method, this returns an Observable that mirrors the\n       behavior of the source Observable, unless that Observable invokes <code>onError</code> in\n       which case, if the Throwable passed to <code>onError</code> is an Exception, rather than\n       propagating that Exception to the observer, <code>onExceptionResumeNext</code> will instead\n       begin mirroring a second, backup Observable. If the Throwable is not an Exception, the\n       Observable returned by <code>onExceptionResumeNext</code> will propagate it to its\n       observer&#x2019;s <code>onError</code> method and will not invoke its backup Observable.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onExceptionResumeNext(rx.Observable)\"><code>onExceptionResumeNext(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>onErrorResumeNext onErrorReturn onExceptionResumeNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJava implements the <span class=\"operator\">Catch</span> operator with three distinct\n      operators:\n     </p>\n     <dl>\n      <dt><code>onErrorReturn</code></dt>\n       <dd>instructs an Observable to emit a particular item when it encounters an error, and then terminate normally</dd>\n      <dt><code>onErrorResumeNext</code></dt>\n       <dd>instructs an Observable to begin emitting a second Observable sequence if it encounters an error</dd>\n      <dt><code>onExceptionResumeNext</code></dt>\n       <dd>instructs an Observable to continue emitting items after it encounters an exception (but not another variety of throwable)</dd>\n     </dl>\n     <h4><code>onErrorReturn</code></h4>\n     <figure>\n      <img src=\"images/onErrorReturn.png\" style=\"width:100%;\" alt=\"onErrorReturn\">\n      <figcaption><p>\n       The <code>onErrorReturn</code> method returns an Observable that mirrors the behavior of the\n       source Observable, unless that Observable invokes <code>onError</code> in which case, rather\n       than propagating that error to the observer, <code>onErrorReturn</code> will instead emit a\n       specified item and invoke the observer&#x2019;s <code>onCompleted</code> method.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorReturn(rx.functions.Func1)\"><code>onErrorReturn(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>onErrorResumeNext</code></h4>\n     <figure>\n      <img src=\"images/onErrorResumeNext.png\" style=\"width:100%;\" alt=\"onErrorResumeNext\">\n      <figcaption><p>\n       The <code>onErrorResumeNext</code> method returns an Observable that mirrors the behavior of\n       the source Observable, unless that Observable invokes <code>onError</code> in which case,\n       rather than propagating that error to the observer, <code>onErrorResumeNext</code> will\n       instead begin mirroring a second, backup Observable.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorResumeNext(rx.functions.Func1)\"><code>onErrorResumeNext(Func1)</code></a></li>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onErrorResumeNext(rx.Observable)\"><code>onErrorResumeNext(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n     <h4><code>onExceptionResumeNext</code></h4>\n     <figure>\n      <img src=\"images/onExceptionResumeNextViaObservable.png\" style=\"width:100%;\" alt=\"onExceptionResumeNext\">\n      <figcaption><p>\n       Much like <code>onErrorResumeNext</code> method, this returns an Observable that mirrors the\n       behavior of the source Observable, unless that Observable invokes <code>onError</code> in\n       which case, if the Throwable passed to <code>onError</code> is an Exception, rather than\n       propagating that Exception to the observer, <code>onExceptionResumeNext</code> will instead\n       begin mirroring a second, backup Observable. If the Throwable is not an Exception, the\n       Observable returned by <code>onExceptionResumeNext</code> will propagate it to its\n       observer&#x2019;s <code>onError</code> method and will not invoke its backup Observable.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#onExceptionResumeNext(rx.Observable)\"><code>onExceptionResumeNext(Observable)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>onErrorResumeNext onErrorReturn onErrorReturnItem onExceptionResumeNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>catch onErrorResumeNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxJS implements the <span class=\"operator\">Catch</span> operator with two distinct\n      operators:\n     </p>\n     <dl>\n      <dt><code>catch</code></dt>\n       <dd>instructs an Observable to begin emitting a second Observable sequence if it encounters an error</dd>\n      <dt><code>onErrorResumeNext</code></dt>\n       <dd>instructs an Observable to begin emitting a second Observable sequence if it encounters an error or if the source Observable terminates normally</dd>\n     </dl>\n     <h4><code>catch</code></h4>\n     <figure>\n      <img src=\"images/catch.js.png\" style=\"width:100%;\" alt=\"catch\">\n      <figcaption><p>\n       <code>catch</code> is found in the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n     <h4><code>onErrorResumeNext</code></h4>\n     <figure>\n      <img src=\"images/onErrorResumeNext.js.png\" style=\"width:100%;\" alt=\"onErrorResumeNext\">\n      <figcaption><p>\n       This implementation borrows the confusing nomenclature from Rx.NET, in which\n       <code>onErrorResumeNext</code> switches to a back-up Observable both on an error <em>and</em>\n       on a normal, error-free termination of the source Observable.\n      </p>\n      <p>\n       <code>onErrorResumeNext</code> is found in the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>onErrorResumeNext onErrorReturn onExceptionResumeNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxKotlin implements the <span class=\"operator\">Catch</span> operator in the same way as\n      does RxJava. There are three distinct operators that provide this functionality:\n     </p>\n     <dl>\n      <dt><code>onErrorReturn</code></dt>\n       <dd>instructs an Observable to emit a particular item when it encounters an error, and then terminate normally</dd>\n      <dt><code>onErrorResumeNext</code></dt>\n       <dd>instructs an Observable to begin emitting a second Observable sequence if it encounters an error</dd>\n      <dt><code>onExceptionResumeNext</code></dt>\n       <dd>instructs an Observable to continue emitting items after it encounters an exception (but not another variety of throwable)</dd>\n     </dl>\n     <h4><code>onErrorReturn</code></h4>\n     <figure>\n      <img src=\"images/onErrorReturn.png\" style=\"width:100%;\" alt=\"onErrorReturn\">\n      <figcaption><p>\n       The <code>onErrorReturn</code> method returns an Observable that mirrors the behavior of the\n       source Observable, unless that Observable invokes <code>onError</code> in which case, rather\n       than propagating that error to the observer, <code>onErrorReturn</code> will instead emit a\n       specified item and invoke the observer&#x2019;s <code>onCompleted</code> method.\n      </p></figcaption>\n     </figure>\n     <h4><code>onErrorResumeNext</code></h4>\n     <figure>\n      <img src=\"images/onErrorResumeNext.png\" style=\"width:100%;\" alt=\"onErrorResumeNext\">\n      <figcaption><p>\n       The <code>onErrorResumeNext</code> method returns an Observable that mirrors the behavior of\n       the source Observable, unless that Observable invokes <code>onError</code> in which case,\n       rather than propagating that error to the observer, <code>onErrorResumeNext</code> will\n       instead begin mirroring a second, backup Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>onExceptionResumeNext</code></h4>\n     <figure>\n      <img src=\"images/onExceptionResumeNextViaObservable.png\" style=\"width:100%;\" alt=\"onExceptionResumeNext\">\n      <figcaption><p>\n       Much like <code>onErrorResumeNext</code> method, this returns an Observable that mirrors the\n       behavior of the source Observable, unless that Observable invokes <code>onError</code> in\n       which case, if the Throwable passed to <code>onError</code> is an Exception, rather than\n       propagating that Exception to the observer, <code>onExceptionResumeNext</code> will instead\n       begin mirroring a second, backup Observable. If the Throwable is not an Exception, the\n       Observable returned by <code>onExceptionResumeNext</code> will propagate it to its\n       observer&#x2019;s <code>onError</code> method and will not invoke its backup Observable.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>Catch OnErrorResumeNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      Rx.NET implements the <span class=\"operator\">Catch</span> operator with two distinct\n      operators:\n     </p>\n     <dl>\n      <dt><code>Catch</code></dt>\n       <dd>instructs an Observable to begin emitting a second Observable sequence if it encounters an error</dd>\n      <dt><code>OnErrorResumeNext</code></dt>\n       <dd>instructs an Observable to begin emitting a second Observable sequence if it encounters an error or if the source Observable terminates normally</dd>\n     </dl>\n     <h4><code>Catch</code></h4>\n     <figure>\n      <img src=\"images/Catch.png\" style=\"width:100%;\" alt=\"Catch\">\n      <figcaption><p>\n       The <code>Catch</code> operator has a variant that allows you to specify which sort of\n       Exception you want to catch. If you use that variant of the operator, any other Exceptions\n       will be passed through to the observer as if the <code>Catch</code> operator had not been\n       applied.\n      </p></figcaption>\n     </figure>\n     <h4><code>OnErrorResumeNext</code></h4>\n     <figure>\n      <img src=\"images/OnErrorResumeNext.net.png\" style=\"width:100%;\" alt=\"OnErrorResumeNext\">\n      <figcaption><p>\n       This implementation introduces a confusing nomenclature, in which in spite of its name\n       <code>OnErrorResumeNext</code> switches to a back-up Observable both on an error <em>and</em>\n       on a normal, error-free termination of the source Observable. It is therefore more like a\n       concatenation operator.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>catchError</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>catchError</code>.\n    </p>\n    <p>\n    Continues an observable sequence that is terminated by an exception with the next observable sequence.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/catch/catchError.php\n\n$obs2 = Rx\\Observable::just(42);\n\n$source = \\Rx\\Observable::error(new Exception(&quot;Some error&quot;))\n    -&gt;catchError(function (Exception $e, \\Rx\\Observable $sourceObs) use ($obs2) {\n        return $obs2;\n    });\n\n$subscription = $source-&gt;subscribe($stdoutObserver);\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 42\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>catch_exception on_error_resume_next</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      RxPY implements the <span class=\"operator\">Catch</span> operator with two distinct\n      operators:\n     </p>\n     <dl>\n      <dt><code>catch_exception</code></dt>\n       <dd>instructs an Observable, if it encounters an error, to begin emitting items from a set of other Observables, one Observable at a time, until one of those Observables terminates successfully</dd>\n      <dt><code>on_error_resume_next</code></dt>\n       <dd>instructs an Observable to concatenate items emitted by a set of other Observables, one Observable at a time, regardless of whether the source Observable or any subsequent Observable terminates with an error</dd>\n     </dl>\n     <h4><code>catch_exception</code></h4>\n     <figure>\n      <img src=\"images/catch_exception.png\" style=\"width:100%;\" alt=\"catch_exception\">\n      <figcaption><p>\n       You may pass <code>catch_exception</code> a set of back-up Observables either as individual\n       function parameters or as a single array of Observables. If it encounters an\n       <code>onError</code> notification from the source Observable, it will subscribe to and begin\n       mirroring the first of these back-up Observables. If this back-up Observable itself\n       issues an <code>onError</code> notification, <code>catch_exception</code> will swallow it\n       and switch over to the next back-up Observable. If any of these Observables issues an\n       <code>onCompleted</code> notification, <code>catch_exception</code> will pass this along\n       and will stop.\n      </p></figcaption>\n     </figure>\n     <h4><code>on_error_resume_next</code></h4>\n     <figure>\n      <img src=\"images/on_error_resume_next.png\" style=\"width:100%;\" alt=\"on_error_resume_next\">\n      <figcaption><p>\n       You may pass <code>on_error_resume_next</code> a set of back-up Observables either as\n       individual function parameters, as a single array of Observables, or as a factory function\n       that generates Observables. When the source Observable terminates, whether normally or with\n       an error, <code>on_error_resume_next</code> will subscribe to and begin mirroring the first\n       of these back-up Observables, and then will recursively continue this concatenation process\n       for each additional Observable until there are no more Observables to mirror, at which time\n       it will pass on the <code>onError</code> or <code>onCompleted</code> notification from the\n       last of these Observables.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>on_error_resume_next rescue_error</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      Rx.rb implements the <span class=\"operator\">Catch</span> operator with two distinct\n      operators:\n     </p>\n     <dl>\n      <dt><code>rescue_error</code></dt>\n       <dd>instructs an Observable to begin emitting items from another Observable, or from an Observable returned from an action, if it encounters an error</dd>\n      <dt><code>on_error_resume_next</code></dt>\n       <dd>instructs an Observable to concatenate items emitted by another Observable to the sequence emitted by the source Observable, regardless of whether the source Observable terminates normally or with an error</dd>\n     </dl>\n     <h4><code>rescue_error</code></h4>\n     <figure>\n      <img src=\"images/rescue_error.png\" style=\"width:100%;\" alt=\"rescue_error\">\n      <figcaption><p>\n       You may pass <code>rescue_error</code> either an Observable or a factory action that\n       generates an Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>on_error_resume_next</code></h4>\n     <figure>\n      <img src=\"images/on_error_resume_next.png\" style=\"width:100%;\" alt=\"on_error_resume_next\">\n      <figcaption><p>\n       In Rx.rb, <code>on_error_resume_next</code> inherits the misleading nomenclature from Rx.NET\n       in that it concatenates the second Observable sequence to the source sequence whether that\n       source sequence terminates normally or with an error.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>onErrorFlatMap onErrorResumeNext onErrorReturn onExceptionResumeNext</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      Rx.rb implements the <span class=\"operator\">Catch</span> operator with four distinct\n      operators:\n     </p>\n     <dl>\n      <dt><code>onErrorFlatMap</code></dt>\n       <dd>replaces all <code>onError</code> notifications from a misbehaving Observable into the emissions from a secondary Observable</dd>\n      <dt><code>onErrorResumeNext</code></dt>\n       <dd>instructs an Observable to begin emitting a second Observable sequence if it encounters an error</dd>\n      <dt><code>onErrorReturn</code></dt>\n       <dd>instructs an Observable to emit a particular item when it encounters an error, and then terminate normally</dd>\n      <dt><code>onExceptionResumeNext</code></dt>\n       <dd>instructs an Observable to continue emitting items after it encounters an exception (but not another variety of throwable)</dd>\n     </dl>\n     <h4><code>onErrorFlatMap</code></h4>\n     <figure>\n      <img src=\"images/onErrorFlatMap.png\" style=\"width:100%;\" alt=\"onErrorFlatMap\">\n      <figcaption><p>\n       <code>onErrorFlatMap</code> handles a special case: a source Observable that is noncompliant\n       with <a href=\"http://reactivex.io/documentation/operators/../contract.html\">the Observable contract</a> in such a way that it may interleave\n       <code>onError</code> notifications with its emissions without terminating. This operator allows you to\n       replace those <code>onError</code> notifications with the emissions of an Observable of your choosing\n       without unsubscribing from the source, so that any future items emitted from the source will\n       be passed along to observers as though the sequence had not been interrupted with an\n       <code>onError</code> notification.\n      </p><p>\n       Because <code>onErrorFlatMap</code> is designed to work with pathological source Observables\n       that do not terminate after issuing an error, it is mostly useful in debugging/testing\n       scenarios.\n      </p></figcaption>\n     </figure>\n     <figure>\n      <img src=\"images/onErrorFlatMap.withMerge.png\" style=\"width:100%;\" alt=\"unintuitive onErrorFlatMap and Merge interaction\">\n      <figcaption><p>\n       Note that you should apply <code>onErrorFlatMap</code> directly to the pathological source\n       Observable, and not to that Observable after it has been modified by additional operators,\n       as such operators may effectively renormalize the source Observable by unsubscribing from it\n       immediately after it issues an error. Above, for example, is an illustration showing how\n       <code>onErrorFlatMap</code> will respond to two error-generating Observables that have been\n       merged by the <a href=\"http://reactivex.io/documentation/operators/merge.html\"><span class=\"operator\">Merge</span></a> operator:\n      </p><p>\n       Note that <code>onErrorFlatMap</code> will not react to both errors generated by both\n       Observables, but only to the single error passed along by <code>merge</code>.\n      </p></figcaption>\n     </figure>\n     <h4><code>onErrorResumeNext</code></h4>\n     <figure>\n      <img src=\"images/onErrorResumeNext.png\" style=\"width:100%;\" alt=\"onErrorResumeNext\">\n      <figcaption><p>\n       The <code>onErrorResumeNext</code> method returns an Observable that mirrors the behavior of\n       the source Observable, unless that Observable invokes <code>onError</code> in which case,\n       rather than propagating that error to the observer, <code>onErrorResumeNext</code> will\n       instead begin mirroring a second, backup Observable.\n      </p></figcaption>\n     </figure>\n     <h4><code>onErrorReturn</code></h4>\n     <figure>\n      <img src=\"images/onErrorReturn.png\" style=\"width:100%;\" alt=\"onErrorReturn\">\n      <figcaption><p>\n       The <code>onErrorReturn</code> method returns an Observable that mirrors the behavior of the\n       source Observable, unless that Observable invokes <code>onError</code> in which case, rather\n       than propagating that error to the observer, <code>onErrorReturn</code> will instead emit a\n       specified item and invoke the observer&#x2019;s <code>onCompleted</code> method.\n      </p></figcaption>\n     </figure>\n     <h4><code>onExceptionResumeNext</code></h4>\n     <figure>\n      <img src=\"images/onExceptionResumeNextViaObservable.png\" style=\"width:100%;\" alt=\"onExceptionResumeNext\">\n      <figcaption><p>\n       Much like <code>onErrorResumeNext</code> method, this returns an Observable that mirrors the\n       behavior of the source Observable, unless that Observable invokes <code>onError</code> in\n       which case, if the Throwable passed to <code>onError</code> is an Exception, rather than\n       propagating that Exception to the observer, <code>onExceptionResumeNext</code> will instead\n       begin mirroring a second, backup Observable. If the Throwable is not an Exception, the\n       Observable returned by <code>onExceptionResumeNext</code> will propagate it to its\n       observer&#x2019;s <code>onError</code> method and will not invoke its backup Observable.\n      </p></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>catchError catchErrorJustReturn</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"Catch"},{"path":"/documentation/operators/skipwhile.html","html":"\n      <ol class=\"breadcrumb\">\n  <li><a href=\"http://reactivex.io/documentation/operators.html\">Operators</a></li>\n  <li><a href=\"http://reactivex.io/documentation/operators.html#conditional\">Conditional and Boolean</a></li>\n  <li class=\"active\">SkipWhile</li>\n</ol>\n\n   <h1>SkipWhile</h1>\n   <h3>discard items emitted by an Observable until a specified condition becomes false</h3>\n\n   <figure>\n    <img src=\"images/skipWhile.c.png\" style=\"width:100%;\" alt=\"SkipWhile\">\n    <figcaption><p>\n     The <span class=\"operator\">SkipWhile</span> subscribes to the source Observable, but ignores its emissions\n     until such time as some condition you specify becomes false, at which point\n     <span class=\"operator\">SkipWhile</span> begins to mirror the source Observable.\n    </p></figcaption>\n   </figure>\n\n   <h4>See Also</h4>\n   <ul>\n    <li><a href=\"http://reactivex.io/documentation/operators/skip.html\"><span class=\"operator\">Skip</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skiplast.html\"><span class=\"operator\">SkipLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/skipuntil.html\"><span class=\"operator\">SkipUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/take.html\"><span class=\"operator\">Take</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takelast.html\"><span class=\"operator\">TakeLast</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takeuntil.html\"><span class=\"operator\">TakeUntil</span></a></li>\n    <li><a href=\"http://reactivex.io/documentation/operators/takewhile.html\"><span class=\"operator\">TakeWhile</span></a></li>\n    <li><a href=\"http://www.introtorx.com/Content/v1.0.10621.0/05_Filtering.html#SkipWhileTakeWhile\"><cite>Introduction to Rx</cite>: SkipWhile and TakeWhile</a></li>\n   </ul>\n\n   <h2>Language-Specific Information:</h2>\n\n<div class=\"panel-group operators-by-language\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxClojure\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxClojure\" aria-expanded=\"true\" aria-controls=\"collapseRxClojure\">\n              RxClojure <code>drop-while</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxClojure\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxClojure\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxCpp\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxCpp\" aria-expanded=\"true\" aria-controls=\"collapseRxCpp\">\n              RxCpp <code></code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxCpp\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxCpp\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxGroovy\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxGroovy\" aria-expanded=\"true\" aria-controls=\"collapseRxGroovy\">\n              RxGroovy <code>skipWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxGroovy\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxGroovy\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skipWhile.png\" style=\"width:100%;\" alt=\"skipWhile\">\n      <figcaption><p>\n       The <code>skipWhile</code> operator returns an Observable that discards items emitted by the source\n       Observable until such time as a function, applied to an item emitted by that Observable, returns\n       <code>false</code>, whereupon the new Observable emits that item and the remainder of the items emitted\n       by the source Observable.\n      </p>\n      <div class=\"code groovy\"><pre>\nnumbers = Observable.from( [1, 2, 3, 4, 5, 6, 7, 8, 9] );\n\nnumbers.skipWhile({ (5 != it) }).subscribe(\n  { println(it); },                          // onNext\n  { println(&quot;Error: &quot; + it.getMessage()); }, // onError\n  { println(&quot;Sequence complete&quot;); }          // onCompleted\n);</pre></div>\n      <div class=\"output\"><pre>\n5\n6\n7\n8\n9\nSequence complete</pre></div>\n      <p>\n       <code>skipWhile</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipWhile(rx.functions.Func1)\"><code>skipWhile(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;1&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava1x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava1x\">\n              RxJava&#xA0;1&#x2024;x <code>skipWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava1x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;1&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skipWhile.png\" style=\"width:100%;\" alt=\"skipWhile\">\n      <figcaption><p>\n       The <code>skipWhile</code> operator returns an Observable that discards items emitted by the source\n       Observable until such time as a function, applied to an item emitted by that Observable, returns\n       <code>false</code>, whereupon the new Observable emits that item and the remainder of the items emitted\n       by the source Observable.\n      </p><p>\n       <code>skipWhile</code> does not by default operate on any particular\n       <a href=\"http://reactivex.io/documentation/operators/../scheduler.html\">Scheduler</a>.\n      </p>\n      <ul>\n       <li>Javadoc: <a href=\"http://reactivex.io/RxJava/javadoc/rx/Observable.html#skipWhile(rx.functions.Func1)\"><code>skipWhile(Func1)</code></a></li>\n      </ul></figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJava&#xA0;2&#x2024;x\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJava2x\" aria-expanded=\"true\" aria-controls=\"collapseRxJava2x\">\n              RxJava&#xA0;2&#x2024;x <code>skipWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJava2x\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJava&#xA0;2&#x2024;x\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxJS\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxJS\" aria-expanded=\"true\" aria-controls=\"collapseRxJS\">\n              RxJS <code>skipWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxJS\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxJS\">\n          <div class=\"panel-body\">\n            \n     <figure>\n      <img src=\"images/skipWhile.png\" style=\"width:100%;\" alt=\"skipWhile\">\n      <figcaption><p>\n       RxJS implements the <code>skipWhile</code> operator. You pass it a function that governs the skipping\n       process. <code>skipWhile</code> calls that function for each item emitted by the source Observable\n       until such time as the function returns <code>false</code>, whereupon <code>skipWhile</code> begins\n       mirroring the source Observable (starting with that item). The function takes three parameters:\n      </p>\n      <ol>\n       <li>the emitted item</li>\n       <li>the zero-based index of that item in the sequence of emissions</li>\n       <li>the source Observable</li>\n      </ol>\n      <p>\n       You may optionally pass a second parameter to <code>skipWhile</code>. If so, that item will also be\n       available to your predicate function as &#x201C;<code>this</code>&#x201D;.\n      </p>\n      <h4>Sample Code</h4>\n      <div class=\"code javascript\"><pre>\nvar source = Rx.Observable.range(1, 5)\n    .skipWhile(function (x) { return x &lt; 3; });\n\nvar subscription = source.subscribe(\n    function (x) { console.log(&apos;Next: &apos; + x); },\n    function (err) { console.log(&apos;Error: &apos; + err); },\n    function () { console.log(&apos;Completed&apos;); });</pre></div>\n      <div class=\"output\"><pre>\nNext: 3\nNext: 4\nNext: 5\nCompleted</pre></div>\n      <p>\n       <code>skipWhile</code> is found in each of the following distributions:\n      </p>\n      <ul>\n       <li><code>rx.js</code></li>\n       <li><code>rx.all.js</code></li>\n       <li><code>rx.all.compat.js</code></li>\n       <li><code>rx.compat.js</code></li>\n       <li><code>rx.lite.js</code></li>\n       <li><code>rx.lite.compat.js</code></li>\n      </ul>\n      </figcaption>\n     </figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxKotlin\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxKotlin\" aria-expanded=\"true\" aria-controls=\"collapseRxKotlin\">\n              RxKotlin <code>skipWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxKotlin\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxKotlin\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxNET\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxNET\" aria-expanded=\"true\" aria-controls=\"collapseRxNET\">\n              RxNET <code>SkipWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxNET\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxNET\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPHP\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPHP\" aria-expanded=\"true\" aria-controls=\"collapseRxPHP\">\n              RxPHP <code>skipWhile skipWhileWithIndex</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPHP\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPHP\">\n          <div class=\"panel-body\">\n            \n<figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP implements this operator as <code>skipWhile</code>.\n    </p>\n    <p>\n    Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/skip/skipWhile.php\n\n$observable = Rx\\Observable::range(1, 5)\n    -&gt;skipWhile(function ($x) {\n        return $x &lt; 3;\n    });\n\n$observable-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 3\nNext value: 4\nNext value: 5\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure><figure class=\"variant\">\n    <figcaption>\n    <p>\n    RxPHP also has an operator <code>skipWhileWithIndex</code>.\n    </p>\n    <p>\n    Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements. The element&apos;s index is used in the logic of the predicate function.\n    </p>\n<h4>Sample Code</h4>\n<div class=\"code php\">\n    <pre>\n//from https://github.com/ReactiveX/RxPHP/blob/master/demo/skip/skipWhileWithIndex.php\n\n$observable = Rx\\Observable::range(1, 5)\n    -&gt;skipWhileWithIndex(function ($i, $value) {\n        return $i &lt; 3;\n    });\n\n$observable-&gt;subscribe($stdoutObserver);\n\n   </pre>\n</div>\n<div class=\"output\">\n    <pre>\nNext value: 4\nNext value: 5\nComplete!\n    </pre>\n</div>\n    </figcaption>\n</figure>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxPY\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxPY\" aria-expanded=\"true\" aria-controls=\"collapseRxPY\">\n              RxPY <code>skip_while</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxPY\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxPY\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxrb\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxrb\" aria-expanded=\"true\" aria-controls=\"collapseRxrb\">\n              Rxrb <code>skip_while skip_while_with_index</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxrb\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxrb\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxScala\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxScala\" aria-expanded=\"true\" aria-controls=\"collapseRxScala\">\n              RxScala <code>dropWhile</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxScala\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxScala\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n  \n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"headingRxSwift\">\n          <h4 class=\"panel-title\">\n            <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"http://reactivex.io/documentation/operators/#collapseRxSwift\" aria-expanded=\"true\" aria-controls=\"collapseRxSwift\">\n              RxSwift <code>skipWhile skipWhileWithIndex</code>\n            </a>\n          </h4>\n        </div>\n        <div id=\"collapseRxSwift\" class=\"panel-collapse collapse\" role=\"tabpanel\" aria-labelledby=\"headingRxSwift\">\n          <div class=\"panel-body\">\n            \n     <p>\n      <span style=\"color:#ff0000\">TBD</span>\n     </p>\n  \n          </div>\n        </div>\n      </div>\n      \n\n</div>\n\n    ","name":"SkipWhile"}]
